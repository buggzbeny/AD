<File version="3.2">
  <FileID>823ae09b-537d-4642-b0a5-d9876a91527e</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAE6ASURBVHhe7b3ndxRZwqc5f8l+291zdvfD7s6Z
M2fed2de2z1ty1OUoaCg8B4kkJBAeFd4j4T3HmEkIQPy3hskIYFcplLeZyrlgN/eCEEV1a23m+oG
SiKeh/OcVIa590akiPu7oYyI/wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABv
kc8mTbq6cmVw8YrAFcWBAYGIiIg4UQ0MLF65cmXx1KnTil908/8xS5cuq+7oG9ZjT48eN3YhIiLi
BLXa3aUu/3OdOHlWL7r5/5gVJjE8buxWQv5jPSh4goiIiBPUhLzHKnf3KOLYyb8eAKxTBlZqSDQr
JhciIiLiRDXRDOYrTQAIjzjxegHgiadbSYU1SilCRETEiWqSGcw/+jkBoMYEgOSiWqUWIyIi4kQ1
2QzmHzX2/pwA0KPk4jqllSAiIuIvodWBp5fWK7PcrcyHf0WzTEZZg73Oq2WkmMF8lafv5wWA1JJ6
u2JERER891odelJ+te4m5SsqueAvescsE5f50F7n1TJSTQio9nhfLwAEmABQ19ynjIcukyoQERHx
lzC3qlkxacXaHX5O+45f/IvuOnpWF27dV55Z59Uy0k0geNLc//MCgHU6IesHG5XzqFnZFY2vTHsT
NtplZlf8x/Osn7Mrm0z9HmX/2TJ/SavNLcqrbjW2KKfSM8Yyf4sv2/yX9oWpu2q07lzzmmOWtfZf
TqW1zqs/j7UuIiKi2w4AsRml2n/ikg6dvmp78NQV44+vL6dbIeDS3SQ7ALxahjWYf9LyMwJAfUuf
sl50ctkVHtNZ1el+cr6SSxpMZ2w64h/mvQlNBz/mdKPdWXqUmp2nmJRSZVaajnOs5f5Mj9lxbiWm
ZujGrWhduxWvuLxaU1bTGMv+Lf6FNr/YX3Hxibp+K0bXoxP1oKhWD1Jy9KCwXrkVDUpIydSDgno7
lIxdBiIiOl1r8BqXUaYDJy7r8OlrtscuROrgySs6cua6Is5H6tCp0en7j1/S5ahk5Zt1Xi3DGszX
tPpfNwAEFDe0eu1Raq7pMHPNKDq/+onuRMYrobBBBbXtKnjSpsKaDhU8bjE/t5uf25VfZZY1o11r
3stpedY0U87oe2t5MyI2ZeY/NsvUdKqoplbR0clKLjPrmUbnv1iu8HG7csvLdSc6XelVppyKemWW
ueyy8s08exlTT54pyxplvyy/8IkZ7dttNnXWuhRz545uxBXoQWqKrkQmKq3C1GPaNdpeq6zR7bDL
Mm39aVmj5Y9u0+i0ArvdDYqNTTL7otHe/rzqV8p4sb/yqqp082qk7qSWKbXwsbIf1ejOzTuKya61
y8oueqjE/CrlVI/ukzwTcux6rJ9Nu0brM22sbjbvW37SxtHPBBER33et/jQ+66EZ6ZsAcGa0o39c
51aZ6VMam9uUmJ6nfScu6cjZ6zpw8rKuxqTYfcWrZViD9rq2gdcMAMtNAGjz2cnD6oDyTadY+MR0
1HcSlVhWp7TsQsWnZut2TKLu51XrfmKSbt5LVcpD04GWV+l+aq5iHiTrVkK2MirbVPzEZUa/abp5
556i0yuUX9umdFNGTEKqbt+L0bnTZ3XpXo5JKS4lmY46MjbVjJSfKCXlgU6fOKvrScXKKKpQYnaV
6XxblJqRpUhT1t3kIuWajjKzoETxiRm6dS9eUWkPlWd10qYjLTI7KTYm1nS6bpU21OnW9Wg9KK1X
SnqO7sanK6mkXhkFBbp1955u389RlgkaOSUVSkjK1J3Y+7qTVGg66HYVVdcp3mzPzbtxis+rUVZJ
kS6dOq3zt1OUXm52cHGp7pp9EZ1SohwTQOyQUF2t25H3lFDUaPad6cxr6xR1O0axeS4VVtWa9ibr
dmymkvLLdD+rTDmPO1VY/khx6ebnRw1mf6XrVkyqkktdynn4SNH34kwbzf6sMJ/FY+szQUTE990i
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
P/2n/x9cD0q8zdRyHgAAAABJRU5ErkJggg==</Preview>
  <Form>xPqx1zJKI4gBACODCAAAAAAABADtfdlyKrmy9r0j/A6OdcuKxsZmitjdEVXFYCgbzGCmmxMFxoCpgRl7PdF/
nmO/2K9MVUmiKKAYjfvAjt3dwpCopE+pL1OpzP/kmx/t1mT8z/XVzc1/aONm8jVo//2r9DWetI2/
qj3zzZqP/0pZI4P+8/eN159+31Tao3HPMv9++OsW/vf7Rpnqk+mo/bfZnk5Gmv775mXa1Hsttf1V
tvpt8+9mNKqFW+HIXfz+oX0bi/+6MTWD/PI7kZcxBtZook2IwJeRZVqTdlL/ddPq9vS3EfnqL8Uy
JyNLH//CnpO+k08N2qPJly1Dmk6sUkvT24me0TahX+Sjkd83d/f/CTof3fTVZ+ut/eufFPmljd9R
9F7bnJR6f8gXoqG73zcP0c0/BOMmW6O39qg0+dLhp3qf7beyZel0ZDcKyLQs0xkA8le5Z2qjr38k
SZIlKSl1MuS/yL/JvyyF/DvVIU0F/yHRV9L5u/OSJTlVJv8uvs7pG9dX0gFfF2kXaRdpF2kXaRdp
F2kXaRdpF2kXaRdpF2kXaRdpF2kXaRdpF2kXaRdpF2kXaRdp5yVNqbTTr5KeCRtStnJf7yjl9xBp
P4b7UrYYbEjp1/dQQdEf430pDG210kkXJN2Syd9zweurxtIvKO+zkCQNn4tTSf1INjuK9Zl+kAYx
0tY+Ek1JseahMbRnq/qmkN98Jn2If0Af6nOF96GBfaqQtoTtzGdcK5C/G6/Qp966J93vdZH2PdKU
aiedkfomYOEtQPBGENqpZujsI0JVQEcC2jK2S2VEy/1dB75Rl5RCJ9Tx0bdBKzuU1HdArMkRC23V
/Kze0nbkQ2oBgqsx0s5NfTxpNhcnCC68w1PUJj2hz0ne5zy0ZdLWyd/j9YJSub7qpFtS/x6fO6rt
N4hnNqf/Rmn9DGjEYqBBNCrgs38PGnVRg15f2QitvhtktmthMtuVQIPor3bVkvR6iqCjKhPEVog+
e4RvpEHfJasgIWg8xsnfvySCjhLoaLtvajPRLABiY1SnIoJV47Mak4kOnsjQ7mpE5zoIhr+nOcLh
73PnSRd17nMK+pCDPsg93CcIgi3SR4n8vfReJZ+vwSqskGfCz8sOomFfKHGtnZlEanMyLrDTYDsg
1Y8yCxdpfqQRDQp7+CPgr3vfpHiT+P5aohrVSn3Yc4377fWVbt6R2W7Ebf2lwTcKwAoeYfZL2J6D
hNwXaZeD0L6DthJ4ZTt2A9eIeX01DwECKxSxc9S5ieFzYyI1/xgl1MGRF0BoHHSwznUyItqF4Our
JmUJ/DeAFYSKdWhHoI95WIelP9D+gD6lcV3e9x9kPZmtKjWC4E4qBhqX9A1XbgGe+1Ve0tJ1stIz
3ZAGKx3GsS4b3z+n/1ppFIFlojGlbnUArDNOtQ3VLTLfT21OkAvSz1PtpcLcp/Ov11dk9t/gnVuY
/ZcqQ2gQPvECCC3HWVttE05ZUAUejKwW93z1PUHwRhDq6FTZRvA8FHuF9nRI2rMAQWg0Du0g6Fwz
YNg6eirB3zt5G8GVKXlSIpNIfKXcmzzFoGjr1MIXtB+yHn2k7RGuOmhnoF0kTwrvPIa1RH2erukG
IDRFnqIn1/EXRK6UhqeU+o9vzt6FmuHoc/ovlfbxIHdwRyfjCPyNjHwmJdpRSTq3yAipjVOj+y3Z
X2HuqvB3EzXocGGuyX5KZ1tAbAjaUWgHGDpKJcI7dFgDtrai+292qhFtxTQmeVLktSX2Tg4QPIkA
YoPQDgBiZyFoRxmCh9B+yDGd3SlZc4Jooslf4lEp03ipccuNWIs5B8GvuA9wBIfxGQasvbAKYZ2W
H+CdPzAOmSmMC3KhZJatCbl/f6e7mbTUyIbJuFa7ZNzJKJCnzkte9unur3PD2yGlKaW3UJ3YWZ+I
Rxg3OrJ9ZAHI8JjV/ZilOpXg7Q7aMa6NAnwuIwyf11cBjlj3J3D2I4CGYumVMUT0NSjtQbrPWSrd
84nuZe/oiNh7htDZF0MwbUcWETypgoQBl1iyecjw+W0mZY1Co8NZhMx0MGURtM+c2VAEf7GnDGa9
1ynX0iMYtxSMQqGOLILsbeQXql3SA/7UZFwNWEPhD5uHQB/IO9+NkDOWxjTDq21n8XcKeXinAiP7
BIgu37lmJujMXeNl6rW/Bul+6v0NbKeoNwzmUi2+Vx0eUgzUkRM8yINm+F5Sq4G3QprgjfDanAux
nCVQ1hB0tTmCZ7AGwkWB93ZUtO04U7G5UUYmGrIkNUqrV537ma6vKKb5zhJseK1sXPmf0K6ibQg8
+Bl48Iew1yXouNl9KsMnvhEhZyyNsLMPqVFVbHY2pOP2ATOR11zaBmcixvG3ei4X9tPVPJfwjE61
kKI8haCF8NxOWhJ8X8gaSg6rJXgTETlciVh3O4ZtzWmH4zYPEWw5/XFi7+l5poNfvPrsrWFXrdMB
W9kxrzUQhV/Mok4GxHcJb4nVCDsj43YAneu8zglvh5SGfA91rjnwxtsXH/kVjG9d22s/5XOHvFdJ
c9tvgJwTWQLb4/tphkfCQ4aMFWxCrDeCkUX0dGLpkbUwGOdsJpwud2y9LzMdXJzyPk93W6fudoCv
/C+vUUGmXW5Q/kb3AfQgfyNCzlgazhSOmy7ibehL2/hpk/3U8xMh1i412I6dMO4HH5LLt5WG9kxB
PFLeu4XODXrx4pF9wgE8xF4lnDUk2I6d5X0O7LhON7W5fRBgmqHUFvlbfm/WsCdCzlgajFMCRim3
zN92R+zm/ZSjoXjP+V3ppVN9tVmDqRB86Z8hiuBbleIR8LaR53q2A6wdDoi8t2TOjbnNtSsB5lEh
7a8tWMO6deqrHWXt7PDV9pOjLZeX6vPvRMj5SkNd84x+TY7XwAr+tmPbcz/lDFDtcdZAfQ38PCHi
8N6I4eAReO90P9bQj4j+t8iH3LJ9WRTBhLnI6JOe+bHUfPBeX23OS0x7F4BxKyT6D/LerGEfhJyx
NBwnZF89caZ88be9eC9nDbeNfKZZUIjlVqcI1sxkkyI4yXivqYm8d0udK7CMCLSz3BZUrq+M8OfA
banlhZW89zr11eY7Uanl7ETAew/DGvZAyBlLY6whry5YyLvwt632U46OW2in+fmWYkUbY8p780xD
Fjke4zbv9Y9gzjImIYNIfByMmQf5Fc5lnt2WmrWNpbYv73Wzhi+2hsicHog17I6Q85XmzRr25m9+
91PmCS0KsWf5hh5qCWe6qCE7GLUQEXhvYBdLbcJj0RIY2ZMtScyuT3JLzdjKUjsE711mDdTfeyjW
sCtCzljaCtawL3/zuZ9ybZOOMG0jZ/NKAyPHHmQnroGeCUfrIu8N7WCpRVLiGRt6dzMy2vUQvZHG
aA7ow6cXN99vne7AGoAz0H3hGxFyxtJWsYb9+Jvf/VTQNpw1UE/VooakeBspAu8NqjtYanrVbQui
nSacZ8ngc6ZnuttYanvzXk/WAJzh+upQrGE3hJyvtNWsYS/+5nc/5afEav/etvPp+ag0bOXmooYE
vHXYCVk06pP3umLN1Ai31MxG3HLsNLTrES85zzPd/dfpbqwBOMO/CW8HlbaGNZyA93J05JE1lPl+
mdYX48kVFpXgsFjkvf4ttakKlpoqxPpUOE/h51lFYRzcJ2DH5L2rWANwhn8R3g4qbR1rOBHv5QhO
tIX98qul2RqS4a1nLHAA4L2bTom5pTYVdC4yaa7fkrZdj5aa6oGng9mnO7CG+vzfhLdDSlvPGk7D
e7l+a/BT4iSyCNcpsQKsYSrGOfBIm42WWm7RUrt136yzz7PmnDVsbantM26rWcP3IuSMpW1gDafg
vcJ++crxBPeKXu2bwfa9ShvBwo2J2EbeK1hqX+KtoIRjqel4Fw+i2UIUb+Y+ltru47aONXwrQs5Y
2ibWcALey/Xbs/pKPVXhD3ozzn0LDU+Jnzk+p/54L7afVcFSG6YGos6FHjyviyc/Pu9dyxq+EyHn
K20zazg+7+X6LQxtKcTnTvtw8MZPiXXhxoQqxPe6EctPMKZt87OKt4DYmZrjzRVO1Foi3na31HYd
t/Ws4fsQcsbSfLCG0/Be3n4W7jOYw+zAzRqeXSyX4G2DpTYfipYaxD7ibb3XhRO1TEjA2z6W2m7j
tok1fBtCzliaH9ZwWn9vsbnAe6sF952KPLQj/Hwi4M17BUutvGCpVR/g9qjuZg2zrIC3vSy1ncZt
I2v4LoScrzR/rOEEvJfPHd66ZXs6aEiawwniaLSmjeBocqO/l1tqRl5gzh/sTI2vkeHCzgN4Cx1z
ne7IGr4HIWcszSdrOD7v5Rxzyr1lCt6K5HYW570DbUHDevFe7v/Nca2dMIfFoVvnYo4JAa+niMPf
hTV8C0LOWJpf1nB03st9qx1oKxzBEJkzc58SN1w3gxd4r2CpfbG7m25LzY55f3VyTohr6ATnMjux
hu9AyPlK888ajsx7A4v4KVhc+6idgWG5Tokfwm4NK/Jebql9qU3IqQM5c2T0GPNMkIKlpi3pv1Pa
p9uwhtMj5IylbcEaTsB7uZWUEu4ShzWZR0eCBiV47EJkWHQmIpjzXsFS07jOzdt328N9N2uYeJyo
ndrf65c1nBwhZyxtG9Zw/P2Ua5/OwilxuMd476PEM0OOBX+vtpTPAS214eIZR8G21Fi+GoikKLd5
D0KnWqc7s4ZTI+R8pW3HGo6+n/K8ZXNB+7xC5jS3BoW2pXrzXm6p5SOipVZZstSy+NRDz3V7Wt7r
nzWcFiFnLG1L1nDk/VTIoWMQxGZSeoblPzI+DfcpcfhTPCV2+3sRsVUx+tG5pSZYagUvb8dJ1uke
rOGkCDljabB/KjBuecXL7j8x7+WrJg7thRw6gZ7mvlPRVxdYw6K/949WBoy/f1ZjNLYnW00un6kp
Hug5yTpdwxqMV8HLHVyVKfJn4u2Q0hTYkTEHZ2h1HtoT814hh46YvyYsW+5T4kdEbNXT3xvpLltq
nIc46Bh52Yqns089WcMHvwuVROvyWxFyxtJYdvpyet3+ecr9dEUOHcg2bp+xlVPNudL7rEkYpXDH
eW9Y4L2mGI3WTLB8IiZI1IgVhPlEGl5r5nTr1POpH4SnfiykX78XIWcsjY2T2vawmr6F9/L9UxXv
VEC0rWcOnRFnuUPB31vgkTgJS20sWWoZtMx6Gz0sJ+K9go+Q91HacOfy5+HtkNJ4JuW3hgd6voX3
Cjl06qGwDjl0DCeHTvOR1lERc+jwnE80c6RK8+a1OGtQm71lS03dpHNPxnv5qolAO8v6CJkhu8eo
W6GOFDKOdrxIg3odC8oAx02IgUpzz/rQ1aan7UTCXBo85z6lJzNDNkID8nTv2bcVLw9pnFOG/foa
jr6f8rlEb1laOCUetrKfbm9Z2RUdeRtpB66vNDLSkDcPR7oeSNTdltoj32k2xT4emfdyC+M58Dq5
tSQ9U+zSmUnuMqceL366Luxd3H5I2NyK5tnuzUNzyRrnxpJaTjTtMhlWrPtlV+8wsaLNuDITqisk
7d0wQRF+ixayk/dYGc6N2+2g6utJybjR2lNzuHFTrvnVRgfeT+28UkLuZZ5DJy3YWSari8LjbDDW
sQ6aweiB9+yR1UlJsXzRtfDHGkstwhH8HbyXW2rvoqUGWdl3mlOynw5nIUuicfcfgLfBPCSOW2nx
RmtHoXe0n3NjGLcy0cqA6Vu8rZKCke1ifEgD2kmtmWhKmvkZgnoLjZEtwYK6d8PnykSIQElcX0Fd
MUk1U9octDTcA8/tnH3C/aRubTT1rY0OsJ+6Misv6DdaZwc+Id4lxsKCdLcTKl5STfCcnUvqC+R5
/Jib8KRWDN9RWtSjImGtlkbOrlVVqoDEmCe7F7JoH5f3CmdBKvSxS+/SITcvd9ZYal5zqjT+pOvO
2WMKMxQ6dRRpBSRrboDPEBBtpuyV34S/v8LfLbAXIiFqL6ANPAVdEP3C/Fq4u2G2oim07+EbY435
dFrw+Q+N7HWxR6rlm3JrjnmPq7fKom+e6f1Uc0scu9DLqx8gOlKg77xz+B9qP/XKBZ6HdqlD9Vt5
UAnWP9PVdyNjVxvKBhtiOUzPipfi3kXjcIC/kblqEV1gr9Mu1mpBHRyzI3Ny8ItFeMossgjDc0c/
2r02T+9Yov+Q0mmGYL9zOmx5sAKNIpbHg7zb8SBhrCczGy56GZ2IPP/3AT3bE/RS4slQfnifJuM2
T48+qy2qbegqMmZp2BdSE5uHGJ+Pm/nRMnr1eqrr3k81ro02Wm4+99OGB2JzsGaKiJakPXOYrwai
DsQbDkK8+HYv/qQGInYA1f2adrW1D2mQDUD1DaLvZHqKB94M6GMRvWefjSW8Zf2xKR/tuDBuuQj0
oSycJOJMbHqZ0XjH2bHtekax7EywB0Df0T28p7KbJFGvmFEagRcV7wOG+Cd49QShHWKR/gHhdNML
0ddXX/ANvWoQ1pAgTHki9FEWmAvkgtkKvbavoUarfkGGOef81M0Id+W9Xy6LBGzB4guZqZ4ULslQ
MYTW1KR+AMxD6yAWtA/U9KXVrTKgjfKPGtbTemX5y7G+FtR9wmcoYc1DWyLWgWoYUPd1QDOeEwla
FlmEkwG4wdZtQjfDPaLlA1pBeesl6CgUAE3PirhOefWq3bJA2ZWCcNxQQpH7FhL8Bv6aF/UMmGLl
WqjjmV48e+ygBsTMQPGhC7EqQ+wKvO2kc4XcREIdPPG8fgzvhGV+B1Z1c298Kp/opTdsSu9Vpwar
c2JRKEH7drBZB6+sk8I5Yx525GK3bxLbMOxwTrGGZrqok32D7JYG5qvBjPrtUNJdC16stM3a0oCs
ugKsOkA8YbUDhsckxZtQQVVBdGTiU81ZNSZUNjbkmmTrYPZ5tQ7r2qjZWj9pr1Nt5brciODQwqiQ
cUsPOZsPV+yqr/Cbbyu8YyyiTphrqr0grzuL90DEPmheePJXf2brvMdrcxUhD4ktfiLSglqOiSHw
XvvEv1X8lNRasmX78v3oXkn0lrHqpTYjxIqrwqlxxIsHe8TVsB23hDcikoLf0tGx9BecSvB5pWHX
T7XzNA4oQsk+ILAGpd4JrV2WK55UkPCKtbtFRBsFwRcB6HG0uKCTUR9iPcoCRB2UsnwcXOt03fkD
95/M6bjZZ2jqezop0QjNVLDuXewe7PrJEqsdvqe1ebo/MzsyxVvPxQq2QewBea+rzeJUY1zvYxut
xWd+lpSkub6b7Ck3o1e/13vO3Ip7uN3G+zFz9/mXYKXb+yl/Bys4VBp4IgYSRB3L1whfMzaaKmhj
Qx7aV6lfTxnS06T7QlcR1p8swuzTStuYU2cE6HnCX8TYDMyl+4xVrrE2n0HtrEc4BS4+wTuPA+2x
Xkj3zIok9e/vnIpv3OPCPcoSz1Zp7+g1mp+c7U2I0IfVJztxl88G6y5W+DpO8nyquJKNFTxXLast
ack7S08HCKtNwNyP2ktx+P6zFq/F20EQvMxDhHoMWL20ogkIjlXGkmomNYl619ajFxFcC+vLOjgV
ITZNpVN9xTrYH56eg6HAe2+xmlqVSViurE3QUuA7NFkjhCOkS710h+ieydCuv6DADltEffWJv5Hf
267HdzBSgtYExh37gTw14d4Vu5ayqJO9V5nDQ9i6xFU0dbErt8f4C+vXi5Fi9PtOfWd5ReSNEpoY
t26WoDDG2EXPVVbE23Alj90fb/u0V/AQdXGVNUQEj7POTrNwaueNXkTw4lwJNdC5LwJtGPQULPDe
Jw1YZ47qK9wNS2BH9e/tHbkgVFUPi4gO9xX4ewqjwZOiXe/JGQV0CN7YrFcb/VBRe19YHeOJ8bxN
7HNg+akN0ufaHavLDuvUeYq8QtZduW10EPOGi01F6T5BRqGQ7AGLpTykQiWGWZ2UNS88ZVnwfVGG
WKVZK774/hs5Gd52bK/hIRqzHrFdiyzoYGfdWvPqeAN64dU3w8YSghv2yAMjhBrBYbaD12k+fFnT
47WOq/besoRaF6IU6jkdJaRwrpsuSy8g5qvZw65fce4s1ATmrBX/jnmmHnGdqtQ3wdat7OwbNH8v
Y1cDwDRZh7bF20WPMe48QrZAsX496tyKwxFWxqmacJ46fEZvf7JZSMMJmTx4rgzRUzoquaI5joY3
wTuxU61RvzyE++OQFxeF2y+cB2/Svc7r40Hu2PirdisWmZk7c3kmuB1m87eGC7GcNSSY5yCBZyCq
C7GCxjzxvd2sxxrJgdYuqvy8iz/19ZX3ulTLNlP+AKZs85CE56gIr+VZGE6qzjlMf24m3RF0T3zu
h8exsxhevfC22r92AB7C/SMWtDOL+bnG9ETDD3rZyz1ToucqY+tgKS3kw1+ofwoZleBEFhFckl07
uMsKP2Ec12pflqCT0V/ShNMDJVySHTySdVrjteEZa22I69ThHUqZ+tHjvuPJ2dm3eN5A44+EnK7H
tLNCAt7CgKcx5vIeeH3i8DxEuPUdTUefh3CS3YIbYBgXUZnReLid6lbg+eonzFwMdz+sMA3tCs2H
z88PwjmH52IMwSzrQuyGiOET39tdOgFzeQrQ6+1EKuI6BXb+wdYp4bEYOUGZsZOhdSVivdE7HMWH
bv8ttcwwt1XLD3p25b0CJ8AoUxXibDJw7lwckT2bcG84Q4tIR+K9KxEcnnJ7Na+zjF8eq37Ll0sn
O/spt+3UrLMDi7E+3xxvuaUEAcETaL+EhTrsSRp7UQGWUIZ1u8uLxdVYkP1vOHbqx3Cd2xPqxxzJ
zmK2XzguoAXOnQ17FXHmknexiMP734RsR7BmxMjsNPP/7opepfAe6i9xBII353QzgSeqFkfDdtUj
T857fUUTcW/b9VWpUQwICBbPQHZFL/fNC9U30DL746khD3S+wCVi5Fg3YvC7Ks0UnDu7Yv97bt7r
35Lbal/g63Qg3p+pJbfkve6XmweL+ynmww9zv9HOeUK/MT/5mugiimC6LxS4JSZ6WKrv6cwWg+nc
Xxi2KktZKfqqx1we9nyBa/X+YFyZJpAjMN4yceLJeUWQFPaJV8ITqoQd1P/G10QM8yMF+KraEb0O
YnnMgeM1SlG/ZW67m3BnzHvXIhj3hTFyo4V8ls6J2RZDSu36JZ6LsbSjo+s3scaX+WlAja/G1I7j
H97VASHETpqgj7mAEcKvFE8ee/wRzp35Da+OkCfUGTr/6O2b4Y8FnQt8rzGJ1Ghs9x8Rb9uzhHPm
vV4sgu0LBRiHBNxG5rVZ9G0iOMX7MjwDpsbRsdK3cAj9xm2/h+F7utkZmjSzC9kFkADZ8eQyIhgw
XYR9ITrfZVXttS/gLQ4Zz+D42G1Vt0LC3EMuu6wtxP+eLd6OwEOEDDcaZw0wLpklf67nSx0G7Swq
qN+KMzyBQI4ZiexqFW2p3zg6eqBzFUQwnuLJtI/vwHsLaftWRmWSjOzOGnb0h7BfCFPWILx85O+l
sbKye3dsJMCvWX7gcxs5c7wdgYewlVt8ERDcfE/bcdJrXvTs6B3jWvm9XZpHJb8zOrbSb2tYA92c
Aa8EIZw1lPdhDTv5Qzjbt9qmO9bMV/5eevsAIr8K6cq7fRN9yufy2/KCfjMPEXKraRCN+8R9D9Qe
WDOucOOLnaA5vDdc2kfnuvWb+waEu81/4UHzZg3AGWzey1mDkFd2052LZVaxLe/lffxEa3JxFNfk
Mavd9ezz+EWbOlVdaZedPd4Ovy/waMjHnuCDqdI4hqp3njzBN5akeEMtjNrF7avf2ve1ua6imzV8
rGINwBmQ9+7GGobLq3BL3st/Ae3XlM8s8dTzjjPR6KWqcPvASOIZ7xf3hS3dJfgReDvoviDE9jQI
YuVShcc95Ffe6eG5FPKc907HfO62ttREPKJ+w1jZCPP209kX2kPkAPCNSRp0btaLNQBnAN6LWhj3
Bbw7PA0wCWt+QcheL54773pKR8Yp6h7HVXnMPPyYSeGEbEWc4U/A2+H3Be5haS3kycPotOiy9wyj
GOTJc2MgZT/kN2rXp6MFr9neliF2aJ7tLkh4wBOxBJ6Q4ey/eLaRNaQ5a6B9NOwT2RnsC3ArO+1f
IrR77mqlO/Jezs31ZTekZz4HiJHSaSY+lemSsY/zh5+Ct4PuC3wlF/V6sS8NqkpDYreTly03dzVw
up9Ohbvo/i01PrdGgEmEe20fiW1zI6x6bXMiQDDvZIyION7ZiCKy2N15b9vDjHDfa3PiagTfgoL3
GUKib+GH4+3w+wJb2UUxn2rZ6y47zi2/O/BK8ba1Hc9Zaxc8xkqkptjZ3BJUvy1lHVvVRp3rsAah
j3ZMPPDeFXnMVreTzKPSRS4/FXnvFh5iNioRdfPKwnu4/J4uzefA5+5Q+RzOAW+H3BeE/ND8HpF3
fmjXidonxh3+EfdTX3PLefFYNRm6hu8JQDDN53Col3/dy56qo+i31THyEDxfmPAoejJumu+dhT/l
wDs7yUI+hzLPzeHc9C198bn73vy958tDhPyW4bZM2FaV3blwq153xADOlCrup75Yg3BChvmTpsYs
NF7wv/nSkLKtcx1fg9BHxV4TlelCnIMPiZi7L2VLqEE7KmSQ2Ib3ctbwseJ29UI+h4U7iAnYDbfI
AvWT8HbQfcF1E1PMVYqWm1s7MdZwizZOVLy/sIX3nyO4KeQkHj7npt+ScZdHIfAcKFZ6iQNswXs5
a1DW9W05Voy07/zw3B+Kt8PvC/zMrSrw3sZbqC6MNWMN1Fs2x0q0LdGPtIevATkm5nXMU/22r6/B
8TTgOaB/X0M34Olr2NrfK9ijq81PFhfteHnsEwmvmflX4e04vDfD4z/kbCW+wHu9bkyMS6IfSfWN
WE8dHLd9rajf3N5X2sY9HDViEU8oNO8TCnY+MUS8TZCLz5gEb/8utgOaB/52iHPg7L+8RuEj3gy3
pdbdIvPej8TbQfcF7u8duv3kwovbNDx61xT3U9/xuzufZwlxDfmVcQ3uqIYd/CFrVuFG3iv8AvgQ
H6zV2KV5CdysofTuNTP/JrwddF/gK13hefNUvOe2yBpi7ppyQxFv0y11rqe2Ctj6bY+4BndUg4i3
7eMa3O1NvJfvJCG4O1xorQYvy0uwcKb2pO7EGn4Q3g65LwiROuka5Fbr39/pSzn61UdFc9/5+VC3
3k/3iuPyEQ3pFQu5rT9kr/g3bqn1cZzWvMAidu5Rqow1LN38/bfh7aD7AveWhRqaXJ+Xqpg1trbo
LRs+V+y4hrRjFdmeUEPEm39P6Pb6zVc0pFcs5C7+kM3xbxv8uwa/ebmCNbzCXXb7HuXAiSUrCflq
Nvt3fyLeDrov8FPipl7P9uVGVXZOid3jPRhDRrn3hRsU/eHevNenftt8h2LVDYrl+s5H2Be4Vr+F
9iP6ANeA17YvkPcKrEGoVLbDrbQfgLdD7gtifO9rx2gR3psyvCv7eNWUe4iIeDsMOlbotzWswc7a
s8AaxHuXNt4OwBpW7gtc5w4jfJzWoNfBK8tPju8M97wJfPZ4O+i+wPcmyA1J87TbOYbdLxrPS2uh
tbJTSaspFMFRWcTb7hHpa/WbwBpKgNhnntWOn/u5Yy9ioj/kIKxh875Q4is7sZY1GM92/hCZeXlK
xV19DT8FbwfdF9jeVAqxvQszFC5H5gzR+08rmy2cRun7+3s367elfA2L+8CGbA1H3Bf4qhpXrT94
12QwEfOUrUXwQt5jmjWRzo2f6lY/EG+H2xfE+6dZ7idfV7mdogMjACbztCXNn1IfzomFgLcDIHhl
3jxsv3Mdm6DZnd8XfNAfrkxpx/OH8D6Vh++L58xrXkamwm4Gc39v6d+YP+RI+8JUWKdNfkKRNGqf
K+oBAseMeZ5YFIYC3jzPpw7Ae12IbEEFy0JPh1y44P9IYFSC952fI+RT5Tx3pFq8dkET68esj49T
SjSPHs1wyPy9XXgnzudqp1y554u3Y9TxhHcKMYE1PHdD60LCqeXGq0dyBJMn5bO9t+9hHd44xwxj
fUDMnzr0+rvf84XtzgXZOsWahaqQCZ5Wi/TNGuT+Q7F3fSVl7pMljEgvC7x3tzpkZ4u3A+0LPF7p
+ioCkfyynd0UENwYRGrrRl5tppusuilYSU0FOCfRNTm7HqW2qCEPatevPFfe9IsHq1sRFfYFQ2Mr
V6yZ6euVZfVCRN6b5Vn8L7zXs83ttE9h3OyTHl8vdw5/28bGOC5aQZXz3p1ZhB+88fzkm3xh+/Ne
ntc90iTrdGxngu/kh+weEVRC9nmTCbNBL/HeIvfvblF37Mzxdsh9gVsD6ZIwbjLk6/UJ3kEr9+mu
VSWr3vkcQjsj+HzqVvC87lPI/Fiojsg6NVmcc2ornYsvwnudXEUNIc4B666HGvsh+Mzwdqh9gduz
WMHrMSvYC4rfDNMMwWM4Nf6gFUTsOu3XV0LsTndfBJ+sTsrqNs9kNa4SrhTLOzkAYJ2qJquKvu0r
25Y0idftEf29xQWr+kfj7ZD7Ate5KuUIdNzsmLzKYiyZTwTjbmnCeVd3nh7b+RwEBGPtPSEjyVY8
+Ej1ATd9I+BiCdBnqICZbBV4fJJzz8h/Je1lBDMfjyLwNxltkrmXjfLD8HbQfYGPQj68MG4rq6tt
heCENqd1sefu+Ek8hYtwVkp9ET4ieY5dH3Cp7aq2ZmrNREuqDj6rcxqHz725sE5b7ow42710WmFa
9ohzyPC528VyOw+8HWhf4Dr3ietcSaxfv88kOAieEAtGvr7SoJZete+2wt+gPXNZcptqtp6uPiD3
XqC1aVQNyoVytj2qcvtU/UjsUifF++XgFfgbv4kJjK6RF2LLfNzEPCO8HXRf4BW4coLOhdpBUlYn
fVtVRXjbF8w15qtJ4X7q3G6PNBPNeXp0d0fvCmugc6eCNxZ18tSTFx+rXptY6519YqRB5ASNxuUR
dPzuU0fRvwSOcAj0KhW8s11PsfheHqnT8lEL/jzxdqB9QcjOwM+A7bx6r47GPfS9XR4BvFA5G/xK
WN8U2nh/3kJ8/XHhTdDJX/vE1QwZPqOOhvWI7x3Dqgk/WbG3T1x1NEtUgsVX0ghhOMX7XH7SvQcr
E5Dq9kw4vDcF1auqHeMVc+jMdzw1/uG8V4zWfQz3k7yuikwrA/G8ese4dT587o44gm8pr8CoBDiV
i8m23Z5odsETFUZLLuTBg114U5mWjnKMu9vuMzbOS66vMLZnhFz8cTjOTaThaDEqYehadRufdO+X
EN/7usDoyFwNoR3jc+n71Pin8l5kCdxHmNQEnctG5Riz4C0N8FZgN+FmTo5qHp32Qawi9LeloP2C
UQpY5yJN8Rbd3TuLN/SHyGLxF1vO+cJ7wq5PT+822ecszr5A+pTRfFhjBxw30W/pmqtinc+t/xrB
P5P3cvu0+MDsV6nEqxBn36La8WbBWxqtC0BjWOjpVMKOZVSYZTdP2zEuuYGUbQcfaTaGMuW9OdCI
OpzIhvEu+zvyDmhHcA20EaGg1cO4BrK4ZjTDuT3qcADMK0VXTeSDRykzXrv3k+74IrvjB6u3y7IX
Cf5fgfdOfSH4p/HeIWsbg5xQmZbVOlhZu+rU+WoIh5zgGcdcGc7vk0I8Ocb6JO12gp47g0Ycxrqb
TwOIRNTi9xlp2Mr9EaKHkjYnSOM54OBPuk7vEakfSxnMD/uk20lj2qag8MzJYXbPTd0GwT+G90bY
J1Sj2K+2ZP3xzuZOaV81Wr8l2xK8nrQQt4qyc+npMVmfC5yT5u+lCExw/1uJIdLdFnxbMvXg/cn2
wX8XmkMFudm3Palvaf17XjEabZQFFlF6dLGIlafIZ8x7A3SdCpV++n0zbkiDipO9jT41RjB9zywc
UJp6n2x1lNln7VkaP1fu0NvaUfR5lSDymfAMonM1SelNa5t91mf+pPaLzx1HsMAipoiGAbNxPL1p
Z8l7MfooJOwLvXAqUOtAbOMzzVLcoDuNXel9RXz5aWbhIm0XaYrUSb266w4zBNNsqEU8kwtzX0SU
o+PMeG+DMR1sx+i+kPpy2af8nAYz4GxxePYT5vT/ojQHwRSxz7YlV5LsdgXaA0/99vW9vLfh4R95
gn2i0Kf7gpCtDdalzti+sU1V4VXjts/rIu2Q0mjdikacILZCbRhHW6kVzBVD2iVAS47f5HTuy4S4
Vt7ynHkrHhLgLNaF2Dxo1OJbrwZ54DXJ1rCJ6yvC7nWhtoHUyciVw47bRdq5SKOnS9xXjwhGq5wg
1qiDpafLgGDcj8svIt7c1YVwD4/xtq/otYCYr+bLi6lwxOa+GDdPuPM4LsTV4DtHHbeLtHORptdY
ZW2sCkCsdKEeb0GhCAdWAe2iHW9pAd7yPT8IjYu8w+3NcPMQjvko+roQsUWwsxRkrV7+EofV5jEO
/1TjdpF2VtKyORENNmPEHTlJWIZdWQ/yqYLdDu+gBkwCxyxhTusptHPIKu78sIY45b3IAmhutR6e
4SKPfdUf6b5AubjoH0mX7YpdfcoavnncLtLOSpqoz1z6LWznlZL1SkEya8WhlK2CrUeZcialy7CH
y8AiChgD/wLtJNSNLeK9pBfAJ9buLrRBo15fKdlstDFXSu/VuqSbYUPKVmKNDmcFslATmPaJrLLN
FToO8LpI+9nSCGsw7TrGxTagqy4zuz4t4Au0ttpspzOSaTZ6UlaVV+3g+uMnq0bfqbL4twHzFFAe
2yAIlhIvUi5mV+jKBpbrUR7ySS/S/q9Ioxqwe18vKOUOaOWac4qXfmU1DAeMOSc4S80Lfy+hp4Dy
EP1xAr6DhK1zJaP2ZpzDk16kXaRdpF2kXaRdpF2kXaRdpF2kXaRdpF2kXaRdpF2kXaRdpF2kXaRd
pF2kXaRdpF2kXaRdpF2kHVdaUHhdXwUP+DqxtHkyno3Ii+8FpHKgM7uV3sU3H5RM+fqqoFv6wvuW
KiWzyYGUlYV3C5akDKR+RkopXGixANESSkOSVFnoW6cjScOCVLIkqVBzPgz5iuDzJfLvnvNmnDQU
8rES+Qb/NZiNIfnD9RXcx8iy5yINtSPJCnzJ+XAMGs/khyBuyBQldCUpVRC+T/oGEpIFSX51S4B3
ipJbQkWSMgV3D8j3lSTibVEC6VVvSQLpldpxSyAPrGQWe4DoHdJHW5SQ6dBHW5SQhG64noE8MD6Y
ZHKESLTD+GgLEsgnM8sSivhorh5cXyUz9NEWJSj00RYlZDr4aIsSFIs+WDbI0Dunc1zwkFDAR3NJ
SNJHW+gB6e71FV59WJSQKmSWJciv9NGYhAcqAR/MhjT0LYBDlsFHk2bOh7HVA6RK0hN8SHYkqB1H
wq1yK9nfVyzyYDCn8kuwX5L65CvYo2EJB6ccJOtIKsyCt9AyulnasdsCLo0YrIVSME5hjm8qNdI3
0n1ZqsvQB7kWQXml9zvSSHYoTkdxlC4/BSxJJss0rpCuFQM0oC5LPiqniIy0mpGy11fvNKUw+XBH
0mFkMgMpORvim5IavO2UMES/11Fqd/RNuRboq/im8torxyTno6HG9VUJ/7tkwE/bHwaNQQc+G3TS
F8vBgH1VRdWDXyAJ/j8LRjrOlx5w3BBD5WC84PxGAIcGZiYo/EIfAYfz5PyCSsVaOE+gcui+IL/A
qIJSIX2IOCGGxWAGZ5D84z3g3FhUZreOhMcgyw1YjuP8oTQZfwNfSfwaSngJO29KZt+RkGBipWxU
snsgBe3bD4iQdoc8VDBIvv3CxEpli0ooSIkYC4hMRiTpg3yUfDvIL6pNO9gDGaS93LK3nywAHwxc
Is7eVCK8D/yGpsGfgV/LuL7K8qfgj6Y0mAT+aNI9k/DOJaT4OIaF3VlusZkQJNTYTMy4hCxMIGLh
SehBu4DSKBq4BBPeADTI4ijg6MH/P4RRYNOaDYo5S2fOj6TehZlw8Ka8CDMRvHN+IGixB3uBj1Jp
laCAhmCX/ocNY/uX6WKFXY+j6T04oP8xC9Ifo3h7sVtEDTCgAxJuUXs+2ZqIig0GYBxk+A+nZymi
Hb8yuJ+mCHycriug3TKWlII32ap6hEb3/RbedDoupWzd+gT/tjtO+marzT/0XwO7CwsUw/5wcia+
aX9UqQlvge6N9e0xXXjhU8rZxTfpU6YW3wxGyMQqqeASR7Jupaz7s0RTm/2lN2GzeHG/9aPZ4JpX
7O//BOWeqY2+/rm+uiGv/wRfRtagPZqwN5z2jakZ7b9/5cg/f/3zbo2MjDGwRhNt0rNM8hnTmrST
+savlybaaPJijXvwtV//KG1z0h6VWqN229z43XL7c/LrH+Fnb+zfvUnq//1/s/Z4WUJyRn7A/vqT
pb2t7vn/wJ//E8QvON/ONz/arcnN5GsAPZdeMslcmfz3+C/yrc6oPR7L2ig/a4907ev3zYs1J0/S
bev6TWkyfetZv28q7dGY/Mbf4b9if4Xu4n/d/r5RpvpkOmr/bbank5Gmk69Nm3qvpba/yla/bf5t
TnX9l93hgf0rTW3U4z3+ddPq9vS3EfnwL8UyJyNLH/+ye7w8Zk9Wi37rn9BD6PdNKB5aGqRVc+z9
8z6+Xur9IV9/eHj4fXPn5+fKWjNjvrU/f/1zf7c8hUE6C+c3J9Z0v6mIPOwyFdb0uDNw+4NmQDNb
vbY5HbdH+83E/f0uM8F//agzEor/oBlpWeaMCnvvkRnZd2Jud1oiS5047vzEtpyfr/GkbfxV7Zlv
1nz8V4rsR+O/YGuTrc/fN15/5RP08Nct/G/z9DSjUS3cCkfu4vcP7dtY3JmqCfmdpvXZ6raNnjM6
ZOTet5umpKk19TbZTFOaPm77GC3XvN7dLmuZVfO6qsfbzWnIzw/yOb1bXnMuMgETpnQ1swPDsKqP
/yN8ykUttkaIPJ1MLPPoAGniz6ToM7xsjQxhouO/b+LLS2PVNC/9ru/5vbuPggrfbn79dIzSTbtL
Nz779DpuV3rjqaaXJl96W9ZafcXSrdGvf8qjqedKEUGlkBnqe4zF/+Af9kXQk9Zs60cHkA6/ooz+
+7+Ig0R7nH/dDkLSdGLRmV01ZCsxdxcGWuV/M/foq2/Yxchv3W2Juqhv1LFO3by1xzce3Trr6U/8
938HutZqGwSuZFQlJEqnRcG9fztndZf966DI3fZoCPtGg9g5BASlnuMbIJ9jD5t9a3AUibI5FQcZ
kd+yd8xRe2JNbetyn43mPuSfKK74ed9zHQlHYa59zR6fbF/YwMn+WUtdcKWQZaNYxmDSPu1Kjy/7
DNaudK8e+1/oodD2C92XPbHk24J13sLeefi1zps+Zvb3Vt3fRshAh/3v5Uu/7H9O4+HtCaQve8I9
pyflj8LvHoY/fqeN2tbbsy31yr5GasSPhl9to2KPj2qkRva2UbGPhzRST7jxcCdPazw77Y6zhVdq
uav+1dJdZOutxj+lVFifcKOxAbG80yx/n6inHllYq9bVmW9NtlWd3F6fLDLOLazM5R8+qm/DP9tw
XBt+VdXBfRs4GBs3J6Hh/Of4n/8P+aYXMiOIAQA=</Form>
  <Code><![CDATA[$global:repertoire_initial = ""


function deplacementuser
{
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$fichiercsv,
		[Parameter(Mandatory = $true, Position = 0)]
		$session
	)
	$CSVFile = $fichiercsv
	$CSV = Import-Csv -LiteralPath "$CSVFile" -Delimiter ";"
	
	$s = $session
	
	if ($s -eq "vide")
	{
		
		#/////////////////////////////////////
		#
		#   DEPLACEMENT DES USERS CREES EN IMPORT AUTO VERS OU TEMPORAIRE
		#
		#////////////////////////////////////
		
		
		Add-Output -Text "ETAPE 2 DEPLACEMENT DES USERS CREES EN IMPORT AUTO VERS OU TEMPORAIRE" -Header
		
		try
		{
			
			$listeolduser = Get-ADUser -Filter * -SearchBase $ou_utilisateur_base_eleve -Properties givenname, surname, SamAccountName, Description, POBox, manager, profilepath, DistinguishedName, office, title | Select-Object givenname, surname, SamAccountName, Description, POBox, manager, profilepath, DistinguishedName, office, title
			$nb_user_liste = (Get-ADUser -Filter * -SearchBase $ou_utilisateur_base_eleve).Count
			if (($nb_user_liste -eq 0) -or ($nb_user_liste -eq $null))
			{
				$progressbarancienuser.Maximum = 1
			}
			else
			{
				$progressbarancienuser.Maximum = $nb_user_liste
			}
			$progressbarancienuser.Visible = $true
			$labelDéplacementDesAncien.Visible = $true
			
			$progressbarancienuser.Step = 1
			$progressbarancienuser.Value = 0
			$listeolduser | export-csv $sauve_nettoyage_user_eleves -Delimiter ';' -NoTypeInformation -Encoding UTF8
			$listeolduser | export-csv $sauve_nettoyage_user_eleves_archive -Delimiter ';' -NoTypeInformation -Encoding UTF8
			
			
			ForEach ($Item in $listeolduser)
			{
				[System.Windows.Forms.Application]::DoEvents()
				$progressbarancienuser.PerformStep()
				$usertrouve = Select-String $CSVFile -Pattern $($Item.'SamAccountName')
				
				if ($usertrouve -eq $null)
				{
					
					
					if ($($Item.'manager') -eq "CN=Import Automatique,CN=Users,$OU_base")
					{
						
						$utilisateur_deplace = "1"
						# On récupère tous les groupes auquel appartient l'utilisateur
						$groups = get-adprincipalgroupmembership $($item.'SamAccountName');
						
						
						#nettoyage des scripts de connexion
						$chemin_old_fichierbat = "$netlogon$($item.'SamAccountName').bat"
						Move-Item -Path $chemin_old_fichierbat -Destination $rep_ancien_scripts_utilisateur -Force
						
						
						# Boucle sur l'ensemble des groupes
						foreach ($group in $groups)
						{
							
							# On exclue utilisateurs du domaine
							if ($group.name -ne "Utilisateurs du domaine")
							{
								
								# On enlève l'utilisateur des groupes listés
								remove-adgroupmember -Identity $($group.name) -Members $item.'SamAccountName' -Confirm:$false;
								
							}
						}
						
						# Déplace l'utilisateur dans l'OU temporaire
						Move-ADObject -Identity $($Item.'DistinguishedName') -TargetPath "OU=$OU_TEMP,$OU_base"
						
						# enleve l'utilisateur impor auto 
						
						Set-ADuser -Identity $($item.'SamAccountName') -clear Manager
						Add-Output -Text "L'utilisateur $($Item.'SamAccountName') est déplacé dans l'OU temporaire" -Color Magenta
						
						# Suppression du partage  et déplacement dans ancien
						Remove-SmbShare -Name "$($item.'SamAccountName')" -Force
						if ($($item.'title') -eq "$nom_professeurs" -or $($item.'title') -eq "$nom_administratifs")
						{
							$ancienrepperso = "$rep_perso_base\$($item.'title')\$($item.'SamAccountName')"
							$nouveaureperso = "$rep_ancien\$($item.'title')\"
						}
						elseif ($($item.'title') -eq "$nom_eleves")
						{
							$ancienrepperso = "$rep_perso_base\$nom_eleves\$($item.'office')\$($item.'SamAccountName')"
							$nouveaureperso = "$rep_ancien\$nom_eleves\"
						}
						
						Remove-FsrmQuota -Path $ancienrepperso -Confirm:$false
						if (-not (Test-Path -Path $nouveaureperso))
						{
							New-Item -Path $nouveaureperso -ItemType Directory
						}
						
						Move-Item -Path $ancienrepperso -Destination $nouveaureperso -Force
					}
				}
				
			}
		}
		catch
		{
			
			Add-Output -Text "$error[0].Exception.Message" -color Red
		}
		
		
		if (-not ($utilisateur_deplace -eq "1"))
		{
			Add-Output -Text "Aucun utilisateur à déplacer" -Color Green
			$progressbarancienuser.PerformStep()
			
		}
		
		$listeolduser = Get-ADUser -Filter * -SearchBase $ou_utilisateur_base_eleve -Properties givenname, surname, POBox, SamAccountName, title, office, streetAddress, employeeid, division, manager, profilepath, DistinguishedName | Select-Object givenname, surname, POBox, SamAccountName, title, office, streetAddress, employeeid, division, manager, profilepath, DistinguishedName
		$listeolduser | export-csv $sauve_nettoyage_user_eleves -Delimiter ';' -NoTypeInformation -Encoding UTF8
		
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace '"')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'givenname', 'PRENOM')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'surname', 'NOM')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'POBox', 'DATE NAISSANCE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'SamAccountName', 'LOGIN')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'title', 'GROUPE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'office', 'CLASSE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'streetAddress', 'OPTIONS')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'employeeid', 'MOT DE PASSE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'division', 'MATIERE')
		
		
	}
	else
	{
		
		
		#/////////////////////////////////////
		#
		#   DEPLACEMENT DES USERS CREES EN IMPORT AUTO VERS OU TEMPORAIRE
		#
		#////////////////////////////////////
		
		
		Add-Output -Text "ETAPE 2 DEPLACEMENT DES USERS CREES EN IMPORT AUTO VERS OU TEMPORAIRE" -Header
		
		try
		{
			$listeolduser = Get-ADUser -Filter * -SearchBase $ou_utilisateur_base_eleve -Properties givenname, surname, SamAccountName, Description, POBox, manager, profilepath, DistinguishedName, office, title | Select-Object givenname, surname, SamAccountName, Description, POBox, manager, profilepath, DistinguishedName, office, title
			$nb_user_liste = (Get-ADUser -Filter * -SearchBase $ou_utilisateur_base_eleve).Count
			if (($nb_user_liste -eq 0) -or ($nb_user_liste -eq $null))
			{
				$progressbarancienuser.Maximum = 1
			}
			else
			{
				$progressbarancienuser.Maximum = $nb_user_liste
			}
			$progressbarancienuser.Visible = $true
			$labelDéplacementDesAncien.Visible = $true
			$progressbarancienuser.Step = 1
			$progressbarancienuser.Value = 0
			$listeolduser | export-csv $sauve_nettoyage_user_eleves -Delimiter ';' -NoTypeInformation -Encoding UTF8
			$listeolduser | export-csv $sauve_nettoyage_user_eleves_archive -Delimiter ';' -NoTypeInformation -Encoding UTF8
			
			
			ForEach ($Item in $listeolduser)
			{
				[System.Windows.Forms.Application]::DoEvents()
				$progressbarancienuser.PerformStep()
				$usertrouve = Select-String $CSVFile -Pattern $($Item.'SamAccountName')
				
				if ($usertrouve -eq $null)
				{
					
					
					if ($($Item.'manager') -eq "CN=Import Automatique,CN=Users,$OU_base")
					{
						
						$utilisateur_deplace = "1"
						# On récupère tous les groupes auquel appartient l'utilisateur
						$groups = get-adprincipalgroupmembership $($item.'SamAccountName');
						
						
						#nettoyage des scripts de connexion
						$chemin_old_fichierbat = "$netlogon$($item.'SamAccountName').bat"
						Move-Item -Path $chemin_old_fichierbat -Destination $rep_ancien_scripts_utilisateur -Force
						
						
						# Boucle sur l'ensemble des groupes
						foreach ($group in $groups)
						{
							
							# On exclue utilisateurs du domaine
							if ($group.name -ne "Utilisateurs du domaine")
							{
								
								# On enlève l'utilisateur des groupes listés
								remove-adgroupmember -Identity $group.name -Members $item.'SamAccountName' -Confirm:$false;
								
							}
						}
						
						# Déplace l'utilisateur dans l'OU temporaire
						Move-ADObject -Identity $($Item.'DistinguishedName') -TargetPath "OU=$OU_TEMP,$OU_base"
						
						# enleve l'utilisateur impor auto 
						Set-ADuser -Identity $($item.'SamAccountName') -clear Manager
						Add-Output -Text "L'utilisateur $($Item.'SamAccountName') est déplacé dans l'OU temporaire" -Color blue
						
						# Suppression du partage  et déplacement dans ancien
						Remove-SmbShare -Name "$($item.'SamAccountName')" -Force
						$samaccount = $($item.'SamAccountName')
						Invoke-Command -Session $s {
							Remove-SmbShare -Name $using:samaccount -Force
						}
						if ($($item.'title') -eq "$nom_professeurs" -or $($item.'title') -eq "$nom_administratifs")
						{
							$ancienrepperso = "$rep_perso_base\$($item.'title')\$($item.'SamAccountName')"
							$nouveaureperso = "$rep_ancien\$($item.'title')\"
						}
						elseif ($($item.'title') -eq "$nom_eleves")
						{
							$ancienrepperso = "$rep_perso_base\$nom_eleves\$($item.'office')\$($item.'SamAccountName')"
							$nouveaureperso = "$rep_ancien\$nom_eleves\"
						}
						
						Remove-FsrmQuota -Path $ancienrepperso -Confirm:$false
						if (-not (Test-Path -Path $nouveaureperso))
						{
							New-Item -Path $nouveaureperso -ItemType Directory
						}
						
						
						Move-Item -Path $ancienrepperso -Destination $nouveaureperso -Force
						Invoke-Command -Session $s {
							Remove-FsrmQuota -Path $using:ancienrepperso -Confirm:$false
							if (-not (Test-Path -Path $using:nouveaureperso))
							{
								New-Item -Path $using:nouveaureperso -ItemType Directory
							}
							Move-Item -Path $using:ancienrepperso -Destination $using:nouveaureperso -Force
						}
					}
				}
				
			}
		}
		catch
		{
			
			Add-Output -Text "$error[0].Exception.Message" -Color red
		}
		
		
		if (-not ($utilisateur_deplace -eq "1"))
		{
			Add-Output -Text "Aucun utilisateur à déplacer" -Color green
			$progressbarancienuser.Value = $nb_user_liste
		}
		
		$listeolduser = Get-ADUser -Filter * -SearchBase $ou_utilisateur_base_eleve -Properties givenname, surname, POBox, SamAccountName, title, office, streetAddress, employeeid, division, manager, profilepath, DistinguishedName | Select-Object givenname, surname, POBox, SamAccountName, title, office, streetAddress, employeeid, division, manager, profilepath, DistinguishedName
		$listeolduser | export-csv $sauve_nettoyage_user_eleves -Delimiter ';' -NoTypeInformation -Encoding UTF8
		
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace '"')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'givenname', 'PRENOM')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'surname', 'NOM')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'POBox', 'DATE NAISSANCE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'SamAccountName', 'LOGIN')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'title', 'GROUPE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'office', 'CLASSE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'streetAddress', 'OPTIONS')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'employeeid', 'MOT DE PASSE')
		set-content "$sauve_nettoyage_user_eleves" ((get-content "$sauve_nettoyage_user_eleves") -replace 'division', 'MATIERE')
		
	}
}

function creationOU
{
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$fichiercsvconverti
	)
	
	# Récupère le chemin du fichier
	
	$CSV = Import-Csv -LiteralPath "$fichiercsvconverti" -Delimiter ";" -Encoding UTF8
	$nb_user = (Get-Content $fichiercsvconverti).Length
	$labelCréationDesOU.Visible = $true
	$progressbarou.Visible = $true
	$progressbarou.Maximum = $nb_user
	$progressbarou.Step = 1
	$progressbarou.Value = 0
	
	#/////////////////////////////////////
	#
	#   CREATION DES OU DES UTILISATEURS
	#
	#////////////////////////////////////
	
	Add-Output -Text "ETAPE 3 CREATION DES OU DES CLASSES" -Header
	
	ForEach ($OU in $CSV)
	{
		[System.Windows.Forms.Application]::DoEvents()
		$OUName = $OU.'classe'
		
		try
		{
			
			#Récupère le nom de l'OU et le chemin
			
			if ($OU.'classe' -ne "")
			{
				
				
				$test_OU = Get-ADOrganizationalUnit -Filter 'Name -eq $OUName'
				if ($test_OU -eq $NULL)
				{
					#Créé l'OU
					New-ADOrganizationalUnit -Name "$OUName" -Path "$OU_utilisateur_base_eleve" -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
					
					#Affiche la confirmation
					Add-Output -Text "L'OU $OUName a été créée" -Color green
					$OU_classe_cree = "1"
					
				}
				else
				{
					$OUName = $OU.'groupe'
					$test_OU = Get-ADOrganizationalUnit -Filter 'Name -eq $OUName'
					if ($test_OU -eq $NULL)
					{
						#Créé l'OU
						New-ADOrganizationalUnit -Name "$OUName" -Path "$OU_utilisateur_base" -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
						
						#Affiche la confirmation
						Add-Output -Text "L'OU $OUName a été créée" -Color green
						$OU_classe_cree = "1"
					}
				}
			}
			$progressbarou.PerformStep()
		}
		
		
		catch
		{
			
			Add-Output -Text $error[0].Exception.Message -Color Red
		}
	}
	
	if (-not ($OU_classe_cree -eq "1"))
	{
		Add-Output -Text "Toutes les OU sont déjà existantes rien à faire" -Color green
		$progressbarou.value = $nb_user
	}
}




function importationcsv
{
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$fichiercsv,
		[Parameter(Mandatory = $true, Position = 0)]
		$session
	)
	
	$s = $session
	Start-Transcript -Path $retour_import
	$CSVFile = $fichiercsv
	$CSV = Import-Csv -LiteralPath "$CSVFile" -Delimiter ";" -Encoding UTF8
	$nb_user = (Get-Content $CSVFile).Length
	$labelImportationDesCompte.visible = $true
	$progressbarimportation.Visible = $true
	$progressbarimportation.Maximum = $nb_user
	$progressbarimportation.Step = 1
	$progressbarimportation.Value = 0
	$sideleves = ([Security2.IdentityReference2]$nom_eleves).Sid
	
	if ($s -eq "vide")
	{
		# Récupère le chemin du fichier
		
		
		
		#/////////////////////////////////////
		#
		#   CREATION DES UTILISATEURS
		#
		#////////////////////////////////////
		
		
		Add-Output -Text "ETAPE 4 CREATION DES UTILISATEURS" -Header
		
		$OLD_CSV = Import-Csv -LiteralPath "$sauve_nettoyage_user_eleves" -Delimiter ";"
		
		try
		{
			
			New-Item -ItemType File -Path $pathexporteleveCSV -force
			Add-Content -Path $pathexporteleveCSV -Value "NOM_DE_FAMILLE;PRENOM;LOGIN;MOT_DE_PASSE;CLASSE" -Encoding UTF8
			
			
			# Parcours ligne par ligne le fichier
			foreach ($user in $CSV)
			{
				[System.Windows.Forms.Application]::DoEvents()
				# Création des groupes d'utilisateurs correspondants aux options
				if ($($user.'Options') -ne "")
				{
					$($user.'Options').Split(",") | ForEach {
						try { $Group_option_Exists = Get-ADGroup -Filter 'Name -eq $_' -ErrorAction Continue }
						catch { }
						if ($Group_option_Exists -eq $NULL)
						{
							New-ADGroup -Name $_ -Path $OU_groupe_options -Description "Groupe des personnes faisant partie de l'option $_" -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
							# On affiche la création de l'option
							Add-Output -Text "Création du groupe de l'option $_" -Color Green
						}
						if (-not (Test-Path variable:"$($_)_var"))
						{
							New-Variable -Name "$($_)_var"
							
							$Path = "$rep_options\$_"
							$path_ress = "$rep_options\$_\ressources"
							$path_travail = "$rep_options\$_\travail"
							if (Test-Path -Path $Path)
							{
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions0
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$_", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "Option-$_" -ea 0))
								{
									New-SMBShare -Name "Option-$_" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage option-$_" -color green
								}
								if ($((Get-Variable -Name "$($_)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage option-$_" -color green
									set-variable -Name "$($_)_var" -Value "1"
								}
								Get-Item $path_ress | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights DeleteSubdirectoriesAndFiles,Write,Delete -AccessType Deny
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights ReadAndExecute, Synchronize
								
							}
							else
							{
								
								Add-Output -Text "Création du répertoire $path" -color green
								# create new folder
								New-Item -Path $Path -ItemType Directory
								New-Item -Path $path_ress -ItemType Directory
								New-Item -Path $path_travail -ItemType Directory
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$_", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "Option-$_" -ea 0))
								{
									New-SMBShare -Name "Option-$_" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage option-$_" -color green
								}
								if ($((Get-Variable -Name "$($_)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage option-$_" -color green
									set-variable -Name "$($_)_var" -Value "1"
								}
								Get-Item $path_ress | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights DeleteSubdirectoriesAndFiles,Write,Delete -AccessType Deny
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights ReadAndExecute, Synchronize
							}
							
						}
					}
				}
				
				
				
				# Création des groupes d'utilisateurs correspondants aux classes
				if ($($user.'classe') -ne "")
				{
					if ($($user.'classe') -ne $null)
					{
						$classe = $($user.'classe')
						try
						{
							$Group_classe_Exists = Get-ADGroup -Filter 'Name -eq $classe' -ErrorAction Continue
						}
						catch { }
						if ($Group_classe_Exists -eq $NULL)
						{
							New-ADGroup -Name $classe -Path $OU_groupe_classes -Description "Groupe des personnes faisant partie de la classe $classe" -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
							
							# On affiche la création de classe
							Add-Output -Text "Création du groupe de classe $classe" -color Green
						}
						try
						{
							$testgroupeprofclasse = "Professeurs-$classe"
							$GroupExists_profclasse = Get-ADGroup -Filter 'Name -eq $testgroupeprofclasse'
						}
						catch { }
						if ($GroupExists_profclasse -eq $null)
						{
							New-ADGroup -Name "Professeurs-$classe" -Path $OU_professeur_classes -Description "Groupe des professeurs de la classe $classe " -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
							# On affiche la création de classe
							Add-Output -Text "Création du groupe de professeur de la classe $classe" -color Green
						}
						
						if (-not (Test-Path variable:"$($classe)_var"))
						{
							New-Variable -Name "$($classe)_var"
							$Path = "$rep_classes\$classe"
							$path_ress = "$rep_classes\$classe\ressources"
							$path_travail = "$rep_classes\$classe\travail"
							$path_eleves = "$rep_classes\$classe\élèves"
							
							
							if (Test-Path -Path $Path)
							{
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions0
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$classe", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "classe-$classe" -ea 0))
								{
									New-SMBShare -Name "classe-$classe" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage classe-$classe" -color green
								}
								if ($((Get-Variable -Name "$($classe)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage classe-$classe" -color green
									set-variable -Name "$($classe)_var" -Value "1"
								}
								Get-Item $path_ress | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights DeleteSubdirectoriesAndFiles,Write,Delete -AccessType Deny
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights ReadAndExecute, Synchronize
								Get-Item $path_eleves | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $path_eleves -Account $sideleves -AccessRights FullControl -AccessType Deny
								
							}
							else
							{
								
								Add-Output -Text "Création du répertoire $path" -color green
								# create new folder
								New-Item -Path $Path -ItemType Directory
								New-Item -Path $path_ress -ItemType Directory
								New-Item -Path $path_travail -ItemType Directory
								New-Item -Path $path_eleves -ItemType Directory
								
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$classe", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "classe-$classe" -ea 0))
								{
									New-SMBShare -Name "classe-$classe" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage classe-$classe" -color green
								}
								if ($((Get-Variable -Name "$($classe)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage classe-$classe" -color green
									set-variable -Name "$($classe)_var" -Value "1"
								}
								Get-Item $path_ress | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights DeleteSubdirectoriesAndFiles,Write,Delete -AccessType Deny
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights ReadAndExecute, Synchronize
								Get-Item $path_eleves | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $path_eleves -Account $sideleves -AccessRights FullControl -AccessType Deny
							}
							
							
						}
					}
				}
				
				
				
				# attribution de la variable username
				$username = "$($user.'login')"
				
				#Attribution dy type de l'utilisateur
				$type_utilisateur = "$($user.'groupe')"
				
				$nom_affiche = "$($user.'Prenom') $($user.'nom')"
				
				#Permet de tester si l'utilisateur existe déjà dans l'AD
				$ExistingADUser = Get-ADUser -Filter "SamAccountName -eq '$($user.'login')'"
				
				
				# Attribution des variables en fonction des types utilisateurs
				
				if ($type_utilisateur -eq "$nom_eleves")
				{
					$line = $user.'Nom' + ";" + $user.'prenom' + ";" + $user.'login' + ";" + $user.'mot de passe' + ";" + $user.'classe'
					if ($profil -eq "obligatoire")
					{
						$profil_user = "$rep_profils\$nom_eleves"
					}
					elseif ($profil -eq "itinerant")
					{
						$profil_user = "$rep_profils_it\$($user.'login')"
					}
					elseif ($profil -eq "local")
					{
						$profil_user = ""
					}
					$OU_utilisateur_newad = "$($user.'classe'),OU=$OU_classes"
					$repertoire_perso = "$rep_perso_base\$nom_eleves\$($user.'classe')"
					$description_utilisateur = "Compte élève de la classe $($user.'classe')"
					$classe = $($user.'classe')
					$template_quota = $template_quota_eleve
					$taille_quota = $quota_eleve
					Add-Content -Path $pathexporteleveCSV -Value $line
					
					
				}
				
				# Creation de la variable du fichier script
				$chemin_fichierbat = "$netlogon$($user.'login').bat"
				$fichierbat = "$($user.'login').bat"
				
				#repertoire perso
				$new_rep_perso = "$repertoire_perso\$($user.'login')"
				$path_DL = "$new_rep_perso\Telechargements"
				$path_prive = "$new_rep_perso\Privé"
				
				# Si l'utilisateur n'existe pas alors on le créé
				if ($null -eq $ExistingADUser)
				{
					if ($User.'classe' -ne "")
					{
						if ($User.'classe' -ne $null)
						{
							# Création de la variable du mot de passe
							$mdp = "$($user.'mot de passe')"
							
							if ($profil -eq "local")
							{
								# On créé l'utilisateur
								New-ADUser -Name $user.'login' `
										   -GivenName $user.'Prenom' `
										   -Surname $user.'Nom' `
										   -displayname $nom_affiche `
										   -UserPrincipalName $user.'login'`
										   -SamAccountName $user.'login' `
										   -Description $description_utilisateur `
										   -Path "OU=$OU_utilisateur_newad,$OU_utilisateur_base" `
										   -AccountPassword (ConvertTo-SecureString $mdp -AsPlainText -Force) `
										   -ChangePasswordAtLogon $true `
										   -Enabled $true `
										   -POBox $user.'date naissance' `
										   -Manager "Importautomatique" `
										   -title $type_utilisateur `
										   -office $classe `
										   -scriptPath $fichierbat `
										   -streetAddress $($user.'options') `
										   -division $user.'matiere'`
										   -EmployeeID $mdp
							}
							else
							{
								New-ADUser -Name $user.'login' `
										   -GivenName $user.'Prenom' `
										   -Surname $user.'Nom' `
										   -displayname $nom_affiche `
										   -UserPrincipalName $user.'login'`
										   -SamAccountName $user.'login' `
										   -Description $description_utilisateur `
										   -Path "OU=$OU_utilisateur_newad,$OU_utilisateur_base" `
										   -AccountPassword (ConvertTo-SecureString $mdp -AsPlainText -Force) `
										   -ChangePasswordAtLogon $true `
										   -Enabled $true `
										   -POBox $user.'date naissance' `
										   -Manager "Importautomatique" `
										   -profilePath $profil_user `
										   -title $type_utilisateur `
										   -office $classe `
										   -scriptPath $fichierbat `
										   -streetAddress $($user.'options') `
										   -division $user.'matiere'`
										   -EmployeeID $mdp
								
							}
							
							#ajout du groupe de base 
							Add-ADGroupMember -Identity $type_utilisateur -Members $user.'login'
							
							# On affiche la création de l'utilisateur
							Add-Output -Text "Création de l'utilisateur $Username" -Color magenta
							
							
							if (-not (Test-Path -Path $new_rep_perso))
							{
								Add-Output -Text "Création du répertoire $new_rep_perso" -Color green
								# create new folder
								New-Item -Path $new_rep_perso -ItemType Directory
								New-Item -Path $path_DL -ItemType Directory
								New-Item -Path $path_prive -ItemType Directory
								
								Add-Output -Text "Application du quota : $template_quota" -Color green
								new-FsrmQuota -Path $new_rep_perso -description "$template_quota" -template "$template_quota" #-Size $taille_quota
								#reset-FsrmQuota -Path $new_rep_perso -template "$template_quota" -Confirm:$false
								

								
								# récupère les droits
								$acl = Get-Acl -Path $new_rep_perso
								
								
								# ajoute les permissions
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_user, $regle_prof_classe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $new_rep_perso
								
								
								$acl_DL = Get-Acl $path_DL
								$acl_DL.SetAccessRuleProtection($true, $false)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "Allow")
								$acl_DL.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Delete", "Deny")
								$acl_DL.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
								$acl_DL.SetAccessRule($Ar)
								Set-Acl $path_DL $acl_DL
								
								$acl_prive = Get-Acl $path_prive
								$acl_prive.SetAccessRuleProtection($true, $false)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "Allow")
								$acl_prive.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Delete", "Deny")
								$acl_prive.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($nom_professeurs), "Read", "Deny")
								$acl_prive.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
								$acl_prive.SetAccessRule($Ar)
								Set-Acl $path_prive $acl_prive
								
								# créé le partage
								New-SMBShare -Name "$($user.'login')" -Path $new_rep_perso -FullAccess "Tout le monde" -ea 0
								
								Copy-Item "$ScriptDirectory\config\Desktopini\desktop.ini" -destination $new_rep_perso -Force
								$Pathini = "$new_rep_perso\desktop.ini"
								Get-Item $Pathini | Disable-NTFSAccessInheritance
								$siduser = ([Security2.IdentityReference2]$($user.'login')).Sid
								Remove-NTFSAccess -path $Pathini -Account $siduser -AccessRights Modify, Synchronize
								Get-ChildItem $Pathini -Force | ForEach-Object { $_.Attributes += "Hidden" }
								

							}
							
							
							
							
							# On teste si l'utilisateur à des options et on les attribue
							if ($User.'Options' -ne "")
							{
								if ($User.'Options' -ne $null)
								{
									
									$rep_options_perso = "$new_rep_perso\groupes\"
									$User.'Options'.Split(",") | ForEach {
										Add-ADGroupMember -Identity $_ -Members $user.'login'
										Add-Output -Text "Ajout de l'utilisateur $Username au groupe $_ " -color green # affiche l'attribution du groupe
										if (-not (Test-Path -Path $rep_options_perso))
										{
											New-Item -Path $rep_options_perso -ItemType Directory -Force
											$Folder = Get-Item  $rep_options_perso
											$Folder.Attributes += 'ReadOnly'
											attrib -h $rep_options_perso
										}
										else { attrib -h $rep_options_perso }
										
										if (-not (test-path "$rep_options_perso$_.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$rep_options_perso$_.lnk")
											$lnk.TargetPath = "\\$nom_serveur\option-$_"
											$lnk.Save()
										}
										
									}
									$siduser = ([Security2.IdentityReference2]$($user.'login')).Sid
									Get-Item $rep_options_perso | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Modify, Synchronize
									add-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Read
									
								}
								
							}
							
							# On teste si l'utilisateur à une classe et on l attribue
							if ($User.'classe' -ne "")
							{
								if ($User.'classe' -ne $null)
								{
									$classe = $user.'classe'
									
									Add-ADGroupMember -Identity $classe -Members $user.'login'
									Add-Output -Text "Ajout de l'utilisateur $Username au groupe $classe " -color green # affiche l'attribution du groupe
									
									if (-not (test-path "$($new_rep_perso)\classe-$classe.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($new_rep_perso)\classe-$classe.lnk")
										$lnk.TargetPath = "\\$nom_serveur\classe-$classe"
										$lnk.Save()
									}
									
									if (-not (test-path "$($path_eleves)\$($user.'login').lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($path_eleves)\$($user.'login').lnk")
										$lnk.TargetPath = "\\$nom_serveur\$($user.'login')"
										$lnk.Save()
									}
									
									
									Get-Item "$($new_rep_perso)\classe-$classe.lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Read, Synchronize
									Get-Item "$($path_eleves)\$($user.'login').lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($path_eleves)\$($user.'login').lnk" -Account "Professeurs-$classe" -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($path_eleves)\$($user.'login').lnk" -Account "Professeurs-$classe" -AccessRights Read, Synchronize
									
								}
								
							}
							
							
							
							
							if (Test-Path -Path $chemin_fichierbat)
							{
								Remove-Item $chemin_fichierbat -Confirm:$false -Force
							}
							New-Item $chemin_fichierbat
							Invoke-Expression -Command:"icacls $chemin_fichierbat /grant:r $($user.'login'):'(OI)(CI)(RX)' /T"
							$lecteurperso = "net use t: \\$nom_serveur\$($user.'login')"
							Start-Sleep -Milliseconds 500
							Set-Content -Path $chemin_fichierbat -Value "@echo off"
							add-Content -Path $chemin_fichierbat -Value $lecteurperso | Out-Null
							add-Content -Path $chemin_fichierbat -Value 'timeout 5 > NUL'
							add-Content -Path $chemin_fichierbat -Value 'echo n | gpupdate /target:user /force'
							$progressbarimportation.PerformStep()
						}
					}
				}
				else
				{
					
					#Travail sur le déplacement des données

					
					foreach ($old_user in $OLD_CSV)
					{
						[System.Windows.Forms.Application]::DoEvents()
						if ($($old_user.'login') -eq $Username)
						{
							if (-not ($old_user.'CLASSE' -eq $user.'CLASSE'))
							{
								if (-not $user.'CLASSE' -eq "")
								{
									$classe = $user.'classe'
									remove-adgroupmember -Identity $($old_user.'classe') -Members $($user.'login') -Confirm:$false
									
									$dn = $($old_user.'DistinguishedName')
									$resultdn = ($dn -split 'OU=|,OU=')[1]
									$logintemp = $($user.'login')
									$old_classe = $($old_user.'classe')
									if ($resultdn -ne "$OU_TEMP")
									{
										
										if ($resultdn -ne $($user.'classe'))
										{
											Remove-SmbShare -Name "$($user.'login')" -Force
											
											$old_repertoire_perso = "$rep_perso_base\$nom_eleves\$old_classe\$($old_user.'login')\"
											
											
											$regle_old_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$old_classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
											$ACL = Get-Acl -Path $old_repertoire_perso # Récupérer la liste de contrôle d'accès (ACL) du dossier
											$ACL.RemoveAccessRule($regle_old_prof_classe) # Supprimer la règle d'accès spécifiée
											Set-Acl -Path $old_repertoire_perso -AclObject $ACL # Appliquer la nouvelle ACL au dossier
											
											
											Add-Output -Text "Déplacement de l'élève $($user.'login') dans la classe $($user.'CLASSE')" -color green
											Move-Item -Path $old_repertoire_perso -Destination $new_rep_perso -Force
											
											$Pathini = "$new_rep_perso\desktop.ini"
											if (-not (Test-Path -Path $Pathini))
											{
												Copy-Item "$ScriptDirectory\config\Desktopini\desktop.ini" -destination $new_rep_perso -Force
												Get-Item $Pathini | Disable-NTFSAccessInheritance
												$siduser = ([Security2.IdentityReference2]$($user.'login')).Sid
												Remove-NTFSAccess -path $Pathini -Account $siduser -AccessRights Modify, Synchronize
												Get-ChildItem $Pathini -Force | ForEach-Object { $_.Attributes += "Hidden" }
											}
											
											New-SMBShare -Name "$($user.'login')" -Path $new_rep_perso -FullAccess "Tout le monde" -ea 0
											
											
											reset-FsrmQuota -Path $new_rep_perso -template "$template_quota" -Confirm:$false
											
											# récupère les droits
											$acl = Get-Acl -Path $new_rep_perso
											
											# ajoute les permissions
											$acl.SetAccessRuleProtection($True, $False)
											
											$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
											
											$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
											
											$regle_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
											
											$rules = $regle_admin, $regle_user, $regle_prof_classe
											
											foreach ($rule in $rules)
											{
												$acl.AddAccessRule($rule)
											}
											# ajoute les permissions
											$acl | Set-Acl -Path $new_rep_perso
											$logintemp = $($user.'login')
											
											# On spécifié l'OU cible de l'utilisateur.
											$OUcible = "OU=$OU_utilisateur_newad,$OU_utilisateur_base"
											
											# Déplacement dans la bonne OU.
											$UserDN = (Get-ADUser -Identity $user.'login').distinguishedName
											$UserDN1 = ($UserDN -split 'OU=|,OU=')[1]
											
											set-aduser -Identity $($user.'login') -company "Ancienne classe utilisateur $("$UserDN1")"
											
											#Affichage du déplacement
											Add-Output -Text "Deplacement de l'utilisateur $Username vers l'OU $OUcible" -color magenta
											Move-ADObject -Identity $UserDN -TargetPath $OUcible
											
											if (Test-Path -Path $chemin_fichierbat)
											{
												Remove-Item $chemin_fichierbat -Confirm:$false -Force
											}
											New-Item $chemin_fichierbat
											#$lecteurperso1 = "if exist \\$nom_serveur\$($user.'login') (net use t: \\$nom_serveur\$($user.'login'))"
											#$lecteurperso2 = "if exist \\$nom_serveur2\$($user.'login') (net use t: \\$nom_serveur2\$($user.'login'))"
											$lecteurperso = "net use t: %logonserver%\$($user.'login')"
											Start-Sleep -Milliseconds 500
											Set-Content -Path $chemin_fichierbat -Value "@echo off"
											#add-Content -Path $chemin_fichierbat -Value $lecteurperso1 | Out-Null
											#add-Content -Path $chemin_fichierbat -Value $lecteurperso2 | Out-Null
											add-Content -Path $chemin_fichierbat -Value $lecteurperso | Out-Null
											add-Content -Path $chemin_fichierbat -Value 'timeout 5 > NUL'
											add-Content -Path $chemin_fichierbat -Value 'echo n | gpupdate /target:user /force'
											
											set-aduser -Identity $($user.'login') -manager "Importautomatique" -profilepath "$profil_user" -scriptPath $fichierbat -displayname $nom_affiche -description $description_utilisateur -office $classe
										}
										
									}
									if ($User.'classe' -ne "")
									{
										if ($User.'classe' -ne $null)
										{
											Add-ADGroupMember -Identity $classe -Members $user.'login'
											Add-Output -Text "Ajout de l'utilisateur $Username au groupe $classe " -color green # affiche l'attribution du groupe
											
											if (-not (test-path "$($new_rep_perso)\classe-$classe.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($new_rep_perso)\classe-$classe.lnk")
												$lnk.TargetPath = "\\$nom_serveur\classe-$classe"
												$lnk.Save()
											}
											
											if (-not (test-path "$($path_eleves)\$($user.'login').lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($path_eleves)\$($user.'login').lnk")
												$lnk.TargetPath = "\\$nom_serveur\$($user.'login')"
												$lnk.Save()
											}
											
											Get-Item "$($new_rep_perso)\classe-$classe.lnk" | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Modify, Synchronize
											Add-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Read, Synchronize
											Remove-Item "$($new_rep_perso)\classe-$($old_user.'classe').lnk" -Force -Confirm:$false
											
											Get-Item "$($path_eleves)\$($user.'login').lnk" | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -Path "$($path_eleves)\$($user.'login').lnk" -Account "Professeurs-$classe" -AccessRights Modify, Synchronize
											Add-NTFSAccess -Path "$($path_eleves)\$($user.'login').lnk" -Account "Professeurs-$classe" -AccessRights Read, Synchronize
											
											$logintemp = $($user.'login')
											$oldclasse = "classe-$($old_user.'classe')"
											$path_old_eleves = "$rep_classes\$($old_user.'classe')\élèves"
											Remove-Item "$($path_old_eleves)\$($user.'login').lnk" -Force -Confirm:$false
											
										}
									}
								}
								else
								{
									
									if ($($old_user.'manager') -eq "CN=Import Automatique,CN=Users,$OU_base")
									{
										
										$utilisateur_deplace = "1"
										# On récupère tous les groupes auquel appartient l'utilisateur
										$groups = get-adprincipalgroupmembership $($old_user.'SamAccountName');
										
										
										#nettoyage des scripts de connexion
										$chemin_old_fichierbat = "$netlogon$($old_user.'SamAccountName').bat"
										Move-Item -Path $chemin_old_fichierbat -Destination $rep_ancien_scripts_utilisateur -Force
										
										
										# Boucle sur l'ensemble des groupes
										foreach ($group in $groups)
										{
											
											# On exclue utilisateurs du domaine
											if ($group.name -ne "Utilisateurs du domaine")
											{
												
												# On enlève l'utilisateur des groupes listés
												remove-adgroupmember -Identity $group.name -Members $old_user.'SamAccountName' -Confirm:$false;
												
											}
										}
										
										# Déplace l'utilisateur dans l'OU temporaire
										Move-ADObject -Identity $($old_user.'DistinguishedName') -TargetPath "OU=$OU_TEMP,$OU_base"
										
										# enleve l'utilisateur impor auto 
										Set-ADuser -Identity $($old_user.'SamAccountName') -clear Manager
										Add-Output -Text "L'utilisateur $($old_user.'SamAccountName') est déplacé dans l'OU temporaire" -Color blue
										
										# Suppression du partage  et déplacement dans ancien
										Remove-SmbShare -Name "$($old_user.'SamAccountName')" -Force
										$samaccount = $($old_user.'SamAccountName')
										
										if ($($old_user.'title') -eq "$nom_professeurs" -or $($old_user.'title') -eq "$nom_administratifs")
										{
											$ancienrepperso = "$rep_perso_base\$($old_user.'title')\$($old_user.'SamAccountName')"
											$nouveaureperso = "$rep_ancien\$($old_user.'title')\"
										}
										elseif ($($old_user.'title') -eq "$nom_eleves")
										{
											$ancienrepperso = "$rep_perso_base\$nom_eleves\$($old_user.'office')\$($old_user.'SamAccountName')"
											$nouveaureperso = "$rep_ancien\$nom_eleves\"
										}
										
										Remove-FsrmQuota -Path $ancienrepperso -Confirm:$false
										if (-not (Test-Path -Path $nouveaureperso))
										{
											New-Item -Path $nouveaureperso -ItemType Directory
										}
										
										
										Move-Item -Path $ancienrepperso -Destination $nouveaureperso -Force
										
									}
									
								}
							}
							
							
							# On teste si l'utilisateur à des options et on les attribue
							if (-not ($old_user.'OPTIONS' -eq $user.'OPTIONS'))
							{
								
								
								$rep_options_perso = "$new_rep_perso\groupes\"
								attrib -h $rep_options_perso
								
								
								if (-not ($old_user.'OPTIONS' -eq ""))
								{
									if (-not ($old_user.'OPTIONS' -eq $null))
									{
										$old_user.'OPTIONS'.Split(",") | ForEach {
											remove-adgroupmember -Identity $($_) -Members $($user.'login') -Confirm:$false;
											Remove-Item "$rep_options_perso$_.lnk"
										}
									}
								}
								if ($User.'Options' -ne "")
								{
									if ($User.'Options' -ne $null)
									{
										
										$User.'Options'.Split(",") | ForEach {
											Add-ADGroupMember -Identity $_ -Members $user.'login'
											Add-Output -Text "Ajout de l'utilisateur $Username au groupe $_ " -color green # affiche l'attribution du groupe
											if (-not (Test-Path -Path $rep_options_perso))
											{
												New-Item -Path $rep_options_perso -ItemType Directory -Force
											}
											attrib -h $rep_options_perso
											if (-not (test-path "$rep_options_perso$_.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$rep_options_perso$_.lnk")
												$lnk.TargetPath = "\\$nom_serveur\option-$_"
												$lnk.Save()
											}
											
											
										}
										attrib -h $rep_options_perso
										$siduser = ([Security2.IdentityReference2]$($user.'login')).Sid
										Get-Item $rep_options_perso | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Modify, Synchronize
										add-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Read
										
										
									}
									set-aduser -Identity $Username -streetAddress $($user.'options')
									
								}
								else
								{
									
									Get-ADUser $Username | Set-ADUser -Clear streetAddress
									#set-aduser -Identity $Username -streetAddress $null
								}
								
							}
							
							
							
						}
					}
					$progressbarimportation.PerformStep()
				}
				
			}
		}
		catch
		{
			$err = $_.Exception.Message
			Write-Host "$err"
		}
		
	}
	
	else
	{
		
		#/////////////////////////////////////
		#
		#   CREATION DES UTILISATEURS VERSION 2 SERVEUR
		#
		#////////////////////////////////////
		
		
		Add-Output -Text "ETAPE 4 CREATION DES UTILISATEURS" -Header
		
		$OLD_CSV = Import-Csv -LiteralPath "$sauve_nettoyage_user_eleves" -Delimiter ";"
		
		try
		{
			
			New-Item -ItemType File -Path $pathexporteleveCSV -force
			Add-Content -Path $pathexporteleveCSV -Value "NOM_DE_FAMILLE;PRENOM;LOGIN;MOT_DE_PASSE;CLASSE" -Encoding UTF8
			
			
			# Parcours ligne par ligne le fichier
			foreach ($user in $CSV)
			{
				[System.Windows.Forms.Application]::DoEvents()
				# Création des groupes d'utilisateurs correspondants aux options
				if ($($user.'Options') -ne "")
				{
					$($user.'Options').Split(",") | ForEach {
						try { $Group_option_Exists = Get-ADGroup -Filter 'Name -eq $_' -ErrorAction Continue }
						catch { }
						if ($Group_option_Exists -eq $NULL)
						{
							New-ADGroup -Name $_ -Path $OU_groupe_options -Description "Groupe des personnes faisant partie de l'option $_" -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
							# On affiche la création de l'option
							Add-Output -Text "Création du groupe de l'option $_" -Color Green
						}
						if (-not (Test-Path variable:"$($_)_var"))
						{
							New-Variable -Name "$($_)_var"
							
							$Path = "$rep_options\$_"
							$path_ress = "$rep_options\$_\ressources"
							$path_travail = "$rep_options\$_\travail"
							if (Test-Path -Path $Path)
							{
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions0
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$_", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "Option-$_" -ea 0))
								{
									New-SMBShare -Name "Option-$_" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage option-$_" -color green
								}
								if ($((Get-Variable -Name "$($_)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage option-$_" -color green
									set-variable -Name "$($_)_var" -Value "1"
								}
								
								
								Get-Item $path_ress | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights DeleteSubdirectoriesAndFiles, Write, Delete -AccessType Deny
								add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights ReadAndExecute, Synchronize
								Invoke-Command -Session $s {
									Get-Item $using:path_ress | Disable-NTFSAccessInheritance
									add-NTFSAccess -path $using:path_ress -Account $using:sideleves -AccessRights DeleteSubdirectoriesAndFiles, Write, Delete -AccessType Deny
									add-NTFSAccess -path $using:path_ress -Account $using:sideleves -AccessRights ReadAndExecute, Synchronize
								}
							}
							else
							{
								
								Add-Output -Text "Création du répertoire $path" -color green
								# create new folder
								New-Item -Path $Path -ItemType Directory
								New-Item -Path $path_ress -ItemType Directory
								New-Item -Path $path_travail -ItemType Directory
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$_", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "Option-$_" -ea 0))
								{
									New-SMBShare -Name "Option-$_" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage option-$_" -color green
								}
								if ($((Get-Variable -Name "$($_)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage option-$_" -color green
									set-variable -Name "$($_)_var" -Value "1"
								}
							}
							
							$repertoiretemp = $_
							$sidoption = ([Security2.IdentityReference2]$_).Sid
							
							Invoke-Command -Session $s {
								if (Test-Path -Path $using:Path)
								{
									
									try
									{ $Group_option_Exists2 = Get-ADGroup -Identity $($using:repertoiretemp) }
									catch { }
									Do
									{
										Start-Sleep -Milliseconds 200
										try
										{ $Group_option_Exists2 = Get-ADGroup -Identity $($using:repertoiretemp) }
										catch { }
									}
									while ($null -eq $Group_option_Exists2)
									
									Get-Item "$using:Path" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights ReadAndExecute, Synchronize
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights CreateFiles, CreateDirectories
									Add-NTFSAccess -Path "$using:Path" -Account $using:sidoption -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$using:Path" -Account "BUILTIN\administrateurs" -AccessRights FullControl
									
									
									
									# créé le partage
									if (!(Get-SMBShare -Name "Option-$using:repertoiretemp" -ea 0))
									{
										New-SMBShare -Name "Option-$using:repertoiretemp" -Path $using:Path -FullAccess "Tout le monde"
									}
								}
								else
								{
									
									New-Item -Path $using:Path -ItemType Directory
									New-Item -Path $using:path_ress -ItemType Directory
									New-Item -Path $using:path_travail -ItemType Directory
									
									try
									{ $Group_option_Exists2 = Get-ADGroup -Identity $($using:repertoiretemp) }
									catch { }
									Do
									{
										Start-Sleep -Milliseconds 200
										try
										{ $Group_option_Exists2 = Get-ADGroup -Identity $($using:repertoiretemp) }
										catch { }
									}
									while ($null -eq $Group_option_Exists2)
									
									Get-Item "$using:Path" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights ReadAndExecute, Synchronize
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights CreateFiles, CreateDirectories
									Add-NTFSAccess -Path "$using:Path" -Account $using:sidoption -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$using:Path" -Account "BUILTIN\administrateurs" -AccessRights FullControl
									
									
									# créé le partage
									if (!(Get-SMBShare -Name "Option-$using:repertoiretemp" -ea 0))
									{
										New-SMBShare -Name "Option-$using:repertoiretemp" -Path $using:Path -FullAccess "Tout le monde"
									}
								}
							}
							
							Get-Item $path_ress | Disable-NTFSAccessInheritance
							add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights DeleteSubdirectoriesAndFiles, Write, Delete -AccessType Deny
							add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights ReadAndExecute, Synchronize
							Invoke-Command -Session $s {
								Get-Item $using:path_ress | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $using:path_ress -Account $using:sideleves -AccessRights DeleteSubdirectoriesAndFiles, Write, Delete -AccessType Deny
								add-NTFSAccess -path $using:path_ress -Account $using:sideleves -AccessRights ReadAndExecute, Synchronize
							}
						}
					}
				}
				
				
				# Création des groupes d'utilisateurs correspondants aux classes
				if ($($user.'classe') -ne "")
				{
					if ($($user.'classe') -ne $null)
					{
						$classe = $($user.'classe')
						try
						{
							$Group_classe_Exists = Get-ADGroup -Filter 'Name -eq $classe' -ErrorAction Continue
						}
						catch { }
						if ($Group_classe_Exists -eq $NULL)
						{
							New-ADGroup -Name $classe -Path $OU_groupe_classes -Description "Groupe des personnes faisant partie de la classe $classe" -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
							# On affiche la création de l'option
							Add-Output -Text "Création du groupe de classe $classe" -color Green
						}
						try
						{
							$testgroupeprofclasse = "Professeurs-$classe"
							$GroupExists_profclasse = Get-ADGroup -Filter 'Name -eq $testgroupeprofclasse'
						}
						catch { }
						if ($GroupExists_profclasse -eq $null)
						{
							New-ADGroup -Name "Professeurs-$classe" -Path $OU_professeur_classes -Description "Groupe des professeurs de la classe $classe " -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
							# On affiche la création de classe
							Add-Output -Text "Création du groupe de professeur de la classe $classe" -color Green
						}
						
						if (-not (Test-Path variable:"$($classe)_var"))
						{
							New-Variable -Name "$($classe)_var"
							$Path = "$rep_classes\$classe"
							$path_ress = "$rep_classes\$classe\ressources"
							$path_travail = "$rep_classes\$classe\travail"
							$path_eleves = "$rep_classes\$classe\élèves"
							
							
							if (Test-Path -Path $Path)
							{
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions0
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$classe", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "classe-$classe" -ea 0))
								{
									New-SMBShare -Name "classe-$classe" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage classe-$classe" -color green
								}
								if ($((Get-Variable -Name "$($classe)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage classe-$classe" -color green
									set-variable -Name "$($classe)_var" -Value "1"
								}
							}
							else
							{
								
								Add-Output -Text "Création du répertoire $path" -color green
								# create new folder
								New-Item -Path $Path -ItemType Directory
								New-Item -Path $path_ress -ItemType Directory
								New-Item -Path $path_travail -ItemType Directory
								New-Item -Path $path_eleves -ItemType Directory
								
								
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$classe", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "classe-$classe" -ea 0))
								{
									New-SMBShare -Name "classe-$classe" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage classe-$classe" -color green
								}
								if ($((Get-Variable -Name "$($classe)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage classe-$classe" -color green
									set-variable -Name "$($classe)_var" -Value "1"
								}
							}
							
							
							$sidclasse = ([Security2.IdentityReference2]$classe).Sid
							
							Invoke-Command -Session $s {
								if (Test-Path -Path $using:Path)
								{
									
									# récupère les droits
									#$acl = Get-Acl -Path $using:Path
									
									try
									{ $Group_classe_Exists2 = Get-ADGroup -Identity $($using:classe) }
									catch { }
									Do
									{
										Start-Sleep -Milliseconds 200
										try
										{ $Group_classe_Exists2 = Get-ADGroup -Identity $($using:classe) }
										catch { }
									}
									while ($null -eq $Group_classe_Exists2)
									
									
									Get-Item "$using:Path" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights ReadAndExecute, Synchronize
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights CreateFiles, CreateDirectories
									Add-NTFSAccess -Path "$using:Path" -Account $using:sidclasse -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$using:Path" -Account "BUILTIN\administrateurs" -AccessRights FullControl
									
									# créé le partage
									if (!(Get-SMBShare -Name "classe-$using:classe" -ea 0))
									{
										New-SMBShare -Name "classe-$using:classe" -Path $using:Path -FullAccess "Tout le monde"
									}
								}
								else
								{
									
									New-Item -Path $using:Path -ItemType Directory
									New-Item -Path $using:path_ress -ItemType Directory
									New-Item -Path $using:path_travail -ItemType Directory
									New-Item -Path $using:path_eleves -ItemType Directory
									
									
									try
									{ $Group_classe_Exists2 = Get-ADGroup -Identity $($using:classe) }
									catch { }
									Do
									{
										Start-Sleep -Milliseconds 200
										try
										{ $Group_classe_Exists2 = Get-ADGroup -Identity $($using:classe) }
										catch { }
									}
									while ($null -eq $Group_classe_Exists2)
									
									
									Get-Item "$using:Path" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights ReadAndExecute, Synchronize
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights CreateFiles, CreateDirectories
									Add-NTFSAccess -Path "$using:Path" -Account $using:sidclasse -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$using:Path" -Account "BUILTIN\administrateurs" -AccessRights FullControl
									
									# créé le partage
									if (!(Get-SMBShare -Name "classe-$using:classe" -ea 0))
									{
										New-SMBShare -Name "classe-$using:classe" -Path $using:Path -FullAccess "Tout le monde"
									}
								}
							}
							Get-Item $path_ress | Disable-NTFSAccessInheritance
							add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights DeleteSubdirectoriesAndFiles, Write, Delete -AccessType Deny
							add-NTFSAccess -path $path_ress -Account $sideleves -AccessRights ReadAndExecute, Synchronize
							Invoke-Command -Session $s {
								Get-Item $using:path_ress | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $using:path_ress -Account $using:sideleves -AccessRights DeleteSubdirectoriesAndFiles, Write, Delete -AccessType Deny
								add-NTFSAccess -path $using:path_ress -Account $using:sideleves -AccessRights ReadAndExecute, Synchronize
							}
							Get-Item $path_eleves | Disable-NTFSAccessInheritance
							add-NTFSAccess -path $path_eleves -Account $sideleves -AccessRights FullControl -AccessType Deny
							
							Invoke-Command -Session $s {
								Get-Item $using:path_eleves | Disable-NTFSAccessInheritance
								add-NTFSAccess -path $using:path_eleves -Account $using:sideleves -AccessRights FullControl -AccessType Deny
							}
							
						}
					}
					
				}
				
				# Création des groupes d'utilisateurs correspondants aux matières
				if ($($user.'matiere') -ne "")
				{
					if ($($user.'matiere') -ne $null)
					{
						
						$matiere = $($user.'matiere')
						try
						{
							$Group_matiere_Exists = Get-ADGroup -Filter 'Name -eq $matiere' -ErrorAction Continue
						}
						catch { }
						if ($Group_matiere_Exists -eq $NULL)
						{
							New-ADGroup -Name $matiere -Path $OU_groupe_matieres -Description "Groupe des personnes faisant partie de la matiere $matiere" -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
							# On affiche la création de l'option
							Add-Output -Text "Création du groupe de matiere $matiere" -color Green
						}
						
						if (-not (Test-Path variable:"$($matiere)_var"))
						{
							New-Variable -Name "$($matiere)_var"
							$Path = "$rep_matieres\$matiere"
							
							if (Test-Path -Path $Path)
							{
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions0
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$matiere", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "matiere-$matiere" -ea 0))
								{
									New-SMBShare -Name "matiere-$matiere" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage matiere-$matiere" -color green
								}
								if ($((Get-Variable -Name "$($matiere)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage matiere-$matiere" -color green
									set-variable -Name "$($matiere)_var" -Value "1"
								}
							}
							else
							{
								
								Add-Output -Text "Création du répertoire $path" -color green
								# create new folder
								New-Item -Path $Path -ItemType Directory
								
								
								# récupère les droits
								$acl = Get-Acl -Path $path
								
								# ajoute les permissions
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								$regle_groupe = New-Object System.Security.AccessControl.FileSystemAccessRule("$matiere", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$rules = $regle_admin, $regle_groupe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $Path
								
								# créé le partage
								if (!(Get-SMBShare -Name "matiere-$matiere" -ea 0))
								{
									New-SMBShare -Name "matiere-$matiere" -Path $Path -FullAccess "Tout le monde"
									Add-Output -Text "Création du partage matiere-$matiere" -color green
								}
								if ($((Get-Variable -Name "$($matiere)_var").Value) -ne "1")
								{
									Add-Output -Text "Application des droits sur le partage matiere-$matiere" -color green
									set-variable -Name "$($matiere)_var" -Value "1"
								}
							}
							
							
							$sidmatiere = ([Security2.IdentityReference2]$matiere).Sid
							
							Invoke-Command -Session $s {
								if (Test-Path -Path $using:Path)
								{
									
									# récupère les droits
									#$acl = Get-Acl -Path $using:Path
									
									try
									{ $Group_matiere_Exists2 = Get-ADGroup -Identity $($using:matiere) }
									catch { }
									Do
									{
										Start-Sleep -Milliseconds 200
										try
										{ $Group_matiere_Exists2 = Get-ADGroup -Identity $($using:matiere) }
										catch { }
									}
									while ($null -eq $Group_matiere_Exists2)
									
									
									Get-Item "$using:Path" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights ReadAndExecute, Synchronize
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights CreateFiles, CreateDirectories
									Add-NTFSAccess -Path "$using:Path" -Account $using:sidmatiere -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$using:Path" -Account "BUILTIN\administrateurs" -AccessRights FullControl
									
									# créé le partage
									if (!(Get-SMBShare -Name "matiere-$using:matiere" -ea 0))
									{
										New-SMBShare -Name "matiere-$using:matiere" -Path $using:Path -FullAccess "Tout le monde"
									}
								}
								else
								{
									
									New-Item -Path $using:Path -ItemType Directory
									
									
									try
									{ $Group_matiere_Exists2 = Get-ADGroup -Identity $($using:matiere) }
									catch { }
									Do
									{
										Start-Sleep -Milliseconds 200
										try
										{ $Group_matiere_Exists2 = Get-ADGroup -Identity $($using:matiere) }
										catch { }
									}
									while ($null -eq $Group_matiere_Exists2)
									
									
									Get-Item "$using:Path" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights ReadAndExecute, Synchronize
									Remove-NTFSAccess -Path "$using:Path" -Account "BUILTIN\Utilisateurs" -AccessRights CreateFiles, CreateDirectories
									Add-NTFSAccess -Path "$using:Path" -Account $using:sidmatiere -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$using:Path" -Account "BUILTIN\administrateurs" -AccessRights FullControl
									
									# créé le partage
									if (!(Get-SMBShare -Name "matiere-$using:matiere" -ea 0))
									{
										New-SMBShare -Name "matiere-$using:matiere" -Path $using:Path -FullAccess "Tout le monde"
									}
								}
							}
						}
						
					}
				}
				
				
				
				# attribution de la variable username
				$username = "$($user.'login')"
				
				#Attribution dy type de l'utilisateur
				$type_utilisateur = "$($user.'groupe')"
				
				$nom_affiche = "$($user.'Prenom') $($user.'nom')"
				
				#Permet de tester si l'utilisateur existe déjà dans l'AD
				$ExistingADUser = Get-ADUser -Filter "SamAccountName -eq '$($user.'login')'"
				
				
				# Attribution des variables en fonction des types utilisateurs
				
				if ($type_utilisateur -eq "$nom_eleves")
				{
					$line = $user.'Nom' + ";" + $user.'prenom' + ";" + $user.'login' + ";" + $user.'mot de passe' + ";" + $user.'classe'
					if ($profil -eq "obligatoire")
					{
						$profil_user = "$rep_profils\$nom_eleves"
					}
					elseif ($profil -eq "itinerant")
					{
						$profil_user = "$rep_profils_it\$($user.'login')"
					}
					elseif ($profil -eq "local")
					{
						$profil_user = ""
					}
					$OU_utilisateur_newad = "$($user.'classe'),OU=$OU_classes"
					$repertoire_perso = "$rep_perso_base\$nom_eleves\$($user.'classe')"
					$description_utilisateur = "Compte élève de la classe $($user.'classe')"
					$classe = $($user.'classe')
					$template_quota = $template_quota_eleve
					$taille_quota = $quota_eleve
					Add-Content -Path $pathexporteleveCSV -Value $line
					
					
				}
				
				# Creation de la variable du fichier script
				$chemin_fichierbat = "$netlogon$($user.'login').bat"
				$fichierbat = "$($user.'login').bat"
				
				#repertoire perso
				$new_rep_perso = "$repertoire_perso\$($username)"
				$path_DL = "$new_rep_perso\Telechargements"
				$path_prive = "$new_rep_perso\Privé"
				
				
				# Si l'utilisateur n'existe pas alors on le créé
				if ($null -eq $ExistingADUser)
				{
					if ($($user.'classe')  -ne "")
					{
						
						
						if ($($user.'classe') -ne $null)
						{
							# Création de la variable du mot de passe
							$mdp = "$($user.'mot de passe')"
							
							
							# On créé l'utilisateur
							if ($profil -eq "local")
							{
								New-ADUser -Name $user.'login' `
										   -GivenName $user.'Prenom' `
										   -Surname $user.'Nom' `
										   -displayname $nom_affiche `
										   -UserPrincipalName $user.'login'`
										   -SamAccountName $user.'login' `
										   -Description $description_utilisateur `
										   -Path "OU=$OU_utilisateur_newad,$OU_utilisateur_base" `
										   -AccountPassword (ConvertTo-SecureString $mdp -AsPlainText -Force) `
										   -ChangePasswordAtLogon $true `
										   -Enabled $true `
										   -POBox $user.'date naissance' `
										   -Manager "Importautomatique" `
										   -title $type_utilisateur `
										   -office $classe `
										   -scriptPath $fichierbat `
										   -streetAddress $($user.'options') `
										   -division $user.'matiere'`
										   -EmployeeID $mdp
							}
							else
							{
								New-ADUser -Name $user.'login' `
										   -GivenName $user.'Prenom' `
										   -Surname $user.'Nom' `
										   -displayname $nom_affiche `
										   -UserPrincipalName $user.'login'`
										   -SamAccountName $user.'login' `
										   -Description $description_utilisateur `
										   -Path "OU=$OU_utilisateur_newad,$OU_utilisateur_base" `
										   -AccountPassword (ConvertTo-SecureString $mdp -AsPlainText -Force) `
										   -ChangePasswordAtLogon $true `
										   -Enabled $true `
										   -POBox $user.'date naissance' `
										   -Manager "Importautomatique" `
										   -profilePath $profil_user `
										   -title $type_utilisateur `
										   -office $classe `
										   -scriptPath $fichierbat `
										   -streetAddress $($user.'options') `
										   -division $user.'matiere'`
										   -EmployeeID $mdp
								
							}
							
							
							
							#ajout du groupe de base 
							Add-ADGroupMember -Identity $type_utilisateur -Members $user.'login'
							
							# On affiche la création de l'utilisateur
							Add-Output -Text "Création de l'utilisateur $Username" -Color magenta
							$siduser = ([Security2.IdentityReference2]$($user.'login')).Sid
							
							if (-not (Test-Path -Path $new_rep_perso))
							{
								Add-Output -Text "Création du répertoire $new_rep_perso" -Color green
								# create new folder
								New-Item -Path $new_rep_perso -ItemType Directory
								New-Item -Path $path_DL -ItemType Directory
								New-Item -Path $path_prive -ItemType Directory
								
					
								Add-Output -Text "Application du quota : $template_quota" -Color green
								new-FsrmQuota -Path $new_rep_perso -description "$template_quota" -template "$template_quota"
								#reset-FsrmQuota -Path $new_rep_perso -template "$template_quota" -Confirm:$false
								
								# récupère les droits
								$acl = Get-Acl -Path $new_rep_perso
								
								
								# ajoute les permissions
								$acl.SetAccessRuleProtection($True, $False)
								
								$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								$regle_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
								
								
								$rules = $regle_admin, $regle_user, $regle_prof_classe
								
								foreach ($rule in $rules)
								{
									$acl.AddAccessRule($rule)
								}
								# ajoute les permissions
								$acl | Set-Acl -Path $new_rep_perso
								
								$acl_DL = Get-Acl $path_DL
								$acl_DL.SetAccessRuleProtection($true, $false)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "Allow")
								$acl_DL.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Delete", "Deny")
								$acl_DL.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
								$acl_DL.SetAccessRule($Ar)
								Set-Acl $path_DL $acl_DL
								
								$acl_prive = Get-Acl $path_prive
								$acl_prive.SetAccessRuleProtection($true, $false)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "Allow")
								$acl_prive.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Delete", "Deny")
								$acl_prive.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($nom_professeurs), "Read", "Deny")
								$acl_prive.SetAccessRule($Ar)
								$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
								$acl_prive.SetAccessRule($Ar)
								Set-Acl $path_prive $acl_prive
								
								
								
								# créé le partage
								New-SMBShare -Name "$($user.'login')" -Path $new_rep_perso -FullAccess "Tout le monde" -ea 0
								
								Copy-Item "$ScriptDirectory\config\Desktopini\desktop.ini" -destination $new_rep_perso -Force
								$Pathini = "$new_rep_perso\desktop.ini"
								Get-Item $Pathini | Disable-NTFSAccessInheritance
								
								Remove-NTFSAccess -path $Pathini -Account $siduser -AccessRights Modify, Synchronize
								Get-ChildItem $Pathini -Force | ForEach-Object { $_.Attributes += "Hidden" }
							}
							$logintemp = $($user.'login')
							Invoke-Command -Session $s {
								if (-not (Test-Path -Path $using:new_rep_perso))
								{
									
									New-Item -Path $using:new_rep_perso -ItemType Directory
									New-Item -Path $using:path_DL -ItemType Directory
									New-Item -Path $using:path_prive -ItemType Directory
									
									new-FsrmQuota -Path $using:new_rep_perso -description "$using:template_quota" -template "$using:template_quota" #-Size $using:taille_quota
									#reset-FsrmQuota -Path $using:new_rep_perso -template "$using:template_quota" -Confirm:$false
									
									$ExistingADUsersrv2 = Get-ADUser -Filter "SamAccountName -eq '$($using:logintemp)'"
									
									Do
									{
										Start-Sleep -Milliseconds 200
										$ExistingADUsersrv2 = Get-ADUser -Filter "SamAccountName -eq '$($using:logintemp)'"
									}
									while ($null -eq $ExistingADUsersrv2)
									
									# récupère les droits
									$acl = Get-Acl -Path $using:new_rep_perso
									
									
									# ajoute les permissions
									$acl.SetAccessRuleProtection($True, $False)
									
									$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
									
									
									$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
									
									$regle_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$using:classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
									
									$rules = $regle_admin, $regle_user, $regle_prof_classe
									
									foreach ($rule in $rules)
									{
										$acl.AddAccessRule($rule)
									}
									# ajoute les permissions
									$acl | Set-Acl -Path $using:new_rep_perso
									
									$acl_DL = Get-Acl $using:path_DL
									$acl_DL.SetAccessRuleProtection($true, $false)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Modify", "Allow")
									$acl_DL.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Delete", "Deny")
									$acl_DL.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
									$acl_DL.SetAccessRule($Ar)
									Set-Acl $using:path_DL $acl_DL
									
									$acl_prive = Get-Acl $using:path_prive
									$acl_prive.SetAccessRuleProtection($true, $false)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Modify", "Allow")
									$acl_prive.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Delete", "Deny")
									$acl_prive.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:nom_professeurs), "Read", "Deny")
									$acl_prive.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
									$acl_prive.SetAccessRule($Ar)
									Set-Acl $using:path_prive $acl_prive
									
									# créé le partage
									New-SMBShare -Name "$($using:logintemp)" -Path $using:new_rep_perso -FullAccess "Tout le monde" -ea 0
									
									Copy-Item "$using:ScriptDirectory\config\Desktopini\desktop.ini" -destination $using:new_rep_perso -Force
									$Pathini = "$using:new_rep_perso\desktop.ini"
									Get-Item $Pathini | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $Pathini -Account $using:siduser -AccessRights Modify, Synchronize
									Get-ChildItem $Pathini -Force | ForEach-Object { $_.Attributes += "Hidden" }
								}
								else
								{
									if (-not (Test-Path -Path $using:path_DL))
									{
										New-Item -Path $using:path_DL -ItemType Directory
										
									}
									if (-not (Test-Path -Path $using:path_prive))
									{
										New-Item -Path $using:path_prive -ItemType Directory
									}
									
									new-FsrmQuota -Path $using:new_rep_perso -description "$using:template_quota" -template "$using:template_quota" #-Size $using:taille_quota
									#reset-FsrmQuota -Path $using:new_rep_perso -template "$using:template_quota" -Confirm:$false
									
									$ExistingADUsersrv2 = Get-ADUser -Filter "SamAccountName -eq '$($using:logintemp)'"
									
									Do
									{
										Start-Sleep -Milliseconds 200
										$ExistingADUsersrv2 = Get-ADUser -Filter "SamAccountName -eq '$($using:logintemp)'"
									}
									while ($null -eq $ExistingADUsersrv2)
									
									# récupère les droits
									$acl = Get-Acl -Path $using:new_rep_perso
									
									
									# ajoute les permissions
									$acl.SetAccessRuleProtection($True, $False)
									
									$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
									
									
									$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
									
									$regle_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$using:classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
									
									$rules = $regle_admin, $regle_user, $regle_prof_classe
									
									foreach ($rule in $rules)
									{
										$acl.AddAccessRule($rule)
									}
									# ajoute les permissions
									$acl | Set-Acl -Path $using:new_rep_perso
									
									$acl_DL = Get-Acl $using:path_DL
									$acl_DL.SetAccessRuleProtection($true, $false)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Modify", "Allow")
									$acl_DL.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Delete", "Deny")
									$acl_DL.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
									$acl_DL.SetAccessRule($Ar)
									Set-Acl $using:path_DL $acl_DL
									
									$acl_prive = Get-Acl $using:path_prive
									$acl_prive.SetAccessRuleProtection($true, $false)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Modify", "Allow")
									$acl_prive.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Delete", "Deny")
									$acl_prive.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:nom_professeurs), "Read", "Deny")
									$acl_prive.SetAccessRule($Ar)
									$Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "Allow")
									$acl_prive.SetAccessRule($Ar)
									Set-Acl $using:path_prive $acl_prive
									
									# créé le partage
									New-SMBShare -Name "$($using:logintemp)" -Path $using:new_rep_perso -FullAccess "Tout le monde" -ea 0
									
									Copy-Item "$using:ScriptDirectory\config\Desktopini\desktop.ini" -destination $using:new_rep_perso -Force
									$Pathini = "$using:new_rep_perso\desktop.ini"
									Get-Item $Pathini | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $Pathini -Account $using:siduser -AccessRights Modify, Synchronize
									Get-ChildItem $Pathini -Force | ForEach-Object { $_.Attributes += "Hidden" }
									
									
									
									
									
								}
							}
							
							
							
							
							# On teste si l'utilisateur à des options et on les attribue
							if ($User.'Options' -ne "")
							{
								if ($User.'Options' -ne $null)
								{
									
									$rep_options_perso = "$new_rep_perso\groupes\"
									$User.'Options'.Split(",") | ForEach {
										Add-ADGroupMember -Identity $_ -Members $user.'login'
										Add-Output -Text "Ajout de l'utilisateur $Username au groupe $_ " -color green # affiche l'attribution du groupe
										if (-not (Test-Path -Path $rep_options_perso))
										{
											New-Item -Path $rep_options_perso -ItemType Directory -Force
											$Folder = Get-Item  $rep_options_perso
											$Folder.Attributes += 'ReadOnly'
											attrib -h $rep_options_perso
											
										}
										else { attrib -h $rep_options_perso }
										
										
										if (-not (test-path "$rep_options_perso$_.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$rep_options_perso$_.lnk")
											$lnk.TargetPath = "\\$nom_serveur\option-$_"
											$lnk.Save()
										}
										$optionsvr2 = $_
										Invoke-Command -Session $s {
											if (-not (Test-Path -Path $using:rep_options_perso))
											{
												New-Item -Path $using:rep_options_perso -ItemType Directory -Force
												$Folder = Get-Item  $using:rep_options_perso
												$Folder.Attributes += 'ReadOnly'
												attrib -h $using:rep_options_perso
											}
											else
											{
												attrib -h $using:rep_options_perso
											}
											
											if (-not (test-path "$using:rep_options_perso$using:optionsvr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$using:rep_options_perso$using:optionsvr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\option-$using:optionsvr2"
												$lnk.Save()
											}
										}
										
									}
									
									Get-Item $rep_options_perso | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Modify, Synchronize
									add-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Read
									
									
									Invoke-Command -Session $s {
										Get-Item $using:rep_options_perso | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Modify, Synchronize
										add-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Read
										
									}
								}
								
							}
							
							# On teste si l'utilisateur à une classe et on l attribue
							if ($User.'classe' -ne "")
							{
								if ($User.'classe' -ne $null)
								{
									$classe = $user.'classe'
									$login = $user.'login'
									
									Add-ADGroupMember -Identity $classe -Members $user.'login'
									Add-Output -Text "Ajout de l'utilisateur $Username au groupe $classe " -color green # affiche l'attribution du groupe
									
									
									if (-not (test-path "$($new_rep_perso)\classe-$classe.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($new_rep_perso)\classe-$classe.lnk")
										$lnk.TargetPath = "\\$nom_serveur\classe-$classe"
										$lnk.Save()
									}
									$classevr2 = $classe
									Invoke-Command -Session $s {
										
										
										if (-not (test-path "$($using:new_rep_perso)\classe-$using:classevr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\classe-$using:classevr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
											$lnk.Save()
										}
									}
									
									
									Get-Item "$($new_rep_perso)\classe-$classe.lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Read, Synchronize
									
									Invoke-Command -Session $s {
										
										Get-Item "$($using:new_rep_perso)\classe-$using:classevr2.lnk" | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -Path "$($using:new_rep_perso)\classe-$using:classevr2.lnk" -Account $($using:logintemp) -AccessRights Modify, Synchronize
										Add-NTFSAccess -Path "$($using:new_rep_perso)\classe-$using:classevr2.lnk" -Account $($using:logintemp) -AccessRights Read, Synchronize
									}
									
									if (-not (test-path "$($path_eleves)\$($user.'login').lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($path_eleves)\$($user.'login').lnk")
										$lnk.TargetPath = "\\$nom_serveur\$($user.'login')"
										$lnk.Save()
									}
									Invoke-Command -Session $s {
										
										if (-not (test-path "$($using:path_eleves)\$($using:login).lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:path_eleves)\$($using:login).lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\$($using:login)"
											$lnk.Save()
										}
									}
									
									Get-Item "$($path_eleves)\$($user.'login').lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($path_eleves)\$($user.'login').lnk" -Account "Professeurs-$classe" -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($path_eleves)\$($user.'login').lnk" -Account "Professeurs-$classe" -AccessRights Read, Synchronize
									
									Invoke-Command -Session $s {
										
										Get-Item "$($using:path_eleves)\$($using:logintemp).lnk" | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -Path "$($using:path_eleves)\$($using:logintemp).lnk" -Account "Professeurs-$using:classe" -AccessRights Modify, Synchronize
										Add-NTFSAccess -Path "$($using:path_eleves)\$($using:logintemp).lnk" -Account "Professeurs-$using:classe" -AccessRights Read, Synchronize
										
									}
								}
								
							}
							
							
							
							
							if (Test-Path -Path $chemin_fichierbat)
							{
								Remove-Item $chemin_fichierbat -Confirm:$false -Force
							}
							New-Item $chemin_fichierbat
							Invoke-Expression -Command:"icacls $chemin_fichierbat /grant:r $($user.'login'):'(OI)(CI)(RX)' /T"
							#$lecteurperso1 = "if exist \\$nom_serveur\$($user.'login') (net use t: \\$nom_serveur\$($user.'login'))"
							#$lecteurperso2 = "if exist \\$nom_serveur2\$($user.'login') (net use t: \\$nom_serveur2\$($user.'login'))"
							$lecteurperso = "net use t: %logonserver%\$($user.'login')"
							Start-Sleep -Milliseconds 500
							Set-Content -Path $chemin_fichierbat -Value "@echo off"
							#add-Content -Path $chemin_fichierbat -Value $lecteurperso1 | Out-Null
							#add-Content -Path $chemin_fichierbat -Value $lecteurperso2 | Out-Null
							add-Content -Path $chemin_fichierbat -Value $lecteurperso | Out-Null
							add-Content -Path $chemin_fichierbat -Value 'timeout 5 > NUL'
							add-Content -Path $chemin_fichierbat -Value 'echo n | gpupdate /target:user /force'
							$progressbarimportation.PerformStep()
						}
					}
				}
				else
				{

					$login = $($user.'login')
					#Travail sur le déplacement des données
					
					foreach ($old_user in $OLD_CSV)
					{
						[System.Windows.Forms.Application]::DoEvents()
						if ($($old_user.'login') -eq $Username)
						{
							if (-not ($old_user.'CLASSE' -eq $user.'CLASSE'))
							{
								if (-not $user.'CLASSE' -eq "")
								{
									$classe = $user.'classe'
									remove-adgroupmember -Identity $($old_user.'classe') -Members $($user.'login') -Confirm:$false
									
									$dn = $($old_user.'DistinguishedName')
									$resultdn = ($dn -split 'OU=|,OU=')[1]
									$old_classe = $($old_user.'classe')
									$logintemp = $($user.'login')
									$path_new_eleves = "$rep_classes\$($user.'CLASSE')\élèves"
									$path_old_eleves = "$rep_classes\$($old_user.'CLASSE')\élèves"
									if ($resultdn -ne "$OU_TEMP")
									{
										
										if ($resultdn -ne $($user.'classe'))
										{
											Remove-SmbShare -Name "$($user.'login')" -Force
											Invoke-Command -Session $s {
												Remove-SmbShare -Name "$using:logintemp" -Force
											}
											$old_repertoire_perso = "$rep_perso_base\$nom_eleves\$old_classe\$($old_user.'login')\"
											
											
											$ACL = Get-Acl -Path $old_repertoire_perso # Récupérer la liste de contrôle d'accès (ACL) du dossier
											
											# Récupérer toutes les règles d'accès qui contiennent "Professeurs-$classeactuelle" en tant que groupe de sécurité
											$rulesToRemove = $ACL.Access | Where-Object { $_.IdentityReference -like "*Professeurs-$old_classe*" }
											
											if ($rulesToRemove)
											{
												foreach ($rule in $rulesToRemove)
												{
													$ACL.RemoveAccessRule($rule) # Supprimer la règle d'accès correspondante
												}
												Set-Acl -Path $old_repertoire_perso -AclObject $ACL # Appliquer la nouvelle ACL au dossier
											}
											
											if ($s -ne "vide")
											{
												
												Invoke-Command -Session $s {
													
													
													$ACL = Get-Acl -Path $using:old_repertoire_perso # Récupérer la liste de contrôle d'accès (ACL) du dossier
													
													# Récupérer toutes les règles d'accès qui contiennent "Professeurs-$classeactuelle" en tant que groupe de sécurité
													$rulesToRemove = $ACL.Access | Where-Object { $_.IdentityReference -like "*Professeurs-$using:old_classe*" }
													
													if ($rulesToRemove)
													{
														foreach ($rule in $rulesToRemove)
														{
															$ACL.RemoveAccessRule($rule) # Supprimer la règle d'accès correspondante
														}
														Set-Acl -Path $using:old_repertoire_perso -AclObject $ACL # Appliquer la nouvelle ACL au dossier
													}
												}
											}
											
											
											
											Add-Output -Text "Déplacement de l'élève $($user.'login') dans la classe $($user.'CLASSE')" -color green
											Move-Item -Path $old_repertoire_perso -Destination $new_rep_perso -Force
											Invoke-Command -Session $s {
												
												Move-Item -Path $using:old_repertoire_perso -Destination $using:new_rep_perso -Force
											}
											New-SMBShare -Name "$($user.'login')" -Path $new_rep_perso -FullAccess "Tout le monde" -ea 0
											Invoke-Command -Session $s {
												New-SMBShare -Name "$using:logintemp" -Path $using:new_rep_perso -FullAccess "Tout le monde" -ea 0
											}
											
											reset-FsrmQuota -Path $new_rep_perso -template "$template_quota" -Confirm:$false
											
											
											$Pathini = "$new_rep_perso\desktop.ini"
											$siduser = ([Security2.IdentityReference2]$($user.'login')).Sid
											if (-not (Test-Path -Path $Pathini))
											{
												Copy-Item "$ScriptDirectory\config\Desktopini\desktop.ini" -destination $new_rep_perso -Force
												Get-Item $Pathini | Disable-NTFSAccessInheritance
												
												Remove-NTFSAccess -path $Pathini -Account $siduser -AccessRights Modify, Synchronize
												Get-ChildItem $Pathini -Force | ForEach-Object { $_.Attributes += "Hidden" }
											}
											# récupère les droits
											$acl = Get-Acl -Path $new_rep_perso
											
											# ajoute les permissions
											$acl.SetAccessRuleProtection($True, $False)
											
											$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
											
											$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule($($user.'login'), "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
											
											$regle_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
											
											$rules = $regle_admin, $regle_user, $regle_prof_classe
											
											foreach ($rule in $rules)
											{
												$acl.AddAccessRule($rule)
											}
											# ajoute les permissions
											$acl | Set-Acl -Path $new_rep_perso
											$logintemp = $($user.'login')
											Invoke-Command -Session $s {
												reset-FsrmQuota -Path $using:new_rep_perso -template "$using:template_quota" -Confirm:$false
												$ExistingADUsersrv2 = Get-ADUser -Filter "SamAccountName -eq '$($using:logintemp)'"
												Do
												{
													Start-Sleep -Milliseconds 500
													$ExistingADUsersrv2 = Get-ADUser -Filter "SamAccountName -eq '$($using:logintemp)'"
												}
												while ($null -eq $ExistingADUsersrv2)
												# récupère les droits
												$acl = Get-Acl -Path $using:new_rep_perso
												
												# ajoute les permissions
												$acl.SetAccessRuleProtection($True, $False)
												
												$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
												
												
												$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule($($using:logintemp), "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
												
												$regle_prof_classe = New-Object System.Security.AccessControl.FileSystemAccessRule("Professeurs-$using:classe", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
												
												
												$rules = $regle_admin, $regle_user, $regle_prof_classe
												
												foreach ($rule in $rules)
												{
													$acl.AddAccessRule($rule)
												}
												# ajoute les permissions
												$acl | Set-Acl -Path $using:new_rep_perso
											}
											
											# On spécifié l'OU cible de l'utilisateur.
											$OUcible = "OU=$OU_utilisateur_newad,$OU_utilisateur_base"
											
											# Déplacement dans la bonne OU.
											$UserDN = (Get-ADUser -Identity $user.'login').distinguishedName
											$UserDN1 = ($UserDN -split 'OU=|,OU=')[1]
											
											set-aduser -Identity $($user.'login') -company "Ancienne classe utilisateur $("$UserDN1")"
											
											#Affichage du déplacement
											Add-Output -Text "Deplacement de l'utilisateur $Username vers l'OU $OUcible" -color magenta
											Move-ADObject -Identity $UserDN -TargetPath $OUcible
											
											if (Test-Path -Path $chemin_fichierbat)
											{
												Remove-Item $chemin_fichierbat -Confirm:$false -Force
											}
											New-Item $chemin_fichierbat
											#$lecteurperso1 = "if exist \\$nom_serveur\$($user.'login') (net use t: \\$nom_serveur\$($user.'login'))"
											#$lecteurperso2 = "if exist \\$nom_serveur2\$($user.'login') (net use t: \\$nom_serveur2\$($user.'login'))"
											$lecteurperso = "net use t: %logonserver%\$($user.'login')"
											Start-Sleep -Milliseconds 500
											Set-Content -Path $chemin_fichierbat -Value "@echo off"
											#add-Content -Path $chemin_fichierbat -Value $lecteurperso1 | Out-Null
											#add-Content -Path $chemin_fichierbat -Value $lecteurperso2 | Out-Null
											add-Content -Path $chemin_fichierbat -Value $lecteurperso | Out-Null
											add-Content -Path $chemin_fichierbat -Value 'timeout 5 > NUL'
											add-Content -Path $chemin_fichierbat -Value 'echo n | gpupdate /target:user /force'
											
											set-aduser -Identity $($user.'login') -manager "Importautomatique" -profilepath "$profil_user" -scriptPath $fichierbat -displayname $nom_affiche -description $description_utilisateur -office $classe
										}
										
									}
									if ($User.'classe' -ne "")
									{
										if ($User.'classe' -ne $null)
										{
											Add-ADGroupMember -Identity $classe -Members $user.'login'
											Add-Output -Text "Ajout de l'utilisateur $Username au groupe $classe " -color green # affiche l'attribution du groupe
											
											if (-not (test-path "$($new_rep_perso)\classe-$classe.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($new_rep_perso)\classe-$classe.lnk")
												$lnk.TargetPath = "\\$nom_serveur\classe-$classe"
												$lnk.Save()
											}
											$classevr2 = $classe
											Invoke-Command -Session $s {
												
												
												if (-not (test-path "$($using:new_rep_perso)\classe-$using:classevr2.lnk"))
												{
													$objShell = New-Object -ComObject WScript.Shell
													$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\classe-$using:classevr2.lnk")
													$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
													$lnk.Save()
												}
											}
											if (-not (test-path "$($path_new_eleves)\$($user.'login').lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($path_new_eleves)\$($user.'login').lnk")
												$lnk.TargetPath = "\\$nom_serveur\$($user.'login')"
												$lnk.Save()
											}
											Invoke-Command -Session $s {
												
												if (-not (test-path "$($using:path_new_eleves)\$($using:login).lnk"))
												{
													$objShell = New-Object -ComObject WScript.Shell
													$lnk = $objShell.CreateShortcut("$($using:path_new_eleves)\$($using:login).lnk")
													$lnk.TargetPath = "\\$using:nom_serveur2\$($using:login)"
													$lnk.Save()
												}
											}
											
											Get-Item "$($new_rep_perso)\classe-$classe.lnk" | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Modify, Synchronize
											Add-NTFSAccess -Path "$($new_rep_perso)\classe-$classe.lnk" -Account $($user.'login') -AccessRights Read, Synchronize
											Remove-Item "$($new_rep_perso)\classe-$($old_user.'classe').lnk" -Force -Confirm:$false
											Remove-Item "$($path_old_eleves)\$($user.'login').lnk" -Force -Confirm:$false
											
											$logintemp = $($user.'login')
											$oldclasse = "classe-$($old_user.'classe')"
											Invoke-Command -Session $s {
												Get-Item "$($using:new_rep_perso)\classe-$using:classevr2.lnk" | Disable-NTFSAccessInheritance
												Remove-NTFSAccess -Path "$($using:new_rep_perso)\classe-$using:classevr2.lnk" -Account $($using:logintemp) -AccessRights Modify, Synchronize
												Add-NTFSAccess -Path "$($using:new_rep_perso)\classe-$using:classevr2.lnk" -Account $($using:logintemp) -AccessRights Read, Synchronize
												Remove-Item "$($using:new_rep_perso)\$($using:oldclasse).lnk" -Force -Confirm:$false
												Remove-Item "$($using:path_old_eleves)\$($using:login).lnk" -Force -Confirm:$false
											}
										}
									}
								}
								else
								{
									
									if ($($old_user.'manager') -eq "CN=Import Automatique,CN=Users,$OU_base")
									{
										
										$utilisateur_deplace = "1"
										# On récupère tous les groupes auquel appartient l'utilisateur
										$groups = get-adprincipalgroupmembership $($old_user.'SamAccountName');
										
										
										#nettoyage des scripts de connexion
										$chemin_old_fichierbat = "$netlogon$($old_user.'SamAccountName').bat"
										Move-Item -Path $chemin_old_fichierbat -Destination $rep_ancien_scripts_utilisateur -Force
										
										
										# Boucle sur l'ensemble des groupes
										foreach ($group in $groups)
										{
											
											# On exclue utilisateurs du domaine
											if ($group.name -ne "Utilisateurs du domaine")
											{
												
												# On enlève l'utilisateur des groupes listés
												remove-adgroupmember -Identity $group.name -Members $old_user.'SamAccountName' -Confirm:$false;
												
											}
										}
										
										# Déplace l'utilisateur dans l'OU temporaire
										Move-ADObject -Identity $($old_user.'DistinguishedName') -TargetPath "OU=$OU_TEMP,$OU_base"
										
										# enleve l'utilisateur impor auto 
										Set-ADuser -Identity $($old_user.'SamAccountName') -clear Manager
										Add-Output -Text "L'utilisateur $($old_user.'SamAccountName') est déplacé dans l'OU temporaire" -Color blue
										
										# Suppression du partage  et déplacement dans ancien
										Remove-SmbShare -Name "$($old_user.'SamAccountName')" -Force
										$samaccount = $($old_user.'SamAccountName')
										Invoke-Command -Session $s {
											Remove-SmbShare -Name $using:samaccount -Force
										}
										if ($($old_user.'title') -eq "$nom_professeurs" -or $($old_user.'title') -eq "$nom_administratifs")
										{
											$ancienrepperso = "$rep_perso_base\$($old_user.'title')\$($old_user.'SamAccountName')"
											$nouveaureperso = "$rep_ancien\$($old_user.'title')\"
										}
										elseif ($($old_user.'title') -eq "$nom_eleves")
										{
											$ancienrepperso = "$rep_perso_base\$nom_eleves\$($old_user.'office')\$($old_user.'SamAccountName')"
											$nouveaureperso = "$rep_ancien\$nom_eleves\"
										}
										
										Remove-FsrmQuota -Path $ancienrepperso -Confirm:$false
										if (-not (Test-Path -Path $nouveaureperso))
										{
											New-Item -Path $nouveaureperso -ItemType Directory
										}
										
										
										Move-Item -Path $ancienrepperso -Destination $nouveaureperso -Force
										Invoke-Command -Session $s {
											Remove-FsrmQuota -Path $using:ancienrepperso -Confirm:$false
											if (-not (Test-Path -Path $using:nouveaureperso))
											{
												New-Item -Path $using:nouveaureperso -ItemType Directory
											}
											Move-Item -Path $using:ancienrepperso -Destination $using:nouveaureperso -Force
										}
									}
									
									
									
									
									
									
								}
							}
							
							# On teste si l'utilisateur à des options et on les attribue
							if (-not ($old_user.'OPTIONS' -eq $user.'OPTIONS'))
							{
								
								
								$rep_options_perso = "$new_rep_perso\groupes\"
								attrib -h $rep_options_perso
								
								
								if (-not ($old_user.'OPTIONS' -eq ""))
								{
									if (-not ($old_user.'OPTIONS' -eq $null))
									{
										$old_user.'OPTIONS'.Split(",") | ForEach {
											remove-adgroupmember -Identity $($_) -Members $($user.'login') -Confirm:$false;
											Remove-Item "$rep_options_perso$_.lnk"
										}
									}
								}
								if ($User.'Options' -ne "")
								{
									if ($User.'Options' -ne $null)
									{
										
										$User.'Options'.Split(",") | ForEach {
											Add-ADGroupMember -Identity $_ -Members $user.'login'
											Add-Output -Text "Ajout de l'utilisateur $Username au groupe $_ " -color green # affiche l'attribution du groupe
											if (-not (Test-Path -Path $rep_options_perso))
											{
												New-Item -Path $rep_options_perso -ItemType Directory -Force
											}
											attrib -h $rep_options_perso
											if (-not (test-path "$rep_options_perso$_.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$rep_options_perso$_.lnk")
												$lnk.TargetPath = "\\$nom_serveur\option-$_"
												$lnk.Save()
											}
											$optionsvr2 = $_
											
											Invoke-Command -Session $s {
												if (-not (Test-Path -Path $using:rep_options_perso))
												{
													New-Item -Path $using:rep_options_perso -ItemType Directory -Force
													$Folder = Get-Item  $using:rep_options_perso
													$Folder.Attributes += 'ReadOnly'
												}
												attrib -h $using:rep_options_perso
												if (-not (test-path "$using:rep_options_perso$using:optionsvr2.lnk"))
												{
													$objShell = New-Object -ComObject WScript.Shell
													$lnk = $objShell.CreateShortcut("$using:rep_options_perso$using:optionsvr2.lnk")
													$lnk.TargetPath = "\\$using:nom_serveur2\option-$using:optionsvr2"
													$lnk.Save()
												}
											}
											
										}
										attrib -h $rep_options_perso
										
										Get-Item $rep_options_perso | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Modify, Synchronize
										add-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Read
										
										
										Invoke-Command -Session $s {
											attrib -h $using:rep_options_perso
											Get-Item $using:rep_options_perso | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Modify, Synchronize
											add-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Read
										}
									}
									set-aduser -Identity $Username -streetAddress $($user.'options')
									
								}
								else
								{
									
									Get-ADUser $Username | Set-ADUser -Clear streetAddress
									#set-aduser -Identity $Username -streetAddress $null
								}
								
							}
						
						}
					}
					$progressbarimportation.PerformStep()
				}
				
			}
		}
		catch
		{
			$err = $_.Exception.Message
			Write-Host "$err"
		}
		
	}
	
	
	Add-Output -Text "ETAPE 5 NETTOYAGE DE LA BASE" -header
	
	#Nettoyage des comptes
	
	#-------------------------------
	# GROUPES
	#-------------------------------
	
	# Cherche les groupes vides dans une OU spécifique
	
	
	# Exporte le résultat dans un CSV
	
	
	$Groupes_vides = Get-ADGroup -Filter { Members -notlike "*" } -SearchBase $OU_groupe | Where-Object { ($_.distinguishedname -like "*,OU=options,*") -OR ($_.distinguishedname -like "*,OU=classes,*") -OR ($_.distinguishedname -like "*,OU=matieres,*") } | Select-Object Name, GroupCategory, DistinguishedName
	
	if ($Groupes_vides -ne $null)
	{
		$Groupes_vides | Export-Csv $sauve_nettoyage_groupe -NoTypeInformation -Encoding UTF8
		
		$groupe_nettoye = "1"
		# Supprime les groupes vides
		ForEach ($Item in $Groupes_vides)
		{ [System.Windows.Forms.Application]::DoEvents()
			if ($groupe_base_ckeck.Contains($($Item.Name)) -eq $false)
			{
				if (-not ($OU_groupe_machines -eq $Item.DistinguishedName))
				{
					$groupenettoyeDN = $($Item.DistinguishedName)
					$groupenettoye = $($Item.Name)
					Set-ADObject -identity $item.DistinguishedName -ProtectedFromAccidentalDeletion:$false -PassThru
					Remove-ADGroup -Identity $Item.DistinguishedName -Confirm:$false
					Add-Output -Text "Le groupe $groupenettoye est vide : suppression" -color magenta
				}
				
				if ($groupenettoyeDN -like "*$OU_groupe_options")
				{
					$Path = "$rep_options\$groupenettoye"
					$pathbackup = "$rep_ancien\options\"
					if (Get-SMBShare -Name "Option-$groupenettoye" -ea 0)
					{
						Remove-SmbShare -Name "Option-$groupenettoye" -Force
					}
					
					if (Test-Path -Path $Path)
					{
						if (-not (Test-Path -Path $pathbackup))
						{
							New-Item -Path $pathbackup -ItemType Directory
						}
						Move-Item -Path $Path -Destination "$pathbackup" -Force
					}
					if (-not ($s -eq "vide"))
					{
						Invoke-Command -Session $s {
							if (Get-SMBShare -Name "Option-$using:groupenettoye" -ea 0)
							{
								Remove-SmbShare -Name "Option-$using:groupenettoye" -Force
							}
							if (Test-Path -Path $using:Path)
							{
								if (-not (Test-Path -Path $using:pathbackup))
								{
									New-Item -Path $using:pathbackup -ItemType Directory
								}
								Move-Item -Path $using:Path -Destination "$using:pathbackup" -Force
							}
							
						}
					}
					
				}
				if ($groupenettoyeDN -like "*$OU_groupe_matieres")
				{
					$Path = "$rep_matieres\$groupenettoye"
					$pathbackup = "$rep_ancien\matieres\"
					if (Get-SMBShare -Name "matiere-$groupenettoye" -ea 0)
					{
						Remove-SmbShare -Name "matiere-$groupenettoye" -Force
					}
					if (Test-Path -Path $Path)
					{
						if (-not (Test-Path -Path $pathbackup))
						{
							New-Item -Path $pathbackup -ItemType Directory
						}
						Move-Item -Path $Path -Destination "$pathbackup\$groupenettoye" -Force
					}
					if (-not ($s -eq "vide"))
					{
						Invoke-Command -Session $s {
							if (Get-SMBShare -Name "matiere-$groupenettoye" -ea 0)
							{
								Remove-SmbShare -Name "matiere-$using:groupenettoye" -Force
							}
							if (Test-Path -Path $using:Path)
							{
								if (-not (Test-Path -Path $using:pathbackup))
								{
									New-Item -Path $using:pathbackup -ItemType Directory
								}
								Move-Item -Path $using:Path -Destination "$using:pathbackup" -Force
							}
							
						}
					}
				}
				
			}
		}
	}
	
	if (-not ($groupe_nettoye -eq "1"))
	{
		Add-Output -Text "Aucun groupe vide rien à faire" -color green
	}
	
	#-------------------------------
	# OU
	#-------------------------------
	
	# Cherche les OU vides
	
	
	# Exporte le résultat dans un CSV
	
	$OU_vides = Get-ADOrganizationalUnit -Filter * -SearchBase $OU_utilisateur_base | Where-Object { -not (Get-ADObject -Filter * -SearchBase $_.Distinguishedname -SearchScope OneLevel -ResultSetSize 1) }
	
	if ($OU_vides -ne $null)
	{
		$OU_vides | Export-Csv $sauve_nettoyage_ou -NoTypeInformation -Encoding UTF8
		$OU_nettoye = "1"
		
		# Supprime les OU vides
		ForEach ($Item in $OU_vides)
		{ [System.Windows.Forms.Application]::DoEvents()
			$OUnettoyeDN = $($Item.DistinguishedName)
			$OUnettoye = $($Item.Name)
			if ($groupe_base_ckeck.Contains($($Item.Name)) -eq $false)
			{
				Set-ADObject -identity $item.DistinguishedName -ProtectedFromAccidentalDeletion:$false -PassThru
				Remove-ADOrganizationalUnit -Identity $Item.DistinguishedName -Confirm:$false
				Add-Output -Text "L'OU $($Item.Name) est vide : suppression" -color magenta
				if ($OUnettoyeDN -like "*$ou_utilisateur_base_eleve")
				{
					$Path = "$rep_perso_base\eleves\$OUnettoye"
					$pathbackup = "$rep_ancien\classes\$OUnettoye"
					if (Test-Path -Path $Path)
					{
						if (-not (Test-Path -Path $pathbackup))
						{
							New-Item -Path $pathbackup -ItemType Directory
						}
						if (Get-SMBShare -Name "classe-$OUnettoye" -ea 0)
						{
							Remove-SmbShare -Name "classe-$OUnettoye" -Force
						}
						Move-Item -Path $Path -Destination "$pathbackup" -Force
					}
					if (-not ($s -eq "vide"))
					{
						Invoke-Command -Session $s {
							if (Get-SMBShare -Name "classe-$using:OUnettoye" -ea 0)
							{
								Remove-SmbShare -Name "classe-$using:OUnettoye" -Force
							}
							if (Test-Path -Path $using:path)
							{
								if (-not (Test-Path -Path $using:pathbackup))
								{
									New-Item -Path $using:pathbackup -ItemType Directory
								}
								Move-Item -Path $using:Path -Destination $using:pathbackup -Force
							}
						}
					}
					
				}
				
			}
		}
	}
	
	if (-not ($OU_nettoye -eq "1"))
	{
		Add-Output -Text "Aucune OU vide rien à faire" -color green
	}
	
	
	
	Add-Output -Text "ETAPE 6 GENERATION DES FICHIERS DE CLASSE" -header
	
	
	
	
	if ($s -eq "vide")
	{
		
		$deuxserveurs = $false
		GenererFichiersClasses $deuxserveurs
	}
	else
	{
		$deuxserveurs = $true
		GenererFichiersClasses $deuxserveurs
		
	}
	Add-Output -Text "Fichiers de classe générés avec succès." -color green
	
	
	Remove-Variable * -ErrorAction SilentlyContinue
	
	Stop-Transcript
	
	[System.Windows.Forms.MessageBox]::Show("Fin de l'importation des comptes", "Information", 'OK')
	$statusLabelVar.Text = "Fin de l'importation des comptes Pronote"
}


function parsecsv
{
	#Declaration des variables#
	
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$fichierprof,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$fichiereleve
		
	)
	
	
	#Declaration des variables#
	
	$pathCSVEleves = $pathRacine + "ImportationEleves.csv"
	$pathCSVProfs = $pathRacine + "ImportationProfsAdmin.csv"
	Add-Output -Text "ETAPE 1 RECHERCHE ENCODAGE DES FICHIERS ET CONVERSION" -Header
	(Get-Content -Path $fichiereleve) | ForEach-Object { ($_ -Replace 'DATE NAISS', 'DATE_NAISS') } | Set-Content -Path $fichiereleve
	$encodage_eleve = (Get-FileEncoding $fichiereleve).bodyname
	$encodage_prof = (Get-FileEncoding $fichierprof).bodyname
	
	Add-Output -Text "Fichier élève encodage en $encodage_eleve" -Color Blue
	Add-Output -Text "Fichier prof encodage en $encodage_prof" -Color Blue
	
	if ($encodage_eleve -eq "utf-8")
	{
		$encodage_eleve_corrige = "UTF8"
	}
	elseif ($encodage_eleve -eq "utf-7")
	{
		$encodage_eleve_corrige = "UTF7"
		
	}
	if ($encodage_prof -eq "utf-8")
	{
		$encodage_prof_corrige = "UTF8"
	}
	elseif ($encodage_prof -eq "utf-7")
	{
		$encodage_prof_corrige = "UTF7"
		
	}
	
	
	$csvprof = Import-Csv -LiteralPath "$fichierprof" -Delimiter ";" -Encoding $encodage_prof_corrige
	$csveleve = Import-Csv -LiteralPath "$fichiereleve" -Delimiter ";" -Encoding $encodage_eleve_corrige
	
	$logFile = $ScriptDirectory + "\ImportationLog.txt"
	
	
	$i = 0
	$line = ""
	$login = ""
	$ofs = ","
	$arrayLogin = New-Object -TypeName 'System.Collections.ArrayList'
	$arrayLogin.Add("0")
	$arrayOptions = New-Object -TypeName 'System.Collections.ArrayList'
	
	
	#Variables count des utilisateurs#
	
	[int]$countEleves = 0
	$reader = New-Object IO.StreamReader $fichiereleve
	while ($reader.ReadLine() -ne $null) { $countEleves++ }
	
	[int]$countEns = 0
	$reader = New-Object IO.StreamReader $fichierprof
	while ($reader.ReadLine() -ne $null) { $countEns++ }
	
	
	$counttotal = $countEns + $countEleves
	$progressbarconversionfichier.Maximum = $counttotal
	
	Log("start")
	
	
	New-Item -ItemType File -Path $pathCSVEleves -Force
	Add-Content -Path $pathCSVEleves -Value "PRENOM;NOM;DATE NAISSANCE;LOGIN;GROUPE;CLASSE;OPTIONS;MOT DE PASSE;" -Encoding UTF8
	
	Log("startEleve")
	#Parse du Node Eleve#
	foreach ($user in $csveleve)
	{
		$classe = $user.'classes'
		if ($classe -ne $null)
		{
			if ($classe -ne "")
			{
			
			[System.Windows.Forms.Application]::DoEvents()
			#Traitement prenoms et noms composes#
			$prenom = RemoveSpecialCaracters($user.'PRENOM')
			$nom = RemoveSpecialCaracters($user.'NOM')
			
			if ($user.'DATE_NAISS' -eq "")
			{
				$date_naiss = Get-Date -Format "dd/MM/yyyy"
			}
			else
			{
				$date_naiss = $user.'DATE_NAISS'
			}
			$login = SetLogin $prenom $nom $arrayLogin
			
			$groupes = $user.'GROUPES'
			$groupes = Remove-StringLatinCharacters $groupes
				$groupes = CleanGroupName -groupes $groupes
<#			if ($groupes -ne $null)
			{
				$groupes = $groupes.replace(' ', '')
				$groupes = $groupes.replace('_', '')
				$groupes = $groupes.replace('.', '')
				$groupes = $groupes.replace('(', '')
				$groupes = $groupes.replace(')', '')
				$groupes = $groupes.replace('/', '')
				$groupes = $groupes.replace('+', '')
				$groupes = $groupes.replace('.', '')
				$groupes = $groupes.replace('°', '')
			}#>
			$classe = $user.'classes'
			$classe = $classe.replace(' ', '')
			
			if ($classe -eq "Extérieurs")
			{
				$classe = "Extérieurs-Eleve"
			}
			#Creation de la ligne CSV#
			$line = $user.'PRENOM' + ";" + $user.'NOM' + ";" + $date_naiss + ";" + $login + ";" + "eleves" + ";" + $classe + ";" + $groupes + ";" + $date_naiss + ";"
			
			#Ajout du login pour verification homonyme#
			$arrayLogin.Add($login)
			
			#Ajout de la ligne complete dans le fichier ElevesSansAdresses.csv#
			Add-Content -Path $pathCSVEleves -Value $line -Encoding UTF8
		}
	}
		$progressbarconversionfichier.PerformStep()
	}
	
	
	Log("eleve")
	
	New-Item -ItemType File -Path $pathCSVProfs -Force
	Add-Content -Path $pathCSVProfs -Value "PRENOM;NOM;DATE NAISSANCE;LOGIN;GROUPE;CLASSE;OPTIONS;MOT DE PASSE;MATIERE;" -Encoding UTF8
	
	Log("startEns")
	
	foreach ($user in $csvprof)
	{
		[System.Windows.Forms.Application]::DoEvents()
		if (($user.'nom' -ne "") -and ($user.'prenom' -ne ""))
		{
			if ($user.'DATE_NAISS' -eq "")
			{
				$date_naiss = Get-Date -Format "dd/MM/yyyy"
			}
			else
			{
				$date_naiss = $user.'DATE_NAISS'
			}
			
			
			$matiere = $user.'DISCIPLINE'
			if ($matiere -ne $null)
			{
				if ($matiere -ne "")
				{
					
					#$matiere = $matiere.replace(' ', '')
					#$matiere = $matiere.replace('.', '')
					# Supression du dernier point sur les matieres si présent #	
					$matierefinestunpoint = $matiere.Substring($matiere.Length - 1, 1)
					
					if ($matierefinestunpoint -eq ".")
					{
						$matiere = $matiere.Substring(0, $matiere.Length - 1)
					}
				}
			}
			
			

			
			$groupes = $user.'GROUPES'
			$groupes = Remove-StringLatinCharacters $groupes
			$groupes = CleanGroupName -groupes $groupes
<#			if ($groupes -ne $null)
			{
				$groupes = $groupes.replace(' ', '')
				$groupes = $groupes.replace('_', '')
				$groupes = $groupes.replace('.', '')
				$groupes = $groupes.replace('(', '')
				$groupes = $groupes.replace(')', '')
				$groupes = $groupes.replace('/', '')
				$groupes = $groupes.replace('+', '')
				$groupes = $groupes.replace('.', '')
				$groupes = $groupes.replace('°', '')
			}#>
			
			$classe = $user.'classes'
			if ($classes -ne $null)
			{
				$classes = $classes.Replace(' ', '')
			}
			
			#Traitement prenoms et noms composes#
			$prenom = RemoveSpecialCaracters($user.'PRENOM')
			$nom = RemoveSpecialCaracters($user.'NOM')
			$login = SetLogin $prenom $nom $arrayLogin
			
			
			#Creation de la ligne CSV#
			$line = $user.'PRENOM' + ";" + $user.'NOM' + ";" + $dateNaissance + ";" + $login + ";" + "professeurs" + ";" + $classes + ";" + $groupes + ";" + $dateNaissance + ";" + $matiere + ";"
			
			#Ajout du login pour verification homonyme#
			$arrayLogin.Add($login)
			
			#Ajout de la ligne complete dans le fichier ElevesSansAdresses.csv#
			Add-Content -Path $pathCSVProfs -Value $line -Encoding UTF8
			$progressbarconversionfichier.PerformStep()
		}
		
		#RemoveXML
		Log("end")
		
		
		
	}
}



Function Log($string)
{
	$date = (Get-Date).ToString()
	$logMessage = $date + " - "
	switch ($string)
	{
		"start" { $logMessage = "`r`n##############################################`r`n# DEBUT DE IMPORTATION A $date #`r`n##############################################`r`n" }
		"startEleve" { $logMessage = $logMessage + "Debut de importation des $countEleves eleves" }
		"eleve" { $logMessage = $logMessage + "Fin de importation des eleves" }
		"startEns" { $logMessage = $logMessage + "Debut de importation des $countEns enseignants" }
		"ens" { $logMessage = $logMessage + "Fin de importation des enseignants" }
		"startAdm" { $logMessage = $logMessage + "Debut de importation des $countAdm administratifs" }
		"adm" { $logMessage = $logMessage + "Fin de importation des administratifs" }
		"end" { $logMessage = "`r`n##############################################`r`n#  FIN DE IMPORTATION A $date  #`r`n##############################################" }
		default { $logMessage = $logMessage + "Une erreur est survenue : " + $string }
	}
	
	$logMessage >> $logFile
}



$formImportationPronoteEl_Load = {
	#TODO: Initialize Form Controls here
	$buttonImportation.Visible = $false
	$progressbarimportation.Visible = $false
	$progressbarconversionfichier.Visible = $false
	$progressbarancienuser.Visible = $false
	$labelDéplacementDesAncien.Visible = $false
	$richtextboxretourimport.Text = ""
	$labelImportationDesCompte.visible = $false
	$labelconversioncsv.Visible = $false
	$labelCréationDesOU.Visible = $false
	$progressbarOU.Visible = $false
}


$buttonFichierEleve_Click = {
	#TODO: Place custom script here
	if ($global:repertoire_initial -eq "")
	{
		$global:repertoire_initial = $ScriptDirectory
	}
	try
	{
		$fichier_csv_eleves = selection_fichier_csv  $global:repertoire_initial
	}
	catch { }
	$textboxcheminfichiereleve.Text = $fichier_csv_eleves
	if (-not ($textboxcheminfichierprof.Text -eq ""))
	{
		$buttonImportation.Visible = $true
		
	}
}

$buttonFichierNomenclature_Click = {
	#TODO: Place custom script here
	$fichier_nomenclature = selection_fichier_csv  $ScriptDirectory
	$textboxcheminfichiernomenclature.Text = $fichier_nomenclature
}




Function Add-Output
{
	Param (
		[parameter(Mandatory)]
		[String]$Text,
		[ValidateSet('Green', 'Red', 'Black', 'Blue', 'Magenta')]
		[String]$Color,
		[Switch]$Header
	)
	$C = Switch ($Color)
	{
		'Green'  { 'Green' }
		'Red'    { 'Red' }
		'Black'  { 'Black' }
		'Blue'  { 'Blue' }
		'Magenta'  { 'Magenta' }
		Default { 'Black' }
	}
	if ($Header)
	{
		$Text = $Text + "`n" + ('_' * ($Text.Length - 1))
		
		$oldFont = $richtextboxretourimport.Font
		$richtextboxretourimport.SelectionFont = New-Object Drawing.Font($oldFont.FontFamily, $oldFont.Size, [Drawing.FontStyle]::Bold)
		$richtextboxretourimport.SelectionColor = "Red"
		$richtextboxretourimport.AppendText("`n`n$Text`n")
	}
	else
	{
		$oldFont = $richtextboxretourimport.Font
		$richtextboxretourimport.SelectionFont = New-Object Drawing.Font($oldFont.FontFamily, $oldFont.Size, [Drawing.FontStyle]::Regular)
		$richtextboxretourimport.SelectionColor = "$C"
		$richtextboxretourimport.AppendText("`n$Text`n")
	}
}


$buttonImportation_Click = {
	#TODO: Place custom script here

	$richtextboxretourimport.Clear()
	[string]$nom_serveur = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name nom_serveur -ErrorAction SilentlyContinue).nom_serveur
	[string]$nom_serveur2 = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name nom_serveur2 -ErrorAction SilentlyContinue).nom_serveur2
	if ($nom_serveur2 -ne "")
	{
		$serveurencours = $env:computername
		$fqdnserveur1 = "$($nom_serveur).$domaine"
		$fqdnserveur2 = "$($nom_serveur2).$domaine"
		if ($serveurencours -eq $nom_serveur)
		{
			$s = New-PSSession -ComputerName $fqdnserveur2
		}
		elseif ($serveurencours -eq $nom_serveur2)
		{
			$s = New-PSSession -ComputerName $fqdnserveur1
		}
	}
	else
	{
		$s = "vide"
	}
	

	
	
	# Charger le contenu du fichier CSV des élèves dans un objet PowerShell
	$objetCsvEleves = Import-Csv -Path $textboxcheminfichiereleve.Text
	
	# Compter le nombre d'élèves dans le fichier CSV (en soustrayant 1 pour l'en-tête)
	$nombreEleves = $objetCsvEleves.Count - 1
	
	# Charger le contenu du fichier CSV des professeurs dans un objet PowerShell
	$objetCsvProfesseurs = Import-Csv -Path $textboxcheminfichierprof.Text
	
	# Compter le nombre de professeurs dans le fichier CSV (en soustrayant 1 pour l'en-tête)
	$nombreProfesseurs = $objetCsvProfesseurs.Count - 1
	
	# Lire le nombre d'utilisateurs présents
	$nombreProfesseursPresents = (Get-ADGroupMember "professeurs").Count
	$nombreElevesPresents = (Get-ADGroupMember "eleves").Count
	
	# Vérifier les conditions et demander confirmation de l'utilisateur si nécessaire
	if ($nombreEleves -lt ($nombreElevesPresents - 50))
	{
		$message = "Il y a $nombreElevesPresents élèves actuellement présents et $nombreEleves élèves dans le fichier d'import, le fichier csv ne semble pas bon êtes vous sur de vouloir continuer ?"
		$caption = "Confirmation"
		$icon = [System.Windows.Forms.MessageBoxIcon]::Exclamation
		$buttons = [System.Windows.Forms.MessageBoxButtons]::YesNo
		
		$result = [System.Windows.Forms.MessageBox]::Show($message, $caption, $buttons, $icon)
		
		if ($result -ne [System.Windows.Forms.DialogResult]::Yes)
		{
			return
		}
	}
	
	if ($nombreProfesseurs -lt ($nombreProfesseursPresents - 20))
	{
		$message = "Il y a $nombreProfesseursPresents professeurs actuellement présents et $nombreProfesseurs professeurs dans le fichier d'import, le fichier csv ne semble pas bon êtes vous sur de vouloir continuer ?"
		$caption = "Confirmation"
		$icon = [System.Windows.Forms.MessageBoxIcon]::Exclamation
		$buttons = [System.Windows.Forms.MessageBoxButtons]::YesNo
		
		$result = [System.Windows.Forms.MessageBox]::Show($message, $caption, $buttons, $icon)
		
		if ($result -ne [System.Windows.Forms.DialogResult]::Yes)
		{
			return
		}
	}
	
	
	$progressbarancienuser.Value = 0
	$progressbarOU.Value = 0
	$progressbarimportation.Value = 0
	parsecsv -fichiereleve $textboxcheminfichiereleve.Text -fichierprof $textboxcheminfichierprof.Text
	$pathCSV = $chemin_appli + "\ImportationEleves.csv"
	deplacementuser -fichiercsv $pathCSV -session $s
	creationOU -fichiercsvconverti $pathCSV
	importationcsv -fichiercsv $pathCSV -session $s
	$statusLabelVar.text = "Importation des comptes élèves terminéé"
	#[System.Windows.Forms.MessageBox]::Show("Info: Importation terminée", "Information")
}


$buttonFichierProf_Click = {
	#TODO: Place custom script here
	if ($global:repertoire_initial -eq "")
	{
		$global:repertoire_initial = $ScriptDirectory
	}
	try
	{
		$fichier_csv_prof = selection_fichier_csv  $global:repertoire_initial
	}
	catch { }
	$textboxcheminfichierprof.text = $fichier_csv_prof
	if (-not ($textboxcheminfichiereleve.Text -eq ""))
	{
		$buttonImportation.Visible = $true
		
	}
}



Function RemoveSpecialCaracters($string)
{
	$string = Remove-StringLatinCharacters($string)
	$string = $string.ToLower()
	$string = ($string -split ('-'))[0]
	$string = ($string -split (' '))[0]
	$string = $string -replace '[^a-z]'
	
	return $string
}





$textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$textboxcheminfichierprof_TextChanged = {
	#TODO: Place custom script here
	
}

$textboxcheminfichiereleve_TextChanged = {
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>