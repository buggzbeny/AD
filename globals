#--------------------------------------------
# Declare Global Variables and Functions here
#--------------------------------------------


# Fonctions pour l'initialisation 
function install_role_ad
{
	# Installer les rôles sélectionnés
	# Installer les rôles sélectionnés
	if ((Get-WindowsFeature -Name AD-Domain-Services).Installed -ne $true)
	{
		Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
	}
	
	if ((Get-WindowsFeature -Name DHCP).Installed -ne $true)
	{
		Install-WindowsFeature -Name DHCP -IncludeManagementTools
	}
	
	if ((Get-WindowsFeature -Name DNS).Installed -ne $true)
	{
		Install-WindowsFeature -Name DNS -IncludeManagementTools
	}
	
	if ((Get-WindowsFeature -Name FS-DFS-Namespace).Installed -ne $true)
	{
		Install-WindowsFeature -Name FS-DFS-Namespace -IncludeManagementTools
	}
	
	if ((Get-WindowsFeature -Name FS-FileServer).Installed -ne $true)
	{
		Install-WindowsFeature -Name FS-FileServer -IncludeManagementTools
	}
	
	if ((Get-WindowsFeature -Name FS-Resource-Manager).Installed -ne $true)
	{
		Install-WindowsFeature -Name FS-Resource-Manager -IncludeManagementTools
	}
	
	# Configurer les rôles installés avec les paramètres spécifiés
	
	Install-ADDSForest `
					   -DomainName $domainName `
					   -SafeModeAdministratorPassword (ConvertTo-SecureString "P@ssw0rd" -AsPlainText -Force) `
					   -InstallDns:$true
	
	
	
	Add-DhcpServerv4Scope `
						  -Name "DHCP Scope" `
						  -StartRange $dhcpScope.Split("-")[0] `
						  -EndRange $dhcpScope.Split("-")[1] `
						  -SubnetMask "255.255.255.0" `
						  -State "Active"
	
	
	
	Set-DnsServerForwarder -IPAddress $dnsForwarders.Split(",") -Verbose
	
	
	
}


function Verifier-IP
{
	# Définir l'expression régulière pour une adresse IP
	$ipRegex = "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})$"
	
	# Vérifier chaque TextBox
	foreach ($textBox in @($textbox_adresseIP, $textbox_IP_masque, $textbox_IP_wan, $textbox_IP_fog, $textbox_IP_depart, $textbox_IP_fin, $textbox_IP_exclu_depart, $textbox_IP_exclu_fin, $textbox_IP_DNS1, $textbox_IP_DNS2, $textbox_IP_DNS3))
	{
		$ip = $textBox.Text
		
		# Vérifier si l'adresse IP est valide
		if ($ip -notmatch $ipRegex)
		{
			return $false, $textBox.Name
		}
	}
	
	return $true, ""
}

function parametrage_dhcp
{
	#Restart-Service DhcpServer
	
	$IP_depart = $textbox_IP_depart
	$IP_fin = $textbox_IP_fin
	$masque = $textbox_IP_masque
	$etendue = $textbox_adresseIP
	$IP_depart_exclusion = $textbox_IP_exclu_depart
	$IP_fin_exclusion = $textbox_IP_exclu_fin
	$IP_FOG = $textbox_IP_fog
	$IP_wan = $textbox_IP_wan
	$IP_DNS1 = $textbox_IP_DNS1
	$IP_DNS2 = $textbox_IP_DNS2
	$IP_DNS3 = $textbox_IP_DNS3
	
	
	Add-DhcpServerv4Scope -Name "Réseau pédagogique" -StartRange $IP_depart -EndRange $IP_fin -SubnetMask $masque -State Active
	Add-DhcpServerv4ExclusionRange -ScopeID $etendue -StartRange $IP_depart_exclusion -EndRange $IP_fin_exclusion
	Set-DhcpServerv4OptionValue -ScopeId $etendue -DnsServer "$IP_DNS1", "$IP_DNS2" -WinsServer $IP_DNS1 -DnsDomain $nom_domaine -Router $IP_wan
	Set-DhcpServerv4OptionValue -OptionId 66 -Value $IP_FOG -ComputerName $PDC
	Set-DhcpServerv4OptionValue -OptionId 67 -Value "undionly.kpxe" -ComputerName $PDC
	Add-DhcpServerv4OptionDefinition -Name "TFTP Server" -description "Option Serveur TFTP" -OptionId 150 -Type IPv4Address
	
	Restart-Service DhcpServer
	
	Add-DhcpServerv4Class -ComputerName $PDC -Name "PXEClient (UEFI x86)" -Description "PXEClient (UEFI x86)" -type Vendor -Data "PXEClient:Arch:00006"
	Add-DhcpServerv4Class -ComputerName $PDC -Name "PXEClient (BIOS x86 & x64)" -Description "PXEClient (BIOS x86 & x64)" -type Vendor -Data "PXEClient:Arch:00000"
	Add-DhcpServerv4Class -ComputerName $PDC -Name "PXEClient (UEFI x64)" -Description "PXEClient (UEFI x64)" -type Vendor -Data "PXEClient:Arch:00007"
	
	Restart-Service DhcpServer
	
	Add-DhcpServerv4Policy -Name "PXEClient (BIOS x86 & x64)" -ScopeId $etendue -Condition OR -VendorClass EQ, "PXEClient (BIOS x86 & x64)*" -Description "Strategie de boot PXE pour BIOS Legacy"
	Add-DhcpServerv4Policy -Name "PXEClient (UEFI x64)" -ScopeId $etendue -Condition OR -VendorClass EQ, "PXEClient (UEFI x64)*" -Description "Strategie de boot PXE UEFI (x64)"
	Add-DhcpServerv4Policy -Name "PXEClient (UEFI x86)" -ScopeId $etendue -Condition OR -VendorClass EQ, "PXEClient (UEFI x86)*" -Description "Strategie de boot PXE UEFI (x86)"
	
	
	Restart-Service DhcpServer
	
	Set-DhcpServerv4OptionValue -OptionId 66 -Value $IP_FOG -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (BIOS x86 & x64)"
	Set-DhcpServerv4OptionValue -OptionId 67 -Value "undionly.kpxe" -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (BIOS x86 & x64)"
	Set-DhcpServerv4OptionValue -OptionId 66 -Value $IP_FOG -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (UEFI x64)"
	Set-DhcpServerv4OptionValue -OptionId 67 -Value "ipxe.efi" -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (UEFI x64)"
	Set-DhcpServerv4OptionValue -OptionId 150 -Value $IP_FOG -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (UEFI x64)"
	Set-DhcpServerv4OptionValue -OptionId 66 -Value $IP_FOG -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (UEFI x86)"
	Set-DhcpServerv4OptionValue -OptionId 67 -Value "i386-efi/ipxe.efi" -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (UEFI x86)"
	Set-DhcpServerv4OptionValue -OptionId 46 -value "0x8" -ComputerName $PDC -ScopeId $etendue
	Set-DhcpServerv4OptionValue -OptionId 150 -Value $IP_FOG -ComputerName $PDC -ScopeId $etendue -PolicyName "PXEClient (UEFI x86)"
	Set-DhcpServerv4DnsSetting -ComputerName $PDC -DynamicUpdates "Always" -DeleteDnsRRonLeaseExpiry $True
	Set-DhcpServerv4FilterList -ComputerName $PDC -Deny $True
	
	
}

function install_ADDS
{
	
	$DomainNameDNS = "$($textbox_nomdomaine).$($textbox_extension)"
	$DomainNameNetbios = $textbox_nomdomaine.ToUpper()
	
	$ForestConfiguration = @{
		'-DatabasePath'		    = 'C:\Windows\NTDS';
		'-DomainMode'		    = 'Default';
		'-DomainName'		    = $DomainNameDNS;
		'-DomainNetbiosName'    = $DomainNameNetbios;
		'-ForestMode'		    = 'Default';
		'-InstallDns'		    = $true;
		'-LogPath'			    = 'C:\Windows\NTDS';
		'-NoRebootOnCompletion' = $false;
		'-SysvolPath'		    = 'C:\Windows\SYSVOL';
		'-Force'			    = $true;
		'-SafeModeAdministratorPassword' = (ConvertTo-SecureString "$textbox_mdp_admin" -AsPlainText -Force);
		'-CreateDnsDelegation'  = $false
	}
	
	Import-Module ADDSDeployment
	Install-ADDSForest @ForestConfiguration
	
	
	
	
	
}

function check_config_reseau($nomserveur)
{

		
	
	if ($nomserveur -eq $textbox_nom_serveur_2.text)
	{
		$username = "administrateur"
		$password = ConvertTo-SecureString $textbox_mdp_admin -AsPlainText -Force
		$cred = New-Object System.Management.Automation.PSCredential($username, $password)
		$session = New-PSSession -ComputerName $nomserveur -Credential $cred
		
		$scriptBlock = {
			$IpConfig = Get-NetIPConfiguration
			$test = Get-NetIPInterface -ifindex $IpConfig.InterfaceIndex | select ifIndex, ifAlias, Dhcp, AddressFamily
			
			if ($test.dhcp -eq "disable")
			{
				$dhcpStatus = "statique"
			}
			else
			{
				$dhcpStatus = "DHCP"
			}
			
			return $dhcpStatus
		}
		
		$config = Invoke-Command -Session $session -ScriptBlock $scriptBlock
		
		
	}
	else
	{
		
		$IpConfig = Get-NetIPConfiguration
		$test = Get-NetIPInterface -ifindex $IpConfig.InterfaceIndex | select ifIndex, ifAlias, Dhcp, AddressFamily
		
		if ($test.dhcp -eq "disable")
		{
			$dhcpStatus = "statique"
		}
		else
		{
			$dhcpStatus = "DHCP"
		}
		$config = $dhcpStatus
	}
	

	return $config
	
	
}

function check_role
{
	
	param (
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$nomrole,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$nameserveur
	)
	(get-windowsfeature -ComputerName $nameserveur | where name -eq $nomrole).Installstate
}

function creer_userimportauto_useroutil
{
	
	#/////////////////////////////////////
	#
	#   CREATION DE L'UTILISATEUR IMPORTAUTOMATIQUE PERMETTANT DE PROTEGER ET FILTRER
	#
	#////////////////////////////////////
	
	
	$ExistingADUserimportauto = Get-ADUser -Filter "SamAccountName -eq 'importautomatique'"
	
	# Si l'utilisateur n'existe pas alors on le créé
	if ($null -eq $ExistingADUserimportauto)
	{
		New-AdUser -Name "Import Automatique" -GivenName "Import" -Surname "Automatique" -SamAccountName "importautomatique" -Path "CN=users,$OU_base" -Enabled $false -AccountPassword (ConvertTo-SecureString "P@ssw0rd" -AsPlainText -force) -Description "Utilisateur userlog pour journalisation des connexions" -passThru
		Get-ADUser -Identity "importautomatique" | Set-ADObject -ProtectedFromAccidentalDeletion:$true
		
	}
	
	
	
	$ExistingADUseradminoutil = Get-ADUser -Filter "SamAccountName -eq 'admin.outil'"
	# Définir les paramètres de l'utilisateur
	$username = "admin.outil"
	$password = ConvertTo-SecureString "!PassWord!" -AsPlainText -Force
	$group = "admins du domaine"
	$description = "Utilisateur admin pour usage d'outils distants EannaAD"
	
	# Créer l'utilisateur dans le domaine
	New-ADUser -Name $username `
			   -GivenName "admin" `
			   -Surname "outil" `
			   -AccountPassword $password `
			   -displayname $username `
			   -UserPrincipalName $username `
			   -SamAccountName $username `
			   -Enabled $true `
			   -CannotChangePassword $true `
			   -PasswordNeverExpires $true `
			   -Description $description `
			   -Path "CN=users,$OU_base"
	
	
	#Protege contre suppression accidentelle 
	Get-ADUser -Identity "admin.outil" | Set-ADObject -ProtectedFromAccidentalDeletion:$true
	
	
	# Ajouter l'utilisateur au groupe "admins"
	Add-ADGroupMember -Identity $group -Members $username
}


function creer_oubase
{
	
	
	New-ADOrganizationalUnit -Name $ou_groupes -Path $OU_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	New-ADOrganizationalUnit -Name $OU_utilisateur -Path $OU_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	
	New-ADOrganizationalUnit -Name $OU_classes -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	
	New-ADOrganizationalUnit -Name "Options" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	
	New-ADOrganizationalUnit -Name "Classes" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	New-ADOrganizationalUnit -Name "Matieres" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	New-ADOrganizationalUnit -Name "Examen" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	New-ADOrganizationalUnit -Name "Invités" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	New-ADOrganizationalUnit -Name "Ordinateurs" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	New-ADOrganizationalUnit -Name "Professeur-classe" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	New-ADOrganizationalUnit -Name $OU_TEMP -Path $OU_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	
	New-ADOrganizationalUnit -Name $OU_prof -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	
	New-ADOrganizationalUnit -Name $OU_admin -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
	New-ADOrganizationalUnit -Name $OU_invites -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	New-ADOrganizationalUnit -Name $ou_agents -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	New-ADOrganizationalUnit -Name $ou_examens -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	
	
}


function mep_replication_dfs
{
	param (
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$nameserveur1,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$nameserveur2,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$domaine
	)
	
	#New-Item -Path "C:\DFSRoots\partages" -ItemType Directory
	#New-SMBShare -Name "partages" -Path "C:\DFSRoots\partages" -FullAccess 'Tout le monde'
	New-DfsnRoot -Path "\\$domaine\partages" -Type DomainV2 -TargetPath "\\$nameserveur1\partages" -EnableAccessBasedEnumeration $True
	New-DfsReplicationGroup -GroupName "Partages utilisateurs" | New-DfsReplicatedFolder -FolderName "Partages" | Add-DfsrMember -ComputerName $nameserveur1, $nameserveur2 | Format-Table dnsname, groupname -auto -wrap
	
	Add-DfsrConnection -GroupName "Partages utilisateurs" -SourceComputerName $nameserveur1 -DestinationComputerName $nameserveur2 | Format-Table *name -wrap -autosize
	
	Set-DfsrMembership -GroupName "Partages utilisateurs" -FolderName "Partages" -ContentPath "$($lecteur_donnees)\Partages" -ComputerName $nameserveur1 -PrimaryMember $True -StagingPathQuotaInMB 16384 -Force | Format-Table *name, *path, primary* -autosize -wrap
	
	Set-DfsrMembership -GroupName "Partages utilisateurs" -FolderName "Partages" -ContentPath "$($lecteur_donnees)\Partages" -ComputerName $nameserveur2 -StagingPathQuotaInMB 16384 -Force | Format-Table *name, *path, primary* -autosize -wrap
	
	Set-DfsReplicatedFolder -GroupName "Partages utilisateurs" -FolderName * -FileNameToExclude "~*, *.bak, *.tmp, matiere-*.lnk, classe-*.lnk" -DirectoryNameToExclude "Groupes, Classes"
	
	New-DfsnRoot -TargetPath "\\$nameserveur1\profils_itinerants" -Type DomainV2 -Path "\\$domaine\profils_itinerants"
	new-DfsnRootTarget -Path "\\$domaine\profils_itinerants" -TargetPath "\\$nameserveur2\profils_itinerants"
	
}


function creer_oubase2
{
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_groupe'"))
	{
		New-ADOrganizationalUnit -Name $ou_groupes -Path $OU_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_utilisateur_base'"))
	{
		New-ADOrganizationalUnit -Name $OU_utilisateur -Path $OU_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_utilisateur_base_eleve'"))
	{
		New-ADOrganizationalUnit -Name $OU_classes -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_groupe_options'"))
	{
		
		New-ADOrganizationalUnit -Name "Options" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
		
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_groupe_classes'"))
	{
		
		New-ADOrganizationalUnit -Name "Classes" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
		
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_groupe_matieres'"))
	{
		
		New-ADOrganizationalUnit -Name "Matieres" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_groupe_examens'"))
	{
		
		New-ADOrganizationalUnit -Name "Examen" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_groupe_invites'"))
	{
		
		New-ADOrganizationalUnit -Name "Invités" -Path $OU_groupe -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_TEMP_base'"))
	{
		
		New-ADOrganizationalUnit -Name $OU_TEMP -Path $OU_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_utilisateur_base_prof'"))
	{
		New-ADOrganizationalUnit -Name $OU_prof -Path $OU_utilisateur_base
	}
	
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_utilisateur_base_admin'"))
	{
		New-ADOrganizationalUnit -Name $OU_admin -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$OU_utilisateur_base_invites'"))
	{
		New-ADOrganizationalUnit -Name $OU_invites -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$ou_utilisateur_base_agents'"))
	{
		New-ADOrganizationalUnit -Name $ou_agents -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
	
	if (-not (Get-ADOrganizationalUnit -Filter "distinguishedName -eq '$ou_utilisateur_base_examens'"))
	{
		New-ADOrganizationalUnit -Name $ou_examens -Path $OU_utilisateur_base -ProtectedFromAccidentalDeletion $true -ManagedBy "Importautomatique"
	}
}

function creer_groupbase
{
	
	#/////////////////////////////////////
	#
	#   CREATION DES GROUPES DE BASE
	#
	#////////////////////////////////////
	
	
	# Pour chaque groupe de base, teste l'existance et le crée si besoin
	$groupe_base = "$nom_eleves,$nom_professeurs,$nom_administratifs,$nom_invites,$nom_agents,$nom_examens"
	
	$groupe_base.Split(",") | ForEach {
		$GroupExists = Get-ADGroup -Filter 'Name -eq $_' -ErrorAction Continue
		
		if (-not ($GroupExists -ne $NULL))
		{
			New-ADGroup -Name $_ -Path $OU_groupe -Description "Groupe $_" -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
		}
	}
	
}


function check_service
{
	
	param (
		[Parameter(Mandatory = $true)]
		[string]$servicename
	)
	(Get-Service | where name -eq $serviceName).status
}


function MEP_profils_base_V6
{
	
	$rep_profil_base = "$rep\config\Profils_base"
	
<#	if (-not (Test-Path -Path "$($rep_profils)\$($nom_professeurs).V6"))
	{
		New-Item -Path "$($rep_profils)\$($nom_professeurs).V6" -ItemType Directory
		Copy-Item -Path "$($rep_profil_base)\$($nom_professeurs).V6" -Destination "$($rep_profils)\$($nom_professeurs).V6" -Recurse
		
	}
	if (-not (Test-Path -Path "$($rep_profils)\$($nom_eleves).V6"))
	{
		New-Item -Path "$($rep_profils)\$($nom_eleves).V6" -ItemType Directory
	}
	if (-not (Test-Path -Path "$($rep_profils)\$($nom_administratifs).V6"))
	{
		New-Item -Path "$($rep_profils)\$($nom_administratifs).V6" -ItemType Directory
	}
	if (-not (Test-Path -Path "$($rep_profils)\$($nom_agents).V6"))
	{
		New-Item -Path "$($rep_profils)\$($nom_agents).V6" -ItemType Directory
	}
	if (-not (Test-Path -Path "$($rep_profils)\$($nom_examens).V6"))
	{
		New-Item -Path "$($rep_profils)\$($nom_examens).V6" -ItemType Directory
	}
	if (-not (Test-Path -Path "$($rep_profils)\$($nom_invites).V6"))
	{
		New-Item -Path "$($rep_profils)\$($nom_invites).V6" -ItemType Directory
	}#>
	
	
	foreach ($nom_groupe in $groupe_base_ckeck)
	{
		$destination = Join-Path -Path $rep_profils -ChildPath "$nom_groupe.V6"
		
		if (-not (Test-Path -Path $destination))
		{
			New-Item -Path $destination -ItemType Directory
			Copy-Item -Path "$rep_profil_base\$nom_groupe.V6" -Destination $destination -Recurse
		}
	}
}




function creer_repbase
{
	
	if (-not (Test-Path -Path $rep_profils))
	{
		New-Item -Path $rep_profils -ItemType Directory
	}

	
	
	if (-not (Test-Path -Path $rep_partages))
	{
		New-Item -Path $rep_partages -ItemType Directory
	}
	
	
	
	if (-not (Test-Path -Path "$($rep_partages)\Profils_itinerants"))
	{
		New-Item -Path "$($rep_partages)\Profils_itinerants" -ItemType Directory
		if (!(Get-SMBShare -Name "profil_itinerants" -ea 0))
		{
			New-SMBShare -Name "profils_itinerants" -Path "$($rep_partages)\Profils_itinerants" -FullAccess "Tout le monde" -ea 0 | Out-Null
		}
	}
	
	
	
	if (-not (Test-Path -Path $rep_matieres))
	{
		New-Item -Path $rep_matieres -ItemType Directory
	}
	
	
	if (-not (Test-Path -Path $rep_options))
	{
		New-Item -Path $rep_options -ItemType Directory
		
	}
	
	if (-not (Test-Path -Path $rep_perso_base))
	{
		New-Item -Path $rep_perso_base -ItemType Directory
	}
	
	
	if (-not (Test-Path -Path $rep_imports))
	{
		New-Item -Path $rep_imports -ItemType Directory
	}
	
	if (-not (Test-Path -Path $rep_ancien))
	{
		New-Item -Path $rep_ancien -ItemType Directory
	}
	
}


function creer_repbase2
{
	
	Invoke-Command -Session $s {
		
		if (-not (Test-Path -Path $using:rep_profils))
		{
			New-Item -Path $using:rep_profils -ItemType Directory
		}
		
		
		
		if (-not (Test-Path -Path $using:rep_partages))
		{
			New-Item -Path $using:rep_partages -ItemType Directory
		}
		
		
		
		if (-not (Test-Path -Path "$($using:rep_partages)\Profils_itinerants"))
		{
			New-Item -Path "$($using:rep_partages)\Profils_itinerants" -ItemType Directory
			if (!(Get-SMBShare -Name "profil_itinerants" -ea 0))
			{
				New-SMBShare -Name "profils_itinerants" -Path "$($using:rep_partages)\Profils_itinerants" -FullAccess "Tout le monde" -ea 0 | Out-Null
			}
		}
		
		
		
		if (-not (Test-Path -Path $using:rep_matieres))
		{
			New-Item -Path $using:rep_matieres -ItemType Directory
		}
		
		
		if (-not (Test-Path -Path $using:rep_options))
		{
			New-Item -Path $using:rep_options -ItemType Directory
			
		}
		
		if (-not (Test-Path -Path $using:rep_perso_base))
		{
			New-Item -Path $using:rep_perso_base -ItemType Directory
		}
		
		
		if (-not (Test-Path -Path $using:rep_imports))
		{
			New-Item -Path $using:rep_imports -ItemType Directory
		}
		
		if (-not (Test-Path -Path $using:rep_ancien))
		{
			New-Item -Path $using:rep_ancien -ItemType Directory
		}
	}
}



function mep_reinitmdp
{
	$ExistingADgroupreinitmdp = Get-ADGroup -Filter 'Name -eq "ReinitialisationMDP"' -ErrorAction Continue
	
	# Si le groupe n'existe pas alors on le créé
	if ($null -eq $ExistingADgroupreinitmdp)
	{
		New-ADGroup -Name 'ReinitialisationMDP' -Path "CN=users,$OU_base" -Description "Groupe des personnes ayant les droit de réinitialiser les mdp prof /admin" -GroupCategory Security -GroupScope Universal -managedby "Importautomatique"
	}
	
}


function copie_SmbLocalization
{
	param (
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$nomserveur)
	
	
	$ScriptDirectory = Get-ScriptDirectory
	$modulentfs = "Microsoft.PowerShell.Core\FileSystem::$($ScriptDirectory)\config\Module_powershell\SmbLocalization\fr-FR\"
	$destination = "Microsoft.PowerShell.Core\FileSystem::\\$nomserveur\c$\Windows\System32\WindowsPowerShell\v1.0\Modules\SmbShare\"
	Copy-Item -path $modulentfs -Destination $destination -Recurse -Force
	
	
}


function copiemodulentfs
{
	param (
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$nomserveur)
	
	$ScriptDirectory = Get-ScriptDirectory
	$modulentfs = "Microsoft.PowerShell.Core\FileSystem::$($ScriptDirectory)\config\Module_powershell\ntfssecurity\"
	$destination = "Microsoft.PowerShell.Core\FileSystem::\\$nomserveur\c$\Program Files\WindowsPowerShell\Modules\"
	Copy-Item -path $modulentfs -Destination $destination -Recurse -Force
	
}


function mep_tache_planifiee_sauvegarde
{
	
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		$mdpadmin
	)
	
	$ScriptDirectory = Get-ScriptDirectory
	$lettre_lecteur = $lecteur_donnees.SubString(0, 1)
	(Get-Content -Path $ScriptDirectory\config\sauvegarde\sauvegarde.bat) | ForEach-Object { ($_ -Replace 'remplacement1', $lecteur_donnees) } | Set-Content $ScriptDirectory\config\sauvegarde\sauvegarde.bat
	(Get-Content -Path $ScriptDirectory\config\sauvegarde\sauvegarde.bat) | ForEach-Object { ($_ -Replace 'remplacement2', $serveur1) } | Set-Content $ScriptDirectory\config\sauvegarde\sauvegarde.bat
	(Get-Content -Path $ScriptDirectory\config\sauvegarde\sauvegarde.bat) | ForEach-Object { ($_ -Replace 'remplacement3', $nom_serveur2) } | Set-Content $ScriptDirectory\config\sauvegarde\sauvegarde.bat
	(Get-Content -Path $ScriptDirectory\config\sauvegarde\sauvegarde.bat) | ForEach-Object { ($_ -Replace 'remplacement4', $ScriptDirectory) } | Set-Content $ScriptDirectory\config\sauvegarde\sauvegarde.bat
	(Get-Content -Path $ScriptDirectory\config\sauvegarde\sauvegarde.bat) | ForEach-Object { ($_ -Replace 'remplacement5', $lettre_lecteur) } | Set-Content $ScriptDirectory\config\sauvegarde\sauvegarde.bat
	(Get-Content -Path $ScriptDirectory\config\sauvegarde\sauvegarde.bat) | ForEach-Object { ($_ -Replace 'remplacement6', $chemin_appli) } | Set-Content $ScriptDirectory\config\sauvegarde\sauvegarde.bat
	
	Register-ScheduledTask -Xml (get-content $ScriptDirectory\config\sauvegarde\Sauvegarde_vers_PDC2.xml | out-string) -TaskName "Sauvegarde vers PDC2" -User $domaine\administrateur -Password $mdpadmin -Force
	
	
	
}



# Fonctions pour organisation poste

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterCIMProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


function refresh_salle
{
	$OUTreemachine = (Get-ADOrganizationalUnit -searchbase "$OU_postes" -SearchScope OneLevel -Filter * -Properties name | Sort-Object | Select-Object -Property name).name
	$Global:OriginalData2 = $OUTreemachine
	If ($null -eq $OUTreemachine)
	{
		$InfoMessage = 'Attention: Aucune salle de créée'
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsalle -Items $OUTreemachine
		
	}
	$textboxsalle.Text = ""
}

function update_posteini
{
	
	$pathposteini = "$chemin_gpo_description\postes.ini"
	New-Item -ItemType File -Path $pathposteini -Force
	Add-Content -Path $pathposteini -Value "[POSTES]"
	Get-ADOrganizationalUnit -SearchBase $OU_postes -filter '*' -SearchScope OneLevel | select name, DistinguishedName |
	
	foreach{
		
		$nom_salle = $_.Name
		$dn_salle = $_.DistinguishedName
		Get-ADComputer -searchbase $dn_salle -Filter * | ForEach-Object {
			$nompc = $_.name
			Add-Content -Path $pathposteini -Value "$nompc=$nom_salle"
		}
		
	}
	if (Test-Path -Path "$ScriptDirectory\config\donnees_appli\")
	{
		Copy-Item -path $pathposteini -Destination "$ScriptDirectory\config\donnees_appli\" -Force
	}
	else
	{
		New-Item -Path "$ScriptDirectory\config\donnees_appli\" -ItemType Directory
		Copy-Item -path $pathposteini -Destination "$ScriptDirectory\config\donnees_appli\" -Force
	}
	
}

function refresh_datagridview
{
	$datagridviewPC.Rows.Clear()
	
	$computers = Get-ADComputer -Filter * -SearchBase $OU_postes -SearchScope Subtree -Properties description
	
	
	# Parcourir tous les ordinateurs et récupérer le nom et le nom de l'OU
	foreach ($computer in $computers)
	{
		$dn = $computer.DistinguishedName
		$OU = $dn.Split(',')[1].Split('=')[1]
		$nompc = $computer.name
		
		
		$description = $computer.Description
		
		# Déterminer la valeur à ajouter à la colonne type_pc en fonction de la description
		if ($description -match "\[Poste Prof\]")
		{
			$type_pc = "Poste prof"
		}
		else
		{
			$type_pc = "Poste élève"
		}
		
		$nouvelleLigne = $datagridviewPC.Rows.Add()
		$datagridviewPC.Rows[$nouvelleLigne].Cells["nom_pc"].Value = $nompc
		$datagridviewPC.Rows[$nouvelleLigne].Cells["nom_ou"].Value = $OU
		$datagridviewPC.Rows[$nouvelleLigne].Cells["type_pc"].Value = $type_pc
	}
	# tri de la DataGridView par la colonne "Nom"
	$datagridviewPC.Sort($datagridviewPC.Columns["nom_ou"], [System.ComponentModel.ListSortDirection]::Ascending)
	
	
	
}

function refresh_datagridviewsalle
{
	$datagridviewPCsalle.Rows.Clear()
	
	$nom_salle = $comboboxsalle.SelectedItem.ToString()
	$OU_salle = "OU=$nom_salle,$($OU_postes)"
	
	
	$computers = Get-ADComputer -Filter * -SearchBase $OU_salle -SearchScope Subtree -Properties description
	
	
	# Parcourir tous les ordinateurs et récupérer le nom et le nom de l'OU
	foreach ($computer in $computers)
	{
		
		$nompc = $computer.name
		
		
		$description = $computer.Description
		
		# Déterminer la valeur à ajouter à la colonne type_pc en fonction de la description
		if ($description -match "\[Poste Prof\]")
		{
			$type_pc = "Poste prof"
		}
		else
		{
			$type_pc = "Poste élève"
		}
		
		$nouvelleLigne = $datagridviewPCsalle.Rows.Add()
		$datagridviewPCsalle.Rows[$nouvelleLigne].Cells["nom_pc_salle"].Value = $nompc
		$datagridviewPCsalle.Rows[$nouvelleLigne].Cells["type_pc_salle"].Value = $type_pc
	}
	# tri de la DataGridView par la colonne "Nom"
	$datagridviewPCsalle.Sort($datagridviewPCsalle.Columns["nom_pc_salle"], [System.ComponentModel.ListSortDirection]::Ascending)
	
	$count = $datagridviewPCsalle.SelectedRows.Count
	if ($count -gt 0)
	{
		$buttonPCprof.Enabled = $true
		$buttonPCeleve.Enabled = $true
	}
	else
	{
		$buttonPCprof.Enabled = $false
		$buttonPCeleve.Enabled = $false
	}
}

function refresh_machine
{
	$listemachine = Get-ADComputer -Filter * -SearchBase "$($OU_machines_racine)" | Select-object -Expand Name
	
	$Global:Originallistemachine = $listemachine
	If ($null -eq $listemachine)
	{
		#[System.Windows.Forms.MessageBox]::Show("Aucun poste à déplacer", "Information", 'OK')
		$checkedselectionpc.ClearSelected()
		$checkedselectionpc.Refresh()
		$tabcontrolrangementPC.TabPages.Remove($racine)
	}
	Else
	{
		Update-ListBox -ListBox $checkedselectionpc -Items $listemachine
		
	}
	
	
	
}



function reset_form
{
	
	$comboboxsalle.SelectedIndex = -1
	$comboboxposteprof.SelectedIndex = -1
	$comboboxOS.SelectedIndex = -1
	$textboxOSchoisi.text = ""
	$textboxSearchposte.Text = ""
	$textboxsalle.Text = ""
	$checkboxSalleNonListée.CheckState = 'Unchecked'
	
}


# Fonctions pour modification usermasse


function modifiy_ADuser_masse
{
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		$session,
		[Parameter(Mandatory = $true, Position = 1)]
		$typemodif
	)
	
	$s = $session
	
	
	$progressbaruser.Step = 1
	$progressbaruser.Value = 0
	
	
	$liste_users = $checkedlistboxutilisateur.CheckedItems
	$progressbaruser.Maximum = $checkedlistboxutilisateur.CheckedItems.Count
	
	If ($liste_users -ne $null)
	{
		foreach ($user in $liste_users)
		{
			$users += $user.ToString() + ","
		}
		$usersfinestunevirgule = $users.Substring($users.Length - 1, 1)
		
		if ($usersfinestunevirgule -eq ",")
		{
			$users = $users.Substring(0, $users.Length - 1)
		}
		
	}
	else
	{
		
		
		#pas d'utilisateur choisi	
		
		
		
	}
	
	
	$groupes_options = $checkedlistboxGroupsoption.CheckedItems
	If ($groupes_options -ne $null)
	{
		foreach ($group in $groupes_options)
		{
			$options += $group.ToString() + ","
		}
		$optionfinestunevirgule = $options.Substring($options.Length - 1, 1)
		
		if ($optionfinestunevirgule -eq ",")
		{
			$options = $options.Substring(0, $options.Length - 1)
		}
		
	}
	
	
	$groupes_matieres = $checkedlistboxGroupsmatiere.CheckedItems
	If ($groupes_matieres -ne $null)
	{
		foreach ($group in $groupes_matieres)
		{
			$matiere += $group.ToString() + ","
		}
		$matierefinestunevirgule = $matiere.Substring($matiere.Length - 1, 1)
		
		if ($matierefinestunevirgule -eq ",")
		{
			$matiere = $matiere.Substring(0, $matiere.Length - 1)
		}
	}
	
	$classes_choisies = $checkedlistboxclasses.CheckedItems
	If ($classes_choisies -ne $null)
	{
		foreach ($classes in $classes_choisies)
		{
			$classeselect += $classes.ToString() + ","
		}
		$classefinestunevirgule = $classeselect.Substring($classeselect.Length - 1, 1)
		
		if ($classefinestunevirgule -eq ",")
		{
			$classeselect = $classeselect.Substring(0, $classeselect.Length - 1)
		}
	}
	
	if (($matiere -eq $null) -and ($classeselect -eq $null) -and ($options -eq $null))
	{
		
		[System.Windows.Forms.MessageBox]::Show("Vous devez choisir une option / matière classe à ajouter / supprimer", "Information", 'OK')
		return
		
	}
	else
	{
		$ajoutsuppr = "ok"
		
	}
	
	$type_utilisateur = $($comboboxgroupprinc.selecteditem)
	if ($type_utilisateur -eq "$nom_eleves")
	{
		
		$OU_utilisateur_newad = "$($comboboxOUTree.SelectedItem),OU=$OU_classes"
		$repertoire_perso = "$rep_perso_base\$nom_eleves\$($comboboxOUTree.SelectedItem)"
		$matiere = ""
		
	}
	elseif ($type_utilisateur -eq "$nom_professeurs")
	{
		
		$OU_utilisateur_newad = $($comboboxOUTree.SelectedItem)
		$repertoire_perso = "$rep_perso_base\$nom_professeurs"
		
	}
	elseif ($type_utilisateur -eq "$nom_administratifs")
	{
		$OU_utilisateur_newad = $($comboboxOUTree.SelectedItem)
		$repertoire_perso = "$rep_perso_base\$nom_administratifs"
		$classe = ""
	}
	
	
	$liste_users = $checkedlistboxutilisateur.CheckedItems
	If ($liste_users -ne $null)
	{
		foreach ($user in $liste_users)
		{
			
			if ($typemodif -eq "ajout")
			{
				
				
				$infouser = get-aduser $user -Properties * | select office, streetAddress, division
				$classeactuelle = $($infouser.'office')
				$optionactuelle = $($infouser.'streetAddress')
				$matiereactuelle = $($infouser.'division')
				
				
				if ($type_utilisateur -eq "$nom_eleves")
				{
					$repertoire_perso = "$rep_perso_base\$nom_eleves\$classeactuelle"
					
				}
				$new_rep_perso = "$repertoire_perso\$($user)"
				$rep_options_perso = "$new_rep_perso\groupes\"
				#ON cherche si on doit rajouter une option
				
				$optionschoisies = $checkedlistboxGroupsoption.CheckedItems
				$optionfinale = $optionactuelle
				If ($optionschoisies -ne $null)
				{
					foreach ($groupeoption in $optionschoisies)
					{
						if ($optionactuelle -ne $null)
						{
							if (-not ($optionactuelle.Contains($groupeoption)))
							{
								if ($optionfinale -eq $null)
								{
									$optionfinale = $groupeoption
								}
								else
								{
									$optionfinale = "$optionfinale,$groupeoption"
								}
								
								
								Add-ADGroupMember -Identity $groupeoption -Members $User
								
								
								if (-not (Test-Path -Path $rep_options_perso))
								{
									New-Item -Path $rep_options_perso -ItemType Directory -Force
									$Folder = Get-Item  $rep_options_perso
									$Folder.Attributes += 'ReadOnly'
								}
								
								if (-not (test-path "$rep_options_perso$groupeoption.lnk"))
								{
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$rep_options_perso$groupeoption.lnk")
									$lnk.TargetPath = "\\$nom_serveur\option-$groupeoption"
									$lnk.Save()
								}
								if ($s -ne "vide")
								{
									$optionsvr2 = $groupeoption
									Invoke-Command -Session $s {
										if (-not (Test-Path -Path $using:rep_options_perso))
										{
											New-Item -Path $using:rep_options_perso -ItemType Directory -Force
											$Folder = Get-Item  $using:rep_options_perso
											$Folder.Attributes += 'ReadOnly'
										}
										
										if (-not (test-path "$using:rep_options_perso$using:optionsvr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$using:rep_options_perso$using:optionsvr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\option-$using:optionsvr2"
											$lnk.Save()
										}
									}
								}
							}
							
							
						}
						else
						{
							if ($optionfinale -eq $null)
							{
								$optionfinale = $groupeoption
							}
							else
							{
								$optionfinale = "$optionfinale,$groupeoption"
							}
							
							
							
							Add-ADGroupMember -Identity $groupeoption -Members $User
							
							
							if (-not (Test-Path -Path $rep_options_perso))
							{
								New-Item -Path $rep_options_perso -ItemType Directory -Force
								$Folder = Get-Item  $rep_options_perso
								$Folder.Attributes += 'ReadOnly'
							}
							
							if (-not (test-path "$rep_options_perso$groupeoption.lnk"))
							{
								$objShell = New-Object -ComObject WScript.Shell
								$lnk = $objShell.CreateShortcut("$rep_options_perso$groupeoption.lnk")
								$lnk.TargetPath = "\\$nom_serveur\option-$groupeoption"
								$lnk.Save()
							}
							if ($s -ne "vide")
							{
								$optionsvr2 = $groupeoption
								Invoke-Command -Session $s {
									if (-not (Test-Path -Path $using:rep_options_perso))
									{
										New-Item -Path $using:rep_options_perso -ItemType Directory -Force
										$Folder = Get-Item  $using:rep_options_perso
										$Folder.Attributes += 'ReadOnly'
									}
									
									if (-not (test-path "$using:rep_options_perso$using:optionsvr2.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$using:rep_options_perso$using:optionsvr2.lnk")
										$lnk.TargetPath = "\\$using:nom_serveur2\option-$using:optionsvr2"
										$lnk.Save()
									}
								}
							}
							
						}
					}
					
					Set-ADUser $User -streetAddress $optionfinale
					
					
					$siduser = ([Security2.IdentityReference2]$($User)).Sid
					Get-Item $rep_options_perso | Disable-NTFSAccessInheritance
					Remove-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Modify, Synchronize
					add-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Read
					
					if ($s -ne "vide")
					{
						Invoke-Command -Session $s {
							Get-Item $using:rep_options_perso | Disable-NTFSAccessInheritance
							Remove-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Modify, Synchronize
							add-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Read
						}
					}
					
				}
				
				
				if (($type_utilisateur -eq "$nom_professeurs"))
				{
					# MATIERES POUR LES PROFS 
					
					$groupmatiere = $checkedlistboxGroupsmatiere.CheckedItems
					$matierefinale = $matiereactuelle
					
					If ($groupmatiere -ne $null)
					{
						
						foreach ($group in $groupmatiere)
						{
							if ($matiereactuelle -ne $null)
							{
								if (-not ($matiereactuelle.Contains($group)))
								{
									if ($matierefinale -eq $null)
									{
										$matierefinale = "$group"
									}
									else
									{
										$matierefinale = "$matierefinale,$group"
									}
									
									
									Add-ADGroupMember -Identity $Group -Members $User
									
									
									if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
									{
										
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
										$lnk.Save()
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
												$lnk.Save()
											}
										}
									}
									
									Get-Item "$($new_rep_perso)\matiere-$matiere.lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Read, Synchronize
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
											Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
										}
									}
								}
							}
							else
							{
								if ($matierefinale -eq $null)
								{
									$matierefinale = "$group"
								}
								else
								{
									$matierefinale = "$matierefinale,$group"
								}
								
								
								Add-ADGroupMember -Identity $Group -Members $User
								
								
								if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
								{
									
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
									$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
									$lnk.Save()
								}
								$matierevr2 = $group
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										
										if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
											$lnk.Save()
										}
									}
								}
								
								Get-Item "$($new_rep_perso)\matiere-$matiere.lnk" | Disable-NTFSAccessInheritance
								Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Modify, Synchronize
								Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Read, Synchronize
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
										Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
									}
								}
								
								
								
								
							}
						}
						
						Set-ADUser $User -division $matierefinale
					}
					
					# CLASSES POUR LES PROFS 
					
					$groupclasse = $checkedlistboxclasses.CheckedItems
					$classefinale = $classeactuelle
					If ($groupclasse -ne $null)
					{
						
						foreach ($group in $groupclasse)
						{
							if ($classeactuelle -ne $null)
							{
								
								if (-not ($classeactuelle.Contains($group)))
								{
									if ($classefinale -eq $null)
									{
										$classefinale = "$group"
									}
									else
									{
										$classefinale = "$classefinale,$group"
									}
									Add-ADGroupMember -Identity $Group -Members $User
									$prof_classe = "Professeur-$Group"
									Add-ADGroupMember -Identity $prof_classe -Members $User
									
									$rep_classes_perso = "$new_rep_perso\classes\"
									if (-not (Test-Path -Path $rep_classes_perso))
									{
										New-Item -Path $rep_classes_perso -ItemType Directory -Force
										$Folder = Get-Item  $rep_classes_perso
										$Folder.Attributes += 'ReadOnly'
									}
									
									if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$Group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
										$lnk.Save()
									}
									$classevr2 = $Group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											if (-not (Test-Path -Path $using:rep_classes_perso))
											{
												New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
												$Folder = Get-Item  $using:rep_classes_perso
												$Folder.Attributes += 'ReadOnly'
											}
											
											if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
												$lnk.Save()
											}
										}
									}
									
									$siduser = ([Security2.IdentityReference2]$($user)).Sid
									Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
									add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
									
									
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
											add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
										}
									}
								}
							}
							else
							{
								if ($classefinale -eq $null)
								{
									$classefinale = "$group"
								}
								else
								{
									$classefinale = "$classefinale,$group"
								}
								Add-ADGroupMember -Identity $Group -Members $User
								$prof_classe = "Professeur-$Group"
								Add-ADGroupMember -Identity $prof_classe -Members $User
								
								$rep_classes_perso = "$new_rep_perso\classes\"
								if (-not (Test-Path -Path $rep_classes_perso))
								{
									New-Item -Path $rep_classes_perso -ItemType Directory -Force
									$Folder = Get-Item  $rep_classes_perso
									$Folder.Attributes += 'ReadOnly'
								}
								
								if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
								{
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$Group.lnk")
									$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
									$lnk.Save()
								}
								$classevr2 = $Group
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										if (-not (Test-Path -Path $using:rep_classes_perso))
										{
											New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
											$Folder = Get-Item  $using:rep_classes_perso
											$Folder.Attributes += 'ReadOnly'
										}
										
										if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
											$lnk.Save()
										}
									}
								}
								
								$siduser = ([Security2.IdentityReference2]$($user)).Sid
								Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
								Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
								add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
								
								
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
										add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
									}
								}
								
								
								
							}
							
						}
						Set-ADUser $User -office $classefinale
					}
					
				}
				
				if (($type_utilisateur -eq "$nom_administratifs"))
				{
					# MATIERES POUR LES ADMIN
					
					$groupmatiere = $checkedlistboxGroupsmatiere.CheckedItems
					$matierefinale = $matiereactuelle
					If ($groupmatiere -ne $null)
					{
						
						foreach ($group in $groupmatiere)
						{
							if ($matiereactuelle -ne $null)
							{
								if (-not ($matiereactuelle.Contains($group)))
								{
									if ($matierefinale -eq $null)
									{
										$matierefinale = "$group"
									}
									else
									{
										$matierefinale = "$matierefinale,$group"
									}
									
									
									Add-ADGroupMember -Identity $Group -Members $User
									
									
									if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
									{
										
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
										$lnk.Save()
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
												$lnk.Save()
											}
										}
									}
									
									Get-Item "$($new_rep_perso)\matiere-$matiere.lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Read, Synchronize
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
											Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
										}
									}
								}
							}
							else
							{
								if ($matierefinale -eq $null)
								{
									$matierefinale = "$group"
								}
								else
								{
									$matierefinale = "$matierefinale,$group"
								}
								
								
								Add-ADGroupMember -Identity $Group -Members $User
								
								
								if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
								{
									
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
									$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
									$lnk.Save()
								}
								$matierevr2 = $group
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										
										if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
											$lnk.Save()
										}
									}
								}
								
								Get-Item "$($new_rep_perso)\matiere-$matiere.lnk" | Disable-NTFSAccessInheritance
								Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Modify, Synchronize
								Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$matiere.lnk" -Account $User -AccessRights Read, Synchronize
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
										Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
									}
								}
								
								
								
								
							}
						}
						
						Set-ADUser $User -division $matierefinale
					}
					
					# CLASSES POUR LES ADMIN
					
					$groupclasse = $checkedlistboxclasses.CheckedItems
					$classefinale = $classeactuelle
					If ($groupclasse -ne $null)
					{
						
						foreach ($group in $groupclasse)
						{
							if ($classeactuelle -ne $null)
							{
								
								if (-not ($classeactuelle.Contains($group)))
								{
									if ($classefinale -eq $null)
									{
										$classefinale = "$group"
									}
									else
									{
										$classefinale = "$classefinale,$group"
									}
									Add-ADGroupMember -Identity $Group -Members $User
									$prof_classe = "Professeur-$Group"
									Add-ADGroupMember -Identity $prof_classe -Members $User
									
									$rep_classes_perso = "$new_rep_perso\classes\"
									if (-not (Test-Path -Path $rep_classes_perso))
									{
										New-Item -Path $rep_classes_perso -ItemType Directory -Force
										$Folder = Get-Item  $rep_classes_perso
										$Folder.Attributes += 'ReadOnly'
									}
									
									if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$Group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
										$lnk.Save()
									}
									$classevr2 = $Group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											if (-not (Test-Path -Path $using:rep_classes_perso))
											{
												New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
												$Folder = Get-Item  $using:rep_classes_perso
												$Folder.Attributes += 'ReadOnly'
											}
											
											if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
												$lnk.Save()
											}
										}
									}
									$siduser = ([Security2.IdentityReference2]$($user)).Sid
									Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
									add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
									
									
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
											add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
										}
									}
								}
							}
							else
							{
								if ($classefinale -eq $null)
								{
									$classefinale = "$group"
								}
								else
								{
									$classefinale = "$classefinale,$group"
								}
								Add-ADGroupMember -Identity $Group -Members $User
								$prof_classe = "Professeur-$Group"
								Add-ADGroupMember -Identity $prof_classe -Members $User
								
								$rep_classes_perso = "$new_rep_perso\classes\"
								if (-not (Test-Path -Path $rep_classes_perso))
								{
									New-Item -Path $rep_classes_perso -ItemType Directory -Force
									$Folder = Get-Item  $rep_classes_perso
									$Folder.Attributes += 'ReadOnly'
								}
								
								if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
								{
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$Group.lnk")
									$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
									$lnk.Save()
								}
								$classevr2 = $Group
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										if (-not (Test-Path -Path $using:rep_classes_perso))
										{
											New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
											$Folder = Get-Item  $using:rep_classes_perso
											$Folder.Attributes += 'ReadOnly'
										}
										
										if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
											$lnk.Save()
										}
									}
								}
								
								$siduser = ([Security2.IdentityReference2]$($user)).Sid
								Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
								Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
								add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
								
								
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
										add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
									}
								}
								
								
								
							}
							
						}
						Set-ADUser $User -office $classefinale
					}
					
				}

			}
			if ($typemodif -eq "suppression")
			{
				Try
				{
					
					$infouser = get-aduser $user -Properties * | select office, streetAddress, division
					$classeactuelle = $($infouser.'office')
					$optionactuelle = $($infouser.'streetAddress')
					$matiereactuelle = $($infouser.'division')
					
					
					if ($type_utilisateur -eq "$nom_eleves")
					{
						$repertoire_perso = "$rep_perso_base\$nom_eleves\$classeactuelle"
						
					}
					$new_rep_perso = "$repertoire_perso\$($user)"
					$rep_options_perso = "$new_rep_perso\groupes\"
					#ON cherche si on doit rajouter une option
					
					$optionschoisies = $checkedlistboxGroupsoption.CheckedItems
					$optionfinale = $optionactuelle
					If ($optionschoisies -ne $null)
					{
						foreach ($groupeoption in $optionschoisies)
						{
							if ($optionactuelle -ne $null)
							{
								
								if (($optionactuelle.Contains(",$groupeoption")))
								{
									
									$optionfinale = $optionactuelle.Replace(",$groupeoption", "")
									
								}
								elseif (($optionactuelle.Contains("$($groupeoption),")))
								{
									
									$optionfinale = $optionactuelle.Replace("$($groupeoption),", "")
									
								}
								elseif (($optionactuelle.Contains($groupeoption)))
								{
									
									$optionfinale = $optionactuelle.Replace($groupeoption, "")
									
								}
								
								
								Remove-ADGroupMember -Identity $groupeoption -Members $User -Confirm:$false
								
								
								if (test-path "$rep_options_perso$groupeoption.lnk")
								{
									Remove-Item "$rep_options_perso$groupeoption.lnk"
								}
								if ($s -ne "vide")
								{
									$optionsvr2 = $groupeoption
									Invoke-Command -Session $s {
										
										if (test-path "$using:rep_options_perso$using:optionsvr2.lnk")
										{
											Remove-Item "$using:rep_options_perso$using:optionsvr2.lnk"
										}
									}
								}
							}
							else
							{
								Remove-ADGroupMember -Identity $groupeoption -Members $User -Confirm:$false
								
								
								if (test-path "$rep_options_perso$groupeoption.lnk")
								{
									Remove-Item "$rep_options_perso$groupeoption.lnk"
								}
								if ($s -ne "vide")
								{
									$optionsvr2 = $groupeoption
									Invoke-Command -Session $s {
										
										if (test-path "$using:rep_options_perso$using:optionsvr2.lnk")
										{
											Remove-Item "$using:rep_options_perso$using:optionsvr2.lnk"
										}
									}
								}
								
							}
							
						}
						
						Set-ADUser $User -streetAddress $optionfinale -Confirm:$false
						
						
						
					}
					
					
					if (($type_utilisateur -eq "$nom_professeurs"))
					{
						# MATIERES POUR LES PROFS 
						
						$groupmatiere = $checkedlistboxGroupsmatiere.CheckedItems
						$matierefinale = $matiereactuelle
						
						If ($groupmatiere -ne $null)
						{
							
							foreach ($group in $groupmatiere)
							{
								if ($matiereactuelle -ne $null)
								{
									
									if (($matiereactuelle.Contains(",$group")))
									{
										
										$matierefinale = $matiereactuelle.Replace(",$group", "")
										
									}
									elseif (($matiereactuelle.Contains("$($group),", "")))
									{
										$matierefinale = $matiereactuelle.Replace("$($group),", "")
										
									}
									elseif (($matiereactuelle.Contains($group)))
									{
										$matierefinale = $matiereactuelle.Replace($group, "")
										
									}
									
									remove-ADGroupMember -Identity $Group -Members $User -Confirm:$false
									
									
									if (test-path "$($new_rep_perso)\matiere-$group.lnk")
									{
										
										Remove-Item "$($new_rep_perso)\matiere-$group.lnk"
										
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											{
												
												Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
												
											}
										}
									}
									
								}
								else
								{
									
									remove-ADGroupMember -Identity $Group -Members $User -Confirm:$false
									
									
									if (test-path "$($new_rep_perso)\matiere-$group.lnk")
									{
										
										Remove-Item "$($new_rep_perso)\matiere-$group.lnk"
										
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											{
												
												Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
												
											}
										}
									}
									
								}
								
							}
							
							Set-ADUser $User -division $matierefinale -Confirm:$false
						}
						
						# CLASSES POUR LES PROFS 
						
						$groupclasse = $checkedlistboxclasses.CheckedItems
						$classefinale = $classeactuelle
						If ($groupclasse -ne $null)
						{
							
							foreach ($group in $groupclasse)
							{
								
								if ($classeactuelle -ne $null)
								{
									if (($classeactuelle.Contains(",$group")))
									{
										$classefinale = $classeactuelle.Replace(",$group", "")
										
									}
									elseif (($classeactuelle.Contains("$($group),", "")))
									{
										$classefinale = $classeactuelle.Replace("$($group),", "")
										
									}
									elseif (($classeactuelle.Contains($group)))
									{
										$classefinale = $classeactuelle.Replace($group, "")
										
									}
									remove-adgroupMember -Identity $Group -Members $User -Confirm:$false
									
									$rep_classes_perso = "$new_rep_perso\classes\"
									
									if (test-path "$($rep_classes_perso)classe-$Group.lnk")
									{
										
										Remove-Item "$($rep_classes_perso)classe-$Group.lnk"
										
									}
									$classevr2 = $Group
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
											
										}
									}
									
								}
								
								else
								{
									remove-adgroupMember -Identity $Group -Members $User -Confirm:$false
									
									$rep_classes_perso = "$new_rep_perso\classes\"
									
									if (test-path "$($rep_classes_perso)classe-$Group.lnk")
									{
										Remove-Item "$($rep_classes_perso)classe-$Group.lnk"
										
									}
									$classevr2 = $Group
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
											
										}
									}
									
								}
								
							}
							Set-ADUser $User -office $classefinale -Confirm:$false
						}
						
					}
					
					if (($type_utilisateur -eq "$nom_administratifs"))
					{
						# MATIERES POUR LES ADMIN
						
						$groupmatiere = $checkedlistboxGroupsmatiere.CheckedItems
						$matierefinale = $matiereactuelle
						If ($groupmatiere -ne $null)
						{
							
							foreach ($group in $groupmatiere)
							{
								if ($matiereactuelle -ne $null)
								{
									
									if (($matiereactuelle.Contains(",$group")))
									{
										
										
										$matierefinale = $matiereactuelle.Replace(",$group", "")
										
									}
									elseif (($matiereactuelle.Contains("$($group),", "")))
									{
										$matierefinale = $matiereactuelle.Replace("$($group),", "")
										
									}
									elseif (($matiereactuelle.Contains($group)))
									{
										$matierefinale = $matiereactuelle.Replace($group, "")
										
									}
									
									remove-ADGroupMember -Identity $Group -Members $User -Confirm:$false
									
									
									if (test-path "$($new_rep_perso)\matiere-$group.lnk")
									{
										
										Remove-Item "$($new_rep_perso)\matiere-$group.lnk"
										
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											{
												
												Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
												
											}
										}
									}
									
								}
								else
								{
									
									remove-ADGroupMember -Identity $Group -Members $User -Confirm:$false
									
									
									if (test-path "$($new_rep_perso)\matiere-$group.lnk")
									{
										
										Remove-Item "$($new_rep_perso)\matiere-$group.lnk"
										
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											{
												
												Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
												
											}
										}
									}
									
								}
								
							}
							
							Set-ADUser $User -division $matierefinale -Confirm:$false
						}
						
						# CLASSES POUR LES ADMIN 
						
						$groupclasse = $checkedlistboxclasses.CheckedItems
						$classefinale = $classeactuelle
						If ($groupclasse -ne $null)
						{
							
							foreach ($group in $groupclasse)
							{
								
								if ($classeactuelle -ne $null)
								{
									if (($classeactuelle.Contains(",$group")))
									{
										$classefinale = $classeactuelle.Replace(",$group", "")
										
									}
									elseif (($classeactuelle.Contains("$($group),", "")))
									{
										$classefinale = $classeactuelle.Replace("$($group),", "")
										
									}
									elseif (($classeactuelle.Contains($group)))
									{
										$classefinale = $classeactuelle.Replace($group, "")
										
									}
									remove-adgroupMember -Identity $Group -Members $User -Confirm:$false
									
									$rep_classes_perso = "$new_rep_perso\classes\"
									
									if (test-path "$($rep_classes_perso)classe-$Group.lnk")
									{
										
										Remove-Item "$($rep_classes_perso)classe-$Group.lnk"
										
									}
									$classevr2 = $Group
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
											
										}
									}
									
								}
								
								else
								{
									remove-adgroupMember -Identity $Group -Members $User -Confirm:$false
									
									$rep_classes_perso = "$new_rep_perso\classes\"
									
									if (test-path "$($rep_classes_perso)classe-$Group.lnk")
									{
										Remove-Item "$($rep_classes_perso)classe-$Group.lnk"
										
									}
									$classevr2 = $Group
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
											
										}
									}
									
								}
								
							}
							Set-ADUser $User -office $classefinale -Confirm:$false
						}
						
					}
					
					
					
				}
				
				
				
				
				Catch
				{
					add-logs -text "WARN: "
					$InfoMessage = $_
					$InfoTitle = "Attention"
					Show-MessageBox_psf
				}
				
			}
			
			$progressbaruser.PerformStep()
			
		}
		if ($ajoutsuppr -eq "ok")
		{
			(0 .. ($checkedlistboxutilisateur.Items.Count - 1)) | %{ $checkedlistboxutilisateur.SetItemChecked($_, $false) }
			(0 .. ($checkedlistboxGroupsoption.Items.Count - 1)) | %{ $checkedlistboxGroupsoption.SetItemChecked($_, $false) }
			(0 .. ($checkedlistboxclasses.Items.Count - 1)) | %{ $checkedlistboxclasses.SetItemChecked($_, $false) }
			(0 .. ($checkedlistboxGroupsmatiere.Items.Count - 1)) | %{ $checkedlistboxGroupsmatiere.SetItemChecked($_, $false) }
			[System.Windows.Forms.MessageBox]::Show("Modifications apportées aux utilisateurs choisis", "Information", 'OK')
		}
		
		$progressbaruser.Value = 0
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Vous devez chosir un ou plusieurs utilisateurs", "Information", 'OK')
		
	}
	
	#Reset-Form
}



# Fonctions pour modification user

function modifiy-ADuser
{
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		$session
	)
	
	$s = $session
	
	
	$progressbaruser.Step = 1
	$progressbaruser.Value = 0
	
	
	$liste_users = $checkedlistboxutilisateur.CheckedItems
	$progressbaruser.Maximum = $checkedlistboxutilisateur.CheckedItems.Count
	
	If ($liste_users -ne $null)
	{
		foreach ($user in $liste_users)
		{
			$users += $user.ToString() + ","
		}
		$usersfinestunevirgule = $users.Substring($users.Length - 1, 1)
		
		if ($usersfinestunevirgule -eq ",")
		{
			$users = $users.Substring(0, $users.Length - 1)
		}
		
	}
	else
	{
		
		
		#pas d'utilisateur choisi	
		
		
		
	}
	
	
	$groupes_options = $checkedlistboxGroupsoption.CheckedItems
	If ($groupes_options -ne $null)
	{
		foreach ($group in $groupes_options)
		{
			$options += $group.ToString() + ","
		}
		$optionfinestunevirgule = $options.Substring($options.Length - 1, 1)
		
		if ($optionfinestunevirgule -eq ",")
		{
			$options = $options.Substring(0, $options.Length - 1)
		}
		
	}
	
	
	$groupes_matieres = $checkedlistboxGroupsmatiere.CheckedItems
	If ($groupes_matieres -ne $null)
	{
		foreach ($group in $groupes_matieres)
		{
			$matiere += $group.ToString() + ","
		}
		$matierefinestunevirgule = $matiere.Substring($matiere.Length - 1, 1)
		
		if ($matierefinestunevirgule -eq ",")
		{
			$matiere = $matiere.Substring(0, $matiere.Length - 1)
		}
	}
	
	$classes_choisies = $checkedlistboxclasses.CheckedItems
	If ($classes_choisies -ne $null)
	{
		foreach ($classes in $classes_choisies)
		{
			$classeselect += $classes.ToString() + ","
		}
		$classefinestunevirgule = $classeselect.Substring($classeselect.Length - 1, 1)
		
		if ($classefinestunevirgule -eq ",")
		{
			$classeselect = $classeselect.Substring(0, $classeselect.Length - 1)
		}
	}
	
	if (($matiere -eq $null) -and ($classeselect -eq $null) -and ($options -eq $null))
	{
		
		[System.Windows.Forms.MessageBox]::Show("Vous devez choisir une option / matière classe à ajouter / supprimer", "Information", 'OK')
		return
		
	}
	else
	{
		$ajoutsuppr = "ok"
		
	}
	
	$type_utilisateur = $($comboboxgroupprinc.selecteditem)
	if ($type_utilisateur -eq "$nom_eleves")
	{
		
		$OU_utilisateur_newad = "$($comboboxOUTree.SelectedItem),OU=$OU_classes"
		$repertoire_perso = "$rep_perso_base\$nom_eleves\$($comboboxOUTree.SelectedItem)"
		$matiere = ""
		
	}
	elseif ($type_utilisateur -eq "$nom_professeurs")
	{
		
		$OU_utilisateur_newad = $($comboboxOUTree.SelectedItem)
		$repertoire_perso = "$rep_perso_base\$nom_professeurs"
		
	}
	elseif ($type_utilisateur -eq "$nom_administratifs")
	{
		$OU_utilisateur_newad = $($comboboxOUTree.SelectedItem)
		$repertoire_perso = "$rep_perso_base\$nom_administratifs"
		$classe = ""
	}
	
	
	$liste_users = $checkedlistboxutilisateur.CheckedItems
	If ($liste_users -ne $null)
	{
		foreach ($user in $liste_users)
		{
			
			
			$infouser = get-aduser $user -Properties * | select office, streetAddress, division
			$classeactuelle = $($infouser.'office')
			$optionactuelle = $($infouser.'streetAddress')
			$matiereactuelle = $($infouser.'division')
			
			
			if ($type_utilisateur -eq "$nom_eleves")
			{
				$repertoire_perso = "$rep_perso_base\$nom_eleves\$classeactuelle"
				
			}
			$new_rep_perso = "$repertoire_perso\$($user)"
			$rep_options_perso = "$new_rep_perso\groupes\"
			#ON cherche si on doit rajouter une option
			
			$optionschoisies = $checkedlistboxGroupsoption.CheckedItems
			$optionfinale = $optionactuelle
			If ($optionschoisies -ne $null)
			{
				if ($optionactuelle -ne $null)
				{
					$optionactuelle.Split(",") | ForEach {
						if (-not ($optionschoisies.Contains($_)))
						{
							
							Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
							if (test-path "$rep_options_perso$_.lnk")
							{
								Remove-Item "$rep_options_perso$_.lnk"
							}
							if ($s -ne "vide")
							{
								$optionsvr2 = $_
								Invoke-Command -Session $s {
									
									if (test-path "$using:rep_options_perso$using:optionsvr2.lnk")
									{
										Remove-Item "$using:rep_options_perso$using:optionsvr2.lnk"
									}
								}
							}
							
							if (($optionfinale.Contains(",$_")))
							{
								
								$optionfinale = $optionfinale.Replace(",$_", "")
								
							}
							elseif (($optionfinale.Contains("$($_),")))
							{
								
								$optionfinale = $optionfinale.Replace("$($_),", "")
								
							}
							elseif (($optionfinale.Contains($_)))
							{
								
								$optionfinale = $optionfinale.Replace($_, "")
								
							}
							
						}
					}
					
					
					foreach ($groupeoption in $optionschoisies)
					{
						
						if ($groupeoption -ne $null)
						{
							if (-not ($optionfinale.Contains($groupeoption)))
							{
								if ($optionfinale -eq $null)
								{
									$optionfinale = $groupeoption
								}
								else
								{
									$optionfinale = "$optionfinale,$groupeoption"
								}
								Add-ADGroupMember -Identity $groupeoption -Members $User
								
								
								if (-not (Test-Path -Path $rep_options_perso))
								{
									New-Item -Path $rep_options_perso -ItemType Directory -Force
									$Folder = Get-Item  $rep_options_perso
									$Folder.Attributes += 'ReadOnly'
								}
								
								if (-not (test-path "$rep_options_perso$groupeoption.lnk"))
								{
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$rep_options_perso$groupeoption.lnk")
									$lnk.TargetPath = "\\$nom_serveur\option-$groupeoption"
									$lnk.Save()
								}
								if ($s -ne "vide")
								{
									$optionsvr2 = $groupeoption
									Invoke-Command -Session $s {
										if (-not (Test-Path -Path $using:rep_options_perso))
										{
											New-Item -Path $using:rep_options_perso -ItemType Directory -Force
											$Folder = Get-Item  $using:rep_options_perso
											$Folder.Attributes += 'ReadOnly'
										}
										
										if (-not (test-path "$using:rep_options_perso$using:optionsvr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$using:rep_options_perso$using:optionsvr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\option-$using:optionsvr2"
											$lnk.Save()
										}
									}
								}
							}
							
						}
						
						
					}
				}
				else
				{
					
					foreach ($groupeoption in $optionschoisies)
					{
						
						if ($groupeoption -ne $null)
						{
							
							
							if ($optionfinale -eq $null)
							{
								$optionfinale = $groupeoption
							}
							else
							{
								$optionfinale = "$optionfinale,$groupeoption"
							}
							Add-ADGroupMember -Identity $groupeoption -Members $User
							
							
							if (-not (Test-Path -Path $rep_options_perso))
							{
								New-Item -Path $rep_options_perso -ItemType Directory -Force
								$Folder = Get-Item  $rep_options_perso
								$Folder.Attributes += 'ReadOnly'
							}
							
							if (-not (test-path "$rep_options_perso$groupeoption.lnk"))
							{
								$objShell = New-Object -ComObject WScript.Shell
								$lnk = $objShell.CreateShortcut("$rep_options_perso$groupeoption.lnk")
								$lnk.TargetPath = "\\$nom_serveur\option-$groupeoption"
								$lnk.Save()
							}
							if ($s -ne "vide")
							{
								$optionsvr2 = $groupeoption
								Invoke-Command -Session $s {
									if (-not (Test-Path -Path $using:rep_options_perso))
									{
										New-Item -Path $using:rep_options_perso -ItemType Directory -Force
										$Folder = Get-Item  $using:rep_options_perso
										$Folder.Attributes += 'ReadOnly'
									}
									
									if (-not (test-path "$using:rep_options_perso$using:optionsvr2.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$using:rep_options_perso$using:optionsvr2.lnk")
										$lnk.TargetPath = "\\$using:nom_serveur2\option-$using:optionsvr2"
										$lnk.Save()
									}
								}
							}
							
							
						}
						
						
					}
					
					
					
				}
				
				
				
				$siduser = ([Security2.IdentityReference2]$($User)).Sid
				Get-Item $rep_options_perso | Disable-NTFSAccessInheritance
				Remove-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Modify, Synchronize
				add-NTFSAccess -path $rep_options_perso -Account $siduser -AccessRights Read
				
				if ($s -ne "vide")
				{
					Invoke-Command -Session $s {
						Get-Item $using:rep_options_perso | Disable-NTFSAccessInheritance
						Remove-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Modify, Synchronize
						add-NTFSAccess -path $using:rep_options_perso -Account $using:siduser -AccessRights Read
					}
				}
				
			}
			else
			{
				
				
				$optionfinale = ""
				$optionactuelle.Split(",") | ForEach {
					
					Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
					if (test-path "$rep_options_perso$_.lnk")
					{
						Remove-Item "$rep_options_perso$_.lnk"
					}
					if ($s -ne "vide")
					{
						$optionsvr2 = $_
						Invoke-Command -Session $s {
							
							if (test-path "$using:rep_options_perso$using:optionsvr2.lnk")
							{
								Remove-Item "$using:rep_options_perso$using:optionsvr2.lnk"
							}
						}
					}
					
					
				}
			}
			
			$debutoption = $optionfinale.substring(0, 1)
			if ($debutoption -eq ",")
			{
				$optionfinale -replace '^(.)', ''
			}
			$optionfinestunevirgule = $optionfinale.Substring($optionfinale.Length - 1, 1)
			
			if ($optionfinestunevirgule -eq ",")
			{
				$optionfinale = $optionfinale.Substring(0, $optionfinale.Length - 1)
			}
			
			Set-ADUser $User -streetAddress $optionfinale
			
			
			
			if (($type_utilisateur -eq "$nom_professeurs"))
			{
				# MATIERES POUR LES PROFS 
				
				$groupmatiere = $checkedlistboxGroupsmatiere.CheckedItems
				$matierefinale = $matiereactuelle
				
				If ($groupmatiere -ne $null)
				{
					if ($matiereactuelle -ne $null)
					{
						$matiereactuelle.Split(",") | ForEach {
							if (-not ($groupmatiere.Contains($_)))
							{
								
								Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
								if (test-path "$($new_rep_perso)\matiere-$_.lnk")
								{
									Remove-Item "$($new_rep_perso)\matiere-$_.lnk"
								}
								if ($s -ne "vide")
								{
									$matierevr2 = $_
									Invoke-Command -Session $s {
										
										if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
										{
											Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
										}
									}
								}
								if (($matierefinale.Contains(",$_")))
								{
									
									
									$matierefinale = $matierefinale.Replace(",$_", "")
									
								}
								elseif (($matierefinale.Contains("$($_),", "")))
								{
									$matierefinale = $matierefinale.Replace("$($_),", "")
									
								}
								elseif (($matierefinale.Contains($_)))
								{
									$matierefinale = $matierefinale.Replace($_, "")
									
								}
							}
						}
						
						foreach ($group in $groupmatiere)
						{
							if ($group -ne $null)
							{
								if (-not ($matierefinale.Contains($group)))
								{
									if ($matierefinale -eq $null)
									{
										$matierefinale = "$group"
									}
									else
									{
										$matierefinale = "$matierefinale,$group"
									}
									
									
									Add-ADGroupMember -Identity $Group -Members $User
									
									
									if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
									{
										
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
										$lnk.Save()
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
												$lnk.Save()
											}
										}
									}
									
									Get-Item "$($new_rep_perso)\matiere-$group.lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Read, Synchronize
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
											Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
										}
									}
								}
							}
						}
					}
					else
					{
						foreach ($group in $groupmatiere)
						{
							if ($groupmatiere -ne $null)
							{
								
								if ($matierefinale -eq $null)
								{
									$matierefinale = "$group"
								}
								else
								{
									$matierefinale = "$matierefinale,$group"
								}
								
								
								Add-ADGroupMember -Identity $Group -Members $User
								
								
								if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
								{
									
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
									$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
									$lnk.Save()
								}
								$matierevr2 = $group
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										
										if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
											$lnk.Save()
										}
									}
								}
								
								Get-Item "$($new_rep_perso)\matiere-$group.lnk" | Disable-NTFSAccessInheritance
								Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Modify, Synchronize
								Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Read, Synchronize
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
										Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
									}
								}
								
								
								
								
							}
						}
					}
					
				}
				else
				{
					$matierefinale = ""
					
					$matiereactuelle.Split(",") | ForEach {
						
						Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
						if (test-path "$($new_rep_perso)\matiere-$_.lnk")
						{
							Remove-Item "$($new_rep_perso)\matiere-$_.lnk"
						}
						if ($s -ne "vide")
						{
							$matierevr2 = $_
							Invoke-Command -Session $s {
								
								if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
								{
									Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
								}
							}
						}
						
						
					}
					
					
				}
				
				$debutmatiere = $matierefinale.substring(0, 1)
				if ($debutmatiere -eq ",")
				{
					$matierefinale -replace '^(.)', ''
				}
				$matierefinestunevirgule = $matierefinale.Substring($matierefinale.Length - 1, 1)
				
				if ($matierefinestunevirgule -eq ",")
				{
					$matierefinale = $matierefinale.Substring(0, $matierefinale.Length - 1)
				}
				
				
				
				Set-ADUser $User -division $matierefinale
				
				
				# CLASSES POUR LES PROFS 
				
				$groupclasse = $checkedlistboxclasses.CheckedItems
				$classefinale = $classeactuelle
				$rep_classes_perso = "$new_rep_perso\classes\"
				If ($groupclasse -ne $null)
				{
					if ($classeactuelle -ne $null)
					{
						$classeactuelle.Split(",") | ForEach {
							if (-not ($groupclasse.Contains($_)))
							{
								$prof_classe = "Professeur-$_"
								Remove-ADGroupMember -Identity $prof_classe -Members $User -Confirm:$false
								Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
								
								if (test-path "$($rep_classes_perso)classe-$_.lnk")
								{
									Remove-Item "$($rep_classes_perso)classe-$_.lnk"
								}
								if ($s -ne "vide")
								{
									$classevr2 = $_
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
										}
									}
								}
								if (($classefinale.Contains(",$_")))
								{
									
									$classefinale = $classefinale.Replace(",$_", "")
									
								}
								elseif (($classefinale.Contains("$($_),")))
								{
									
									$classefinale = $classefinale.Replace("$($_),", "")
									
								}
								elseif (($classefinale.Contains($_)))
								{
									
									$classefinale = $classefinale.Replace($_, "")
									
								}
								
							}
							else
							{
								
								
							}
							
							
						}
						
						foreach ($group in $groupclasse)
						{
							if ($groupclasse -ne $null)
							{
								
								if (-not ($classefinale.Contains($group)))
								{
									if ($classefinale -eq $null)
									{
										$classefinale = "$group"
									}
									else
									{
										$classefinale = "$classefinale,$group"
									}
									Add-ADGroupMember -Identity $Group -Members $User
									$prof_classe = "Professeur-$Group"
									Add-ADGroupMember -Identity $prof_classe -Members $User
									
									
									if (-not (Test-Path -Path $rep_classes_perso))
									{
										New-Item -Path $rep_classes_perso -ItemType Directory -Force
										$Folder = Get-Item  $rep_classes_perso
										$Folder.Attributes += 'ReadOnly'
									}
									
									if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$Group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
										$lnk.Save()
									}
									$classevr2 = $Group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											if (-not (Test-Path -Path $using:rep_classes_perso))
											{
												New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
												$Folder = Get-Item  $using:rep_classes_perso
												$Folder.Attributes += 'ReadOnly'
											}
											
											if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
												$lnk.Save()
											}
										}
									}
									
									$siduser = ([Security2.IdentityReference2]$($user)).Sid
									Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
									add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
									
									
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
											add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
										}
									}
								}
								
							}
							else
							{
								foreach ($group in $groupclasse)
								{
									if ($groupclasse -ne $null)
									{
										if ($classefinale -eq $null)
										{
											$classefinale = "$group"
										}
										else
										{
											$classefinale = "$classefinale,$group"
										}
										Add-ADGroupMember -Identity $Group -Members $User
										$prof_classe = "Professeur-$Group"
										Add-ADGroupMember -Identity $prof_classe -Members $User
										
										
										$rep_classes_perso = "$new_rep_perso\classes\"
										if (-not (Test-Path -Path $rep_classes_perso))
										{
											New-Item -Path $rep_classes_perso -ItemType Directory -Force
											$Folder = Get-Item  $rep_classes_perso
											$Folder.Attributes += 'ReadOnly'
										}
										
										if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$Group.lnk")
											$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
											$lnk.Save()
										}
										$classevr2 = $Group
										if ($s -ne "vide")
										{
											Invoke-Command -Session $s {
												if (-not (Test-Path -Path $using:rep_classes_perso))
												{
													New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
													$Folder = Get-Item  $using:rep_classes_perso
													$Folder.Attributes += 'ReadOnly'
												}
												
												if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
												{
													$objShell = New-Object -ComObject WScript.Shell
													$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
													$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
													$lnk.Save()
												}
											}
										}
										
										$siduser = ([Security2.IdentityReference2]$($user)).Sid
										Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
										add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
										
										
										if ($s -ne "vide")
										{
											Invoke-Command -Session $s {
												Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
												Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
												add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
											}
										}
										
										
										
									}
									
								}
							}
						}
						
					}
					else
					{
						
						if ($classeactuelle -ne $null)
						{
							$classeactuelle.Split(",") | ForEach {
								
								Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
								$prof_classe = "Professeur-$_"
								Remove-ADGroupMember -Identity $prof_classe -Members $User -Confirm:$false
								
								if (test-path "$($rep_classes_perso)classe-$_.lnk")
								{
									Remove-Item "$($rep_classes_perso)classe-$_.lnk"
								}
								if ($s -ne "vide")
								{
									$classevr2 = $_
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
										}
									}
								}
								
							}
						}
						
						
					}
					
				}
				else
				{
					$classefinale = ""
					
					$classeactuelle.Split(",") | ForEach {
						
						
						Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
						$prof_classe = "Professeur-$_"
						Remove-ADGroupMember -Identity $prof_classe -Members $User -Confirm:$false
						if (test-path "$($rep_classes_perso)classe-$_.lnk")
						{
							Remove-Item "$($rep_classes_perso)classe-$_.lnk"
						}
						if ($s -ne "vide")
						{
							$classevr2 = $_
							Invoke-Command -Session $s {
								
								if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
								{
									Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
								}
							}
						}
						
					}
					
					
				}
				
				$debutclasse = $classefinale.substring(0, 1)
				if ($debutclasse -eq ",")
				{
					$classefinale -replace '^(.)', ''
				}
				$classefinestunevirgule = $classefinale.Substring($classefinale.Length - 1, 1)
				
				if ($classefinestunevirgule -eq ",")
				{
					$classefinale = $classefinale.Substring(0, $classefinale.Length - 1)
				}
				
				
				Set-ADUser $User -office $classefinale
				
				
			}
			
			if (($type_utilisateur -eq "$nom_administratifs"))
			{
				# MATIERES POUR LES ADMIN
				
				$groupmatiere = $checkedlistboxGroupsmatiere.CheckedItems
				$matierefinale = $matiereactuelle
				If ($groupmatiere -ne $null)
				{
					if ($matiereactuelle -ne $null)
					{
						$matiereactuelle.Split(",") | ForEach {
							if (-not ($groupmatiere.Contains($_)))
							{
								
								Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
								if (test-path "$($new_rep_perso)\matiere-$_.lnk")
								{
									Remove-Item "$($new_rep_perso)\matiere-$_.lnk"
								}
								if ($s -ne "vide")
								{
									$matierevr2 = $_
									Invoke-Command -Session $s {
										
										if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
										{
											Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
										}
									}
								}
								if (($matierefinale.Contains(",$_")))
								{
									
									
									$matierefinale = $matierefinale.Replace(",$_", "")
									
								}
								elseif (($matierefinale.Contains("$($_),", "")))
								{
									$matierefinale = $matierefinale.Replace("$($_),", "")
									
								}
								elseif (($matierefinale.Contains($_)))
								{
									$matierefinale = $matierefinale.Replace($_, "")
									
								}
							}
						}
						
						foreach ($group in $groupmatiere)
						{
							if ($group -ne $null)
							{
								if (-not ($matierefinale.Contains($group)))
								{
									if ($matierefinale -eq $null)
									{
										$matierefinale = "$group"
									}
									else
									{
										$matierefinale = "$matierefinale,$group"
									}
									
									
									Add-ADGroupMember -Identity $Group -Members $User
									
									
									if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
									{
										
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
										$lnk.Save()
									}
									$matierevr2 = $group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											
											if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
												$lnk.Save()
											}
										}
									}
									
									Get-Item "$($new_rep_perso)\matiere-$group.lnk" | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Modify, Synchronize
									Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Read, Synchronize
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											
											Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
											Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
										}
									}
								}
							}
						}
					}
					else
					{
						foreach ($group in $groupmatiere)
						{
							if ($groupmatiere -ne $null)
							{
								
								if ($matierefinale -eq $null)
								{
									$matierefinale = "$group"
								}
								else
								{
									$matierefinale = "$matierefinale,$group"
								}
								
								
								Add-ADGroupMember -Identity $Group -Members $User
								
								
								if (-not (test-path "$($new_rep_perso)\matiere-$group.lnk"))
								{
									
									$objShell = New-Object -ComObject WScript.Shell
									$lnk = $objShell.CreateShortcut("$($new_rep_perso)\matiere-$group.lnk")
									$lnk.TargetPath = "\\$nom_serveur\matiere-$group"
									$lnk.Save()
								}
								$matierevr2 = $group
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										
										if (-not (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
											$lnk.TargetPath = "\\$using:nom_serveur2\matiere-$using:matierevr2"
											$lnk.Save()
										}
									}
								}
								
								Get-Item "$($new_rep_perso)\matiere-$group.lnk" | Disable-NTFSAccessInheritance
								Remove-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Modify, Synchronize
								Add-NTFSAccess -Path "$($new_rep_perso)\matiere-$group.lnk" -Account $User -AccessRights Read, Synchronize
								if ($s -ne "vide")
								{
									Invoke-Command -Session $s {
										
										Get-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Modify, Synchronize
										Add-NTFSAccess -Path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk" -Account $($using:user) -AccessRights Read, Synchronize
									}
								}
								
								
								
								
							}
						}
					}
					
				}
				else
				{
					$matierefinale = ""
					
					$matiereactuelle.Split(",") | ForEach {
						
						Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
						if (test-path "$($new_rep_perso)\matiere-$_.lnk")
						{
							Remove-Item "$($new_rep_perso)\matiere-$_.lnk"
						}
						if ($s -ne "vide")
						{
							$matierevr2 = $_
							Invoke-Command -Session $s {
								
								if (test-path "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk")
								{
									Remove-Item "$($using:new_rep_perso)\matiere-$using:matierevr2.lnk"
								}
							}
						}
						
						
					}
					
					
				}
				$debutmatiere = $matierefinale.substring(0, 1)
				if ($debutmatiere -eq ",")
				{
					$matierefinale -replace '^(.)', ''
				}
				$matierefinestunevirgule = $matierefinale.Substring($matierefinale.Length - 1, 1)
				
				if ($matierefinestunevirgule -eq ",")
				{
					$matierefinale = $matierefinale.Substring(0, $matierefinale.Length - 1)
				}
				
				Set-ADUser $User -division $matierefinale
				
				# CLASSES POUR LES ADMIN
				
				$groupclasse = $checkedlistboxclasses.CheckedItems
				$classefinale = $classeactuelle
				$rep_classes_perso = "$new_rep_perso\classes\"
				
				If ($groupclasse -ne $null)
				{
					if ($classeactuelle -ne $null)
					{
						$classeactuelle.Split(",") | ForEach {
							if (-not ($groupclasse.Contains($_)))
							{
								
								Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
								$prof_classe = "Professeur-$_"
								Remove-ADGroupMember -Identity $prof_classe -Members $User -Confirm:$false
								if (test-path "$($rep_classes_perso)classe-$_.lnk")
								{
									Remove-Item "$($rep_classes_perso)classe-$_.lnk"
								}
								if ($s -ne "vide")
								{
									$classevr2 = $_
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
										}
									}
								}
								if (($classefinale.Contains(",$_")))
								{
									
									$classefinale = $classefinale.Replace(",$_", "")
									
								}
								elseif (($classefinale.Contains("$($_),")))
								{
									
									$classefinale = $classefinale.Replace("$($_),", "")
									
								}
								elseif (($classefinale.Contains($_)))
								{
									
									$classefinale = $classefinale.Replace($_, "")
									
								}
								
							}
						}
						
						foreach ($group in $groupclasse)
						{
							if ($groupclasse -ne $null)
							{
								
								if (-not ($classefinale.Contains($group)))
								{
									if ($classefinale -eq $null)
									{
										$classefinale = "$group"
									}
									else
									{
										$classefinale = "$classefinale,$group"
									}
									Add-ADGroupMember -Identity $Group -Members $User
									$prof_classe = "Professeur-$Group"
									Add-ADGroupMember -Identity $prof_classe -Members $User 
									
									if (-not (Test-Path -Path $rep_classes_perso))
									{
										New-Item -Path $rep_classes_perso -ItemType Directory -Force
										$Folder = Get-Item  $rep_classes_perso
										$Folder.Attributes += 'ReadOnly'
									}
									
									if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
									{
										$objShell = New-Object -ComObject WScript.Shell
										$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$Group.lnk")
										$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
										$lnk.Save()
									}
									$classevr2 = $Group
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											if (-not (Test-Path -Path $using:rep_classes_perso))
											{
												New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
												$Folder = Get-Item  $using:rep_classes_perso
												$Folder.Attributes += 'ReadOnly'
											}
											
											if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
											{
												$objShell = New-Object -ComObject WScript.Shell
												$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
												$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
												$lnk.Save()
											}
										}
									}
									
									$siduser = ([Security2.IdentityReference2]$($user)).Sid
									Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
									Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
									add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
									
									
									if ($s -ne "vide")
									{
										Invoke-Command -Session $s {
											Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
											Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
											add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
										}
									}
								}
								
							}
							else
							{
								foreach ($group in $groupclasse)
								{
									if ($groupclasse -ne $null)
									{
										if ($classefinale -eq $null)
										{
											$classefinale = "$group"
										}
										else
										{
											$classefinale = "$classefinale,$group"
										}
										Add-ADGroupMember -Identity $Group -Members $User
										$prof_classe = "Professeur-$Group"
										Add-ADGroupMember -Identity $prof_classe -Members $User
										
										$rep_classes_perso = "$new_rep_perso\classes\"
										if (-not (Test-Path -Path $rep_classes_perso))
										{
											New-Item -Path $rep_classes_perso -ItemType Directory -Force
											$Folder = Get-Item  $rep_classes_perso
											$Folder.Attributes += 'ReadOnly'
										}
										
										if (-not (test-path "$($rep_classes_perso)classe-$Group.lnk"))
										{
											$objShell = New-Object -ComObject WScript.Shell
											$lnk = $objShell.CreateShortcut("$($rep_classes_perso)classe-$_.lnk")
											$lnk.TargetPath = "\\$nom_serveur\classe-$Group"
											$lnk.Save()
										}
										$classevr2 = $Group
										if ($s -ne "vide")
										{
											Invoke-Command -Session $s {
												if (-not (Test-Path -Path $using:rep_classes_perso))
												{
													New-Item -Path $using:rep_classes_perso -ItemType Directory -Force
													$Folder = Get-Item  $using:rep_classes_perso
													$Folder.Attributes += 'ReadOnly'
												}
												
												if (-not (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk"))
												{
													$objShell = New-Object -ComObject WScript.Shell
													$lnk = $objShell.CreateShortcut("$($using:rep_classes_perso)classe-$using:classevr2.lnk")
													$lnk.TargetPath = "\\$using:nom_serveur2\classe-$using:classevr2"
													$lnk.Save()
												}
											}
										}
										
										$siduser = ([Security2.IdentityReference2]$($user)).Sid
										Get-Item $rep_classes_perso | Disable-NTFSAccessInheritance
										Remove-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Modify, Synchronize
										add-NTFSAccess -path $rep_classes_perso -Account $siduser -AccessRights Read
										
										
										if ($s -ne "vide")
										{
											Invoke-Command -Session $s {
												Get-Item $using:rep_classes_perso | Disable-NTFSAccessInheritance
												Remove-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Modify, Synchronize
												add-NTFSAccess -path $using:rep_classes_perso -Account $using:siduser -AccessRights Read
											}
										}
										
										
										
									}
									
								}
							}
						}
						
					}
					else
					{
						
						if ($classeactuelle -ne $null)
						{
							$classeactuelle.Split(",") | ForEach {
								
								Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
								$prof_classe = "Professeur-$_"
								Remove-ADGroupMember -Identity $prof_classe -Members $User -Confirm:$false
								
								if (test-path "$($rep_classes_perso)classe-$_.lnk")
								{
									Remove-Item "$($rep_classes_perso)classe-$_.lnk"
								}
								if ($s -ne "vide")
								{
									$classevr2 = $_
									Invoke-Command -Session $s {
										
										if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
										{
											Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
										}
									}
								}
								
							}
						}
						
						
					}
					
				}
				else
				{
					$classefinale = ""
					
					$classeactuelle.Split(",") | ForEach {
						
						
						Remove-ADGroupMember -Identity $_ -Members $User -Confirm:$false
						$prof_classe = "Professeur-$_"
						Remove-ADGroupMember -Identity $prof_classe -Members $User -Confirm:$false
						
						if (test-path "$($rep_classes_perso)classe-$_.lnk")
						{
							Remove-Item "$($rep_classes_perso)classe-$_.lnk"
						}
						if ($s -ne "vide")
						{
							$classevr2 = $_
							Invoke-Command -Session $s {
								
								if (test-path "$($using:rep_classes_perso)classe-$using:classevr2.lnk")
								{
									Remove-Item "$($using:rep_classes_perso)classe-$using:classevr2.lnk"
								}
							}
						}
						
					}
					
					
				}
				
				$debutclasse = $classefinale.substring(0, 1)
				if ($debutclasse -eq ",")
				{
					$classefinale -replace '^(.)', ''
				}
				$classefinestunevirgule = $classefinale.Substring($classefinale.Length - 1, 1)
				
				if ($classefinestunevirgule -eq ",")
				{
					$classefinale = $classefinale.Substring(0, $classefinale.Length - 1)
				}
				
				Set-ADUser $User -office $classefinale
			}
		
			
			
			$progressbaruser.PerformStep()
			
		}
		if ($ajoutsuppr -eq "ok")
		{
			
			[System.Windows.Forms.MessageBox]::Show("Modifications apportées aux utilisateurs choisis", "Information", 'OK')
		}
		
		$progressbaruser.Value = 0
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show("Vous devez chosir un ou plusieurs utilisateurs", "Information", 'OK')
		
	}
	
	#Reset-Form
}




function aide
{
		param (
			[Parameter(Mandatory = $true, Position = 0)]
			[string]$fichieraide)
	
	Invoke-Item "$fichieraide"
	
	
	
}


function Get-FileEncoding
{
	
	param (
		
		$Path
	)
	
	Set-StrictMode -Version Latest
	
	
	$encodings = @{ }
	
	$encodingMembers = [System.Text.Encoding] |
	Get-Member -Static -MemberType Property
	
	$encodingMembers | Foreach-Object {
		$encodingBytes = [System.Text.Encoding]::($_.Name).GetPreamble() -join '-'
		$encodings[$encodingBytes] = $_.Name
	}
	
	
	$encodingLengths = $encodings.Keys | Where-Object { $_ } |
	Foreach-Object { ($_ -split '-').Count }
	
	
	$result = 'UTF7'
	
	
	foreach ($encodingLength in $encodingLengths | Sort-Object -Descending)
	{
		$bytes = (Get-Content -encoding byte -readcount $encodingLength $path)[0]
		$encoding = $encodings[$bytes -join '-']
		
		
		if ($encoding)
		{
			$result = $encoding
			break
		}
	}
	
	[System.Text.Encoding]::$result
}

#Sample function that provides the location of the script
function Get-ScriptDirectory
{
<#
	.SYNOPSIS
		Get-ScriptDirectory returns the proper location of the script.

	.OUTPUTS
		System.String
	
	.NOTES
		Returns the correct path within a packaged executable.
#>
	[OutputType([string])]
	param ()
	if ($null -ne $hostinvocation)
	{
		Split-Path $hostinvocation.MyCommand.path
	}
	else
	{
		Split-Path $script:MyInvocation.MyCommand.Path
	}
}

[string]$ScriptDirectory = Get-ScriptDirectory



[int]$Global:click = 0


# Fonction pour nettoyer tous les noms de groupes de caracteres parasites
function CleanGroupName
{
	param (
		[string]$groupes
	)
	
	$groupes = $groupes -replace '[^a-zA-Z0-9,-]', ''
	$groupes = $groupes -replace '[àáâä]', 'a'
	$groupes = $groupes -replace '[éèêë]', 'e'
	$groupes = $groupes -replace '[îï]', 'i'
	$groupes = $groupes -replace '[ôö]', 'o'
	$groupes = $groupes -replace '[ùûü]', 'u'
	
	return $groupes
}










# Fonction pour les mises à jour des fichiers ce classe élève
function GenererFichiersClasses

{
		
		param (
			
			[Parameter(Mandatory = $true, Position = 0)]
			[string]$deuxserveurs
		)
		
		
	$rep_liste_classe = "$($lecteur_donnees)\Listes Classe\"
	if (-not (Test-Path -Path $rep_liste_classe))
	{
		New-Item -Path $rep_liste_classe -ItemType Directory
	}
	if ($deuxserveurs)
	{
		[string]$nom_serveur = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name nom_serveur -ErrorAction SilentlyContinue).nom_serveur
		[string]$nom_serveur2 = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name nom_serveur2 -ErrorAction SilentlyContinue).nom_serveur2
		if ($nom_serveur2 -ne "")
		{
			$serveurencours = $env:computername
			$fqdnserveur1 = "$($nom_serveur).$domaine"
			$fqdnserveur2 = "$($nom_serveur2).$domaine"
			if ($serveurencours -eq $nom_serveur)
			{
				$s = New-PSSession -ComputerName $fqdnserveur2
			}
			elseif ($serveurencours -eq $nom_serveur2)
			{
				$s = New-PSSession -ComputerName $fqdnserveur1
			}
		}

		Invoke-Command -Session $s {
			$rep_liste_classe_svr2 = "$($using:lecteur_donnees)\Listes Classe\"
			if (-not (Test-Path -Path $rep_liste_classe_svr2))
			{
				New-Item -Path $rep_liste_classe_svr2 -ItemType Directory
			}
		}
		
	}
	
	$sideleves = ([Security2.IdentityReference2]$nom_eleves).Sid
	$sidprof = ([Security2.IdentityReference2]$nom_professeurs).Sid
	# Récupération de la date actuelle pour l'en-tête du fichier
	$date = Get-Date -Format "dd/MM/yyyy"
	
	# Récupération de la liste des sous-OU de l'OU principale
	$sub_OUs = Get-ADOrganizationalUnit -Filter * -SearchBase $ou_utilisateur_base_eleve -SearchScope OneLevel
	
	
	
	
	# Parcours de chaque sous-OU
	foreach ($sub_OU in $sub_OUs)
	{
		# Récupération des utilisateurs de la sous-OU triés par nom
		$users = Get-ADUser -Filter * -SearchBase $sub_OU.DistinguishedName -Properties Surname, GivenName, SamAccountName | Sort-Object -Property "Surname", "GivenName"
		
		# Détermination du chemin de destination pour le fichier en fonction du serveur utilisé
		

#		if ($deuxserveurs)
#		{
#			$chemindestination1 = "\\$nom_serveur\classe-$($sub_OU.Name)\ressources\"
#			$chemindestination2 = "\\$nom_serveur2\classe-$($sub_OU.Name)\ressources\"
#			$chemindestination3 = $rep_liste_classe
#			
#		}
#		else
#		{
#			$chemindestination1 = "\\$nom_serveur\classe-$($sub_OU.Name)\ressources\"
#			$chemindestination2 = $rep_liste_classe
		#		}
		
		$chemindestination1 = "\\$nom_serveur\classe-$($sub_OU.Name)\ressources\"
		$chemindestination2 = $rep_liste_classe
		
		# Création du nom de fichier pour la sous-OU
		$nomfichier = "Liste utilisateurs de la classe $($sub_OU.Name).txt"
		
		# Création de l'en-tête du fichier
		$entete = "Fichier de la classe $($sub_OU.Name) généré le $date`r`n`r`n`r`n`r`n"
		
		# Création du contenu du fichier
		$contenu = $entete
		foreach ($user in $users)
		{
			$nom = $user.Surname
			$prenom = $user.GivenName
			$login = $user.SamAccountName
			$contenu += "$nom  $prenom       $login`r`n"
		}
		
		# Détermination du chemin de destination pour le fichier en fonction du serveur utilisé
		if ($deuxserveurs)
		{
			# Création du chemin complet du fichier de destination
			$cheminfichier1 = "$($chemindestination1)$($nomfichier)"
			$cheminfichier2 = "$($chemindestination2)$($nomfichier)"
#			$cheminfichier3 = "$($chemindestination3)$($nomfichier)"
			# Écriture du contenu dans le fichier de destination
			$contenu | Out-File -FilePath $cheminfichier1
			$contenu | Out-File -FilePath $cheminfichier2
#			$contenu | Out-File -FilePath $cheminfichier3
			# Ajouter des autorisations pour le groupe "professeurs"
			Add-NTFSAccess -Path $cheminfichier1 -Account $sidprof -AccessRights ReadAndExecute
			add-NTFSAccess -path $cheminfichier1 -Account $sidprof -AccessRights Write, Delete -AccessType Deny
			# Ajouter des autorisations pour le groupe "eleve"
			Add-NTFSAccess -Path $cheminfichier1 -Account $sideleves -AccessRights ReadAndExecute, ReadAttributes, ReadPermissions, Synchronize, Write, Delete -AccessType Deny
			Invoke-Command -Session $s {
#				# Ajouter des autorisations pour le groupe "professeurs"
#				Add-NTFSAccess -Path $using:cheminfichier2 -Account $using:sidprof -AccessRights ReadAndExecute
#				add-NTFSAccess -path $using:cheminfichier2 -Account $using:sidprof -AccessRights Write, Delete -AccessType Deny
#				# Ajouter des autorisations pour le groupe "eleve"
#				Add-NTFSAccess -Path $using:cheminfichier2 -Account $using:sideleves -AccessRights ReadAndExecute, ReadAttributes, ReadPermissions, Synchronize, Write, Delete -AccessType Deny
				#				$using:contenu | Out-File -FilePath $using:cheminfichier3
				$using:contenu | Out-File -FilePath $using:cheminfichier2
				
			}
		}
		else
		{
			# Création du chemin complet du fichier de destination
			$cheminfichier1 = "$($chemindestination1)$($nomfichier)"
			$cheminfichier2 = "$($chemindestination2)$($nomfichier)"
			
			# Écriture du contenu dans le fichier de destination
			$contenu | Out-File -FilePath $cheminfichier1
			$contenu | Out-File -FilePath $cheminfichier2
			# Ajouter des autorisations pour le groupe "professeurs"
			Add-NTFSAccess -Path $cheminfichier1 -Account $sidprof -AccessRights ReadAndExecute
			add-NTFSAccess -path $cheminfichier1 -Account $sidprof -AccessRights Write, Delete -AccessType Deny
			# Ajouter des autorisations pour le groupe "eleve"
			Add-NTFSAccess -Path $cheminfichier1 -Account $sideleves -AccessRights ReadAndExecute, ReadAttributes, ReadPermissions, Synchronize -AccessType Deny
		}
		
		
		
	}
	

	
	
	
}


function generer_liste_utilisateur
{
	
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[ValidateSet('agents', 'Administratifs', 'Professeurs', 'Examens', 'Invités', 'Elèves')]
		[string]$type_saisi,
		[ValidateSet('oui', 'non')]
		[string]$sous_OU_saisi,
		[string]$chemin
	)
	$type = Switch ($type_saisi)
	{
		'agents'  { 'agents' }
		'Administratifs'    { 'Administratifs' }
		'Professeurs'  { 'Professeurs' }
		'Examens'  { 'Examens' }
		'Invités'  { 'Invités' }
		'Elèves'  { 'Elèves' }
		Default { 'Professeurs' }
	}
	$sous_OU = Switch ($sous_OU_saisi)
	{
		'oui'  { 'oui' }
		'non'    { 'non' }
		Default { 'non' }
	}
	#TODO: Place custom script here
	Import-Module ActiveDirectory
	
	
	if ($type -eq "agents")
	{
		$ou = $ou_utilisateur_base_agents
		$nomfichier = $type
	}
	elseif ($type -eq "Administratifs")
	{
		$ou = $ou_utilisateur_base_admin
		$nomfichier = $type
	}
	elseif ($type -eq "Professeurs")
	{
		$ou = $ou_utilisateur_base_prof
		$nomfichier = $type
	}
	elseif ($type -eq "Examens")
	{
		$ou = $ou_utilisateur_base_examens
		$nomfichier = $type
		$entete = "Groupe"
	}
	elseif ($type -eq "Invités")
	{
		$ou = $ou_utilisateur_base_invites
		$nomfichier = $type
		$entete = "Groupe"
	}
	elseif ($type -eq "Elèves")
	{
		$ou = $ou_utilisateur_base_eleve
		$nomfichier = $type
		$entete = "Classe"
	}
	
	
	
	
	# Récupérez les utilisateurs dans l'OU spécifié
	$users = Get-ADUser -Filter * -SearchBase $ou -Properties GivenName, Surname, SamAccountName, POBox
	
	if (!$users)
	{
		# Afficher un message de confirmation lorsque le téléchargement est terminé
		[System.Windows.Forms.MessageBox]::Show("Pas d'utilisateurs du groupe $type, génération du fichier csv abandonnée")
		return
	}
	
	# Créez un objet PS contenant les champs à exporter
	
	if ($sous_OU -eq "oui")
	{
		$export = $users | Select-Object GivenName, Surname, SamAccountName, POBox, @{
			Name = $entete; Expression = {
				if ($_.distinguishedName -match 'OU=(.+?),(OU|DC)=') { $matches[1] }
				else { '' }
			}
		}
		
	}
	else
	{
		$export = $users | Select-Object GivenName, Surname, SamAccountName, POBox
	}
	
	
	
	if ($chemin -ne "")
	{
		# Construire le chemin d'accès complet du fichier de destination, en utilisant le nom de fichier original
		$destination = Join-Path $chemin ("Liste compte $nomfichier.csv")
		
		# Exportez les données dans un fichier CSV
		$export | export-csv $destination -Delimiter ';' -NoTypeInformation -Encoding UTF8
		set-content "$destination" ((get-content "$destination") -replace 'givenname', 'Prénom')
		set-content "$destination" ((get-content "$destination") -replace 'surname', 'Nom')
		set-content "$destination" ((get-content "$destination") -replace 'POBox', 'Mot de passe initial')
		set-content "$destination" ((get-content "$destination") -replace 'SamAccountName', 'Login')
		set-content "$destination" ((get-content "$destination") -replace '"', '')
	}
	else
	{
		# Créer un objet FolderBrowserDialog pour permettre à l'utilisateur de choisir où enregistrer le fichier CSV téléchargé
		$dialog = New-Object System.Windows.Forms.FolderBrowserDialog
		$dialog.Description = "Sélectionnez un répertoire pour enregistrer le fichier CSV."
		
		# Si l'utilisateur a sélectionné un répertoire valide, télécharger le fichier CSV à cet emplacement
		if ($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Construire le chemin d'accès complet du fichier de destination, en utilisant le nom de fichier original
			$destination = Join-Path $dialog.SelectedPath ("Liste compte $nomfichier.csv")
			
			# Exportez les données dans un fichier CSV
			$export | export-csv $destination -Delimiter ';' -NoTypeInformation -Encoding UTF8
			set-content "$destination" ((get-content "$destination") -replace 'givenname', 'Prénom')
			set-content "$destination" ((get-content "$destination") -replace 'surname', 'Nom')
			set-content "$destination" ((get-content "$destination") -replace 'POBox', 'Mot de passe initial')
			set-content "$destination" ((get-content "$destination") -replace 'SamAccountName', 'Login')
			set-content "$destination" ((get-content "$destination") -replace '"', '')
			
			# Afficher un message de confirmation lorsque le téléchargement est terminé
			[System.Windows.Forms.MessageBox]::Show("Le fichier CSV a été généré avec succès dans $destination !")
		}
	}
	
}








#region Get-DateSortable
function Get-datesortable
{
	$global:datesortable = Get-Date -Format "HH':'mm':'ss"
	return $global:datesortable
}#endregion Get-DateSortable



#region Add-Logs
function Add-Logs
{
	[CmdletBinding()]
	param ($text)
	Get-datesortable
	$console.Text += "[$global:datesortable] - $text
"
	Set-Alias alogs Add-Logs -Description "Add content to the TextBoxLogs"
	Set-Alias Add-Log Add-Logs -Description "Add content to the TextBoxLogs"
}#endregion Add Logs

function refresh_salle
{
	$OUTreemachine = (Get-ADOrganizationalUnit -searchbase "$OU_postes" -SearchScope OneLevel -Filter * -Properties name | Sort-Object | Select-Object -Property name).name
	$Global:OriginalData2 = $OUTreemachine
	If ($null -eq $OUTreemachine)
	{
		$InfoMessage = 'Attention: Aucune salle de créée'
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsalle -Items $OUTreemachine
		
	}
}


function Get-FileName
{
	
	# déclaration et récupération des paramètres 
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $false)]
		[string]$WindowTitle = 'Open File',
		[Parameter(Mandatory = $false)]
		[string]$InitialDirectory,
		[Parameter(Mandatory = $false)]
		[string]$Filter = "Fichier XML (*.xml)|*.xml",
		[switch]$AllowMultiSelect
	)
	Add-Type -AssemblyName System.Windows.Forms
	
	#Création et affichage de la boite de dialogue
	
	$openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
	$openFileDialog.Title = $WindowTitle
	$openFileDialog.Filter = $Filter
	$openFileDialog.CheckFileExists = $true
	if (![string]::IsNullOrWhiteSpace($InitialDirectory)) { $openFileDialog.InitialDirectory = $InitialDirectory }
	if ($AllowMultiSelect) { $openFileDialog.MultiSelect = $true }
	
	if ($openFileDialog.ShowDialog().ToString() -eq 'OK')
	{
		if ($AllowMultiSelect)
		{
			$selected = @($openFileDialog.Filenames)
		}
		else
		{
			$selected = $openFileDialog.Filename
		}
	}
	# clean-up
	$openFileDialog.Dispose()
	
	return $selected
}

function Get-FileName-csv
{
	
	# déclaration et récupération des paramètres 
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $false)]
		[string]$WindowTitle = 'Open File',
		[Parameter(Mandatory = $false)]
		[string]$InitialDirectory,
		[Parameter(Mandatory = $false)]
		[string]$Filter = "Fichier CSV (*.csv)|*.csv",
		[switch]$AllowMultiSelect
	)
	Add-Type -AssemblyName System.Windows.Forms
	
	#Création et affichage de la boite de dialogue
	
	$openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
	$openFileDialog.Title = $WindowTitle
	$openFileDialog.Filter = $Filter
	$openFileDialog.CheckFileExists = $true
	if (![string]::IsNullOrWhiteSpace($InitialDirectory)) { $openFileDialog.InitialDirectory = $InitialDirectory }
	if ($AllowMultiSelect) { $openFileDialog.MultiSelect = $true }
	
	if ($openFileDialog.ShowDialog().ToString() -eq 'OK')
	{
		if ($AllowMultiSelect)
		{
			$selected = @($openFileDialog.Filenames)
		}
		else
		{
			$selected = $openFileDialog.Filename
		}
	}
	# clean-up
	$openFileDialog.Dispose()
	
	return $selected
}


function Get-FileName-gsnet
{
	
	
	# déclaration et récupération des paramètres 
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $false)]
		[string]$WindowTitle = 'Open File',
		[Parameter(Mandatory = $false)]
		[string]$InitialDirectory,
		[Parameter(Mandatory = $false)]
		[string]$Filter = "Fichier ini (*.ini)|*.ini",
		[switch]$AllowMultiSelect
	)
	Add-Type -AssemblyName System.Windows.Forms
	
	#Création et affichage de la boite de dialogue
	
	$openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
	$openFileDialog.Title = $WindowTitle
	$openFileDialog.Filter = $Filter
	$openFileDialog.CheckFileExists = $true
	if (![string]::IsNullOrWhiteSpace($InitialDirectory)) { $openFileDialog.InitialDirectory = $InitialDirectory }
	if ($AllowMultiSelect) { $openFileDialog.MultiSelect = $true }
	
	if ($openFileDialog.ShowDialog().ToString() -eq 'OK')
	{
		if ($AllowMultiSelect)
		{
			$selected = @($openFileDialog.Filenames)
		}
		else
		{
			$selected = $openFileDialog.Filename
		}
	}
	# clean-up
	$openFileDialog.Dispose()
	
	return $selected
	
	
}



function quitter_script
{
	
	# Fonction d'affichage de fenêtre de fermeture avec choix oui/non
	
	$reponse = Show-fenetre_ouinon "Vous n'avez pas choisi de fichier, voulez-vous quitter ?" -Titre "Sortie d'application" -Buttons YesNo -Icon Question
	
	if ($reponse -eq [System.Windows.Forms.DialogResult]::Yes)
	{
		$reponse = "ferme"
	}
	else
	{
		$reponse = ""
	}
	
	return $reponse
}

function Show-fenetre_ouinon
{
	
	param (
		[string]$Message = "Message",
		[string]$Titre = "Titre",
		[System.Windows.Forms.MessageBoxButtons]$Buttons = [System.Windows.Forms.MessageBoxButtons]::OK,
		[System.Windows.Forms.MessageBoxIcon]$Icon = [System.Windows.Forms.MessageBoxIcon]::None
	)
	
	# Charger la bibliothèque d'objets graphiques Windows.Forms
	[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null
	
	# Afficher la boite de dialogue et renvoi la valeur de retour (de type DialogResult)
	Return [System.Windows.Forms.MessageBox]::Show($Message, $Titre, $Buttons, $Icon)
}

function selection_fichier_scribe
{
	
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$fichiervoulu,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$rep_defaut
		
	)
	
	$fichier = ""
	$chemin_fichier = "0"
	
	
	while (-not ($fichier -like "$fichiervoulu*"))
	{
		
		
		if ($chemin_fichier -ne "0")
		{
			if ($chemin_fichier -ne $null)
			{
				[System.Windows.forms.MessageBox]::Show('Le fichir choisi n''est pas le bon', 'Mauvais fichier choisi', 'OK', 'Error')
				$chemin_fichier = ""
			}
		}
		
		$chemin_fichier = Get-FileName -WindowTitle "Selection du fichier $fichiervoulu" -InitialDirectory $rep_defaut
		
		if ($chemin_fichier -eq $null)
		{
			$testreponse = quitter_script
		}
		
		if ($testreponse -ne "ferme")
		{
			$fichier = Split-Path $chemin_fichier -leaf
		}
		else
		{
			break
		}
		# extrait le nom du fichier d'un chemin complet
		
		
		
	}
	
	return $chemin_fichier
}


function comptage_user
{
	$labelnbprof.Text = (Get-ADGroupMember "professeurs").Count
	$labelnbeleve.Text = (Get-ADGroupMember "eleves").Count
	$labelnbadmin.Text = (Get-ADGroupMember "administratifs").Count
	$labelnbagents.Text = (Get-ADGroupMember "agents").Count
	$labelnbexam.Text = (Get-ADGroupMember "examens").Count
	$labelnbext.Text = (Get-ADGroupMember "exterieurs").Count
	$labelnbadministrateurs.Text = ((Get-ADGroupMember "Administrateurs" -Recursive).count - 2)
	
}

function copie_outil
{
	param (
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$nomserveur)
	
	$ScriptDirectory = Get-ScriptDirectory
	$source = "Microsoft.PowerShell.Core\FileSystem::$ScriptDirectory"
	$destination = "Microsoft.PowerShell.Core\FileSystem::\\$nomserveur\c$"
	Copy-Item -path $ScriptDirectory -Destination $destination -Recurse -Force
	
	
}

function Get-Form
{
	param (
		[string]$Name
	)
	[System.Windows.Forms.Application]::OpenForms | where { $_.Name -eq $Name }
}


function selection_fichier_csv
{
	
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$rep_defaut
		
	)
	
	$fichier = ""
	$chemin_fichier = "0"
	
	
	
	
		$chemin_fichier = Get-FileName-csv -WindowTitle "Selection du fichier CSV d'import" -InitialDirectory $rep_defaut
		
		if ($chemin_fichier -eq $null)
		{
			$testreponse = quitter_script
		}
		
		if ($testreponse -ne "ferme")
		{
			$fichier = Split-Path $chemin_fichier -leaf
			# Stocker le nouveau répertoire initial dans la variable globale
			$global:repertoire_initial = Split-Path $chemin_fichier
		}
		else
		{
			throw "fermeture"
		}
		# extrait le nom du fichier d'un chemin complet
		

	
	
	return $chemin_fichier
}


function selection_fichier_GSnet
{
	
	param (
		
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$fichiervoulu,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$rep_defaut
		
	)
	
	$fichier = ""
	$chemin_fichier = "0"
	
	
	while (-not ($fichier -like "$fichiervoulu*"))
	{
		
		
		if ($chemin_fichier -ne "0")
		{
			if ($chemin_fichier -ne $null)
			{
				[System.Windows.forms.MessageBox]::Show('Le fichir choisi n''est pas le bon', 'Mauvais fichier choisi', 'OK', 'Error')
				$chemin_fichier = ""
			}
		}
		
		$chemin_fichier = Get-FileName-gsnet -WindowTitle "Selection du fichier $fichiervoulu" -InitialDirectory $rep_defaut
		
		if ($chemin_fichier -eq $null)
		{
			$testreponse = quitter_script
		}
		
		if ($testreponse -ne "ferme")
		{
			$fichier = Split-Path $chemin_fichier -leaf
		}
		else
		{
			break
		}
		# extrait le nom du fichier d'un chemin complet
		
		
		
	}
	
	return $chemin_fichier
}

function Get-IniContent ($filePath)
{
	$ini = @{ }
	switch -regex -file $FilePath
	{
		"^\[(.+)\]" # Section
		{
			$section = $matches[1]
			$ini[$section] = @{ }
			$CommentCount = 0
		}
		"^(;.*)$" # Comment
		{
			$value = $matches[1]
			$CommentCount = $CommentCount + 1
			$name = "Comment" + $CommentCount
			$ini[$section][$name] = $value
		}
		"(.+?)\s*=(.*)" # Key
		{
			$name, $value = $matches[1 .. 2]
			$ini[$section][$name] = $value
		}
	}
	return $ini
}



function Remove-StringLatinCharacters
{
	PARAM ([string]$String)
	[Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($String))
	
}

Function RemoveSpecialCaracters($string)
{
	$string = Remove-StringLatinCharacters($string)
	$string = $string.ToLower()
	$string = ($string -split ('-'))[0]
	$string = ($string -split (' '))[0]
	$string = $string -replace '[^a-z0-9]'
	
	return $string
}

Function SetLogin
{
	Param
	(
		[Parameter(Mandatory = $true, Position = 0)]
		[string]$prenom,
		[Parameter(Mandatory = $true, Position = 1)]
		[string]$nom,
		[Parameter(Mandatory = $true, Position = 2)]
		[string[]]$arrayLogin
	)
	Process
	{
		$login = $prenom + "." + $nom
		
		#Traitement si login superieur a 20 caracteres#
		if ($login.length -gt 20)
		{
			$login = $login.Substring(0, 20)
		}
		
		#Verification du login + incrementation en cas homonyme#
		while ($arrayLogin -contains $login)
		{
			
			#Traitement si login superieur a 19 caracteres et a un homonyme#
			$i++
			
			if ($login.length -gt 20 - $i.length)
			{
				$login = $prenom + "." + $nom
				$login = $login.Substring(0, 20 - $i.length) + $i
			}
			else
			{
				$login = $prenom + "." + $nom + $i
			}
		}
		return $login
	}
}


function mep-userlog
{
	
		
	$ExistingADUserlog = Get-ADUser -Filter "SamAccountName -eq 'userlog'"
	
	$domaine_DN = (Get-ADDomain | select -ExpandProperty DistinguishedName)
	$netlogon_logs = "\\$domaine\NETLOGON\logs"
	$mypath = $MyInvocation.MyCommand.Path
	$rep = Split-Path $mypath -Parent
	$stockagelogs = "$lecteur_donnees\logs"
	
	$OU_utilisateur_base = "OU=$OU_utilisateur,$domaine_DN"
	$User = "$domaine\userlog"
	$PWord = ConvertTo-SecureString -String "P@sSwOrd" -AsPlainText -Force
	$Credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $PWord
	
	if (-not (Test-Path -Path $netlogon_logs))
	{
		$null = New-Item -Path $netlogon_logs -ItemType Directory
	}
	
	
	
	# Si l'utilisateur n'existe pas alors on le créé
	if ($null -eq $ExistingADUserlog)
	{
		New-AdUser -Name "utilisateur log" -GivenName "utilisateur" -Surname "log" -SamAccountName "userlog" -Path "CN=users,$domaine_DN" -Enabled $true -AccountPassword ($PWord) -passThru | Out-Null
		Set-ADUser -Identity userlog -PasswordNeverExpires $true
		Set-ADObject -Identity "CN=utilisateur log,CN=Users,DC=eanna,DC=int" -protectedFromAccidentalDeletion $True
		$Key = New-Object Byte[] 32
		[Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($Key)
		$Key | out-file "$netlogon_logs\aes.key"
		$Credentials.Password | ConvertFrom-SecureString -key (get-content "$netlogon_logs\aes.key") | set-content "$netlogon_logs\password.txt"
		Copy-Item "$rep\fichiers\ouverture_session.ps1" -Destination $netlogon_logs | Out-Null
		Copy-Item "$rep\fichiers\fermeture_session.ps1" -Destination $netlogon_logs | Out-Null
		
	}
	else
	{
		Write-Host -ForegroundColor yellow "L'utilisateur existe déjà rien à faire"
	}
	
	
	
	Write-Host "CREATION DU PARTAGE LOGS ET MISE EN PLACE DES DROITS" -ForegroundColor red -BackgroundColor white
	
	if (-not (Test-Path -Path $stockagelogs))
	{
		Write-Host -ForegroundColor Green "Création du répertoire logs dans le lecteur donnees"
		$null = New-Item -Path $stockagelogs -ItemType Directory
	}
	
	
	# récupère les droits
	$acl = Get-Acl -Path $stockagelogs
	
	
	# ajoute les permissions
	$acl.SetAccessRuleProtection($True, $False)
	
	$regle_admin = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrateurs", "FullControl", "ContainerInherit, ObjectInherit", "None", "Allow")
	
	
	$regle_user = New-Object System.Security.AccessControl.FileSystemAccessRule("userlog", "Modify", "ContainerInherit, ObjectInherit", "None", "Allow")
	
	$rules = $regle_admin, $regle_user
	
	foreach ($rule in $rules)
	{
		$acl.AddAccessRule($rule)
	}
	# ajoute les permissions
	$acl | Set-Acl -Path $stockagelogs
	
	
	# créé le partage
	if (!(Get-SMBShare -Name "logs" -ea 0))
	{
		New-SMBShare -Name "" -Path $stockagelogs -FullAccess "Tout le monde" -ea 0 | Out-Null
	}
	
	
	Write-Host "CREATION DE LA GPO ET APPLICATION SUR L OU UTILISATEURS" -ForegroundColor red -BackgroundColor white
	
	Import-Module GroupPolicy
	$app = new-object -com Shell.Application
	
	$GPOFolderName = "$rep\GPO"
	
	$import_array = get-childitem $GPOFolderName | Select name
	foreach ($ID in $import_array)
	{
		$XMLFile = $GPOFolderName + "\" + $ID.Name + "\gpreport.xml"
		$XMLData = [XML](get-content $XMLFile)
		$GPOName = $XMLData.GPO.Name
		$gpoexiste = Get-GPO -Name $GPOName
		if ($null -eq $gpoexiste)
		{
			import-gpo -BackupId $ID.Name -TargetName $GPOName -path $GPOFolderName -CreateIfNeeded
			Start-Sleep -s 5
			New-GPLink -Name $GPOName -Target $OU_utilisateur_base -LinkEnabled Yes
		}
	}
	
	
}
#Sample variable that provides the location of the script



$RegKey = Get-Item 'HKLM:\Software\EannaAD\' -ErrorAction SilentlyContinue
[string]$version_installee = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name version_installee -ErrorAction SilentlyContinue).version_installee
[string]$OU_base = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name DNAD -ErrorAction SilentlyContinue).DNAD
[string]$domaine = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name domaine -ErrorAction SilentlyContinue).domaine
[string]$netlogon = "\\$($domaine)\NETLOGON\"
[string]$nom_serveur = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name nom_serveur -ErrorAction SilentlyContinue).nom_serveur
[string]$nom_serveur2 = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name nom_serveur2 -ErrorAction SilentlyContinue).nom_serveur2
[string]$nom_ordinateurs = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_ordinateurs -ErrorAction SilentlyContinue).nom_ordinateurs
[string]$nom_serveurs = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_serveurs -ErrorAction SilentlyContinue).nom_serveurs
[string]$nom_eleves = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_eleves -ErrorAction SilentlyContinue).nom_eleves
[string]$nom_professeurs = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_professeurs -ErrorAction SilentlyContinue).nom_professeurs
[string]$nom_administratifs = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_administratifs -ErrorAction SilentlyContinue).nom_administratifs
[string]$nom_invites = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_invites -ErrorAction SilentlyContinue).nom_invites
[string]$nom_agents = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_agents -ErrorAction SilentlyContinue).nom_agents
[string]$nom_examens = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Noms' | Get-ItemProperty -Name nom_examens -ErrorAction SilentlyContinue).nom_examens
[string]$profil = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name profil -ErrorAction SilentlyContinue).profil
[string]$RNE = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\' | Get-ItemProperty -Name RNE -ErrorAction SilentlyContinue).RNE

$listelecteurs = @('D:', 'E:', 'F:', 'G:')
Import-module ntfssecurity


[string]$chemin_appli = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Chemins' | Get-ItemProperty -Name chemin_appli -ErrorAction SilentlyContinue).chemin_appli
[string]$lecteur_donnees = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Chemins' | Get-ItemProperty -Name lecteur_donnees -ErrorAction SilentlyContinue).lecteur_donnees
[string]$chemin_gpo_description = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Chemins' | Get-ItemProperty -Name chemin_gpo_description -ErrorAction SilentlyContinue).chemin_gpo_description
[string]$chemin_gpo_glpi_agent = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Chemins' | Get-ItemProperty -Name chemin_gpo_glpi_agent -ErrorAction SilentlyContinue).chemin_gpo_glpi_agent


[string]$OU_machine = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name OU_machines -ErrorAction SilentlyContinue).OU_machines
[string]$OU_utilisateur = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name OU_utilisateur -ErrorAction SilentlyContinue).OU_utilisateur
[string]$OU_classes = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name OU_classes -ErrorAction SilentlyContinue).OU_classes
[string]$ou_groupes = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name OU_groupes -ErrorAction SilentlyContinue).OU_groupes
[string]$ou_prof = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name OU_prof -ErrorAction SilentlyContinue).OU_prof
[string]$ou_admin = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name ou_admin -ErrorAction SilentlyContinue).ou_admin
[string]$ou_invites = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name ou_invites -ErrorAction SilentlyContinue).ou_invites
[string]$ou_agents = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name ou_agents -ErrorAction SilentlyContinue).ou_agents
[string]$ou_examens = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name ou_examens -ErrorAction SilentlyContinue).ou_examens
[string]$ou_options = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name ou_options -ErrorAction SilentlyContinue).ou_options
[string]$ou_matieres = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name ou_matieres -ErrorAction SilentlyContinue).ou_matieres
[string]$OU_classe = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name OU_classe -ErrorAction SilentlyContinue).OU_classe
[string]$OU_TEMP = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\OU' | Get-ItemProperty -Name ou_temp -ErrorAction SilentlyContinue).ou_temp



[string]$quota_eleve = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name quota_eleve -ErrorAction SilentlyContinue).quota_eleve
[string]$quota_prof = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name quota_prof -ErrorAction SilentlyContinue).quota_prof
[string]$quota_admin = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name quota_admin -ErrorAction SilentlyContinue).quota_admin
[string]$quota_invite = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name quota_invite -ErrorAction SilentlyContinue).quota_invite
[string]$quota_agent = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name quota_agent -ErrorAction SilentlyContinue).quota_agent
[string]$template_quota_eleve = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name template_quota_eleve -ErrorAction SilentlyContinue).template_quota_eleve
[string]$template_quota_prof = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name template_quota_prof -ErrorAction SilentlyContinue).template_quota_prof
[string]$template_quota_admin = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name template_quota_admin -ErrorAction SilentlyContinue).template_quota_admin
[string]$template_quota_invite = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name template_quota_invite -ErrorAction SilentlyContinue).template_quota_invite
[string]$template_quota_agent = (Get-ItemProperty 'HKLM:\Software\EannaAD\utilisateurAD\Quota' | Get-ItemProperty -Name template_quota_agent -ErrorAction SilentlyContinue).template_quota_agent


# génération des variables utilisées dans le script


$groupe_base_ckeck = @($($nom_eleves), $($nom_professeurs), $($nom_administratifs), $($nom_invites), $($nom_agents), $($nom_examens) )
$groupe_base_ckeck_peda = @($($nom_eleves), $($nom_professeurs), $($nom_administratifs))


[string]$ou_utilisateur_base = "OU=$($ou_utilisateur),$($ou_base)"
[string]$ou_utilisateur_base_eleve = "OU=$($OU_classes),OU=$($ou_utilisateur),$($ou_base)"
[string]$ou_utilisateur_base_prof = "OU=$($ou_prof),OU=$($ou_utilisateur),$($ou_base)"
[string]$ou_utilisateur_base_admin = "OU=$($ou_admin),OU=$($ou_utilisateur),$($ou_base)"
[string]$ou_utilisateur_base_invites = "OU=$($ou_invites),OU=$($ou_utilisateur),$($ou_base)"
[string]$ou_utilisateur_base_agents = "OU=$($ou_agents),OU=$($ou_utilisateur),$($ou_base)"
[string]$ou_utilisateur_base_examens = "OU=$($ou_examens),OU=$($ou_utilisateur),$($ou_base)"
[string]$OU_TEMP_base = "OU=$($OU_TEMP),$($ou_base)"
[string]$OU_groupe = "OU=$($ou_groupes),$($ou_base)"
[string]$OU_groupe_options = "OU=$($ou_options),OU=$($ou_groupes),$($ou_base)"
[string]$OU_groupe_machines = "OU=Ordinateurs,OU=$($ou_groupes),$($ou_base)"
[string]$OU_groupe_matieres = "OU=$($ou_matieres),OU=$($ou_groupes),$($ou_base)"
[string]$OU_groupe_classes = "OU=$($ou_classe),OU=$($ou_groupes),$($ou_base)"
[string]$OU_groupe_invites = "OU=Invités,OU=$($ou_groupes),$($ou_base)"
[string]$OU_professeur_classes = "OU=Professeur-classe,OU=$($ou_groupes),$($ou_base)"
[string]$OU_groupe_examens = "OU=Examen,OU=$($ou_groupes),$($ou_base)"
[string]$OU_machines_racine = "CN=computers,$($ou_base)"
[string]$OU_machines = "OU=$($OU_machine),$($ou_base)"
[string]$OU_postes = "OU=$($nom_ordinateurs),$($OU_machines)"
[string]$OU_serveurs = "OU=$($nom_serveurs),$($OU_machines)"




[string]$rep_profils = "$($netlogon)Profils"
[string]$rep_partages = "$($lecteur_donnees)\Partages"
[string]$rep_profils_it = "\\$($domaine)\Profils_itinerants"
[string]$rep_options = "$($rep_partages)\options"
[string]$rep_matieres = "$($rep_partages)\Matieres"
[string]$rep_classes = "$($rep_partages)\classe"
[string]$rep_perso_base = "$($rep_partages)\Utilisateurs"
[string]$rep_domain_admin = "$($rep_perso_base)\Admin_domaine"
[string]$rep_imports = "$($lecteur_donnees)\imports"
[string]$rep_ancien = "$($lecteur_donnees)\anciens"
[string]$rep_ancien_scripts_utilisateur = "$($netlogon)ancien_scripts_utilisateur\"
[string]$pathexporteleveCSV = "$($rep_imports)\$($nom_eleves)_$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$pathexportprofCSV = "$($rep_imports)\$($nom_professeurs)_$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$pathexportadminCSV = "$($rep_imports)\$($nom_administratifs)_$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$pathexportCSV = "$($rep_imports)\import_CSV_$(get-date -f dd_MM_yyyy_hh_mm).csv"


[string]$retour_import = "$($chemin_appli)\logs\utilisateurs\import\import$(get-date -f dd_MM_yyyy_hh_mm).log"
[string]$sauve_nettoyage = "$($chemin_appli)\logs\utilisateurs\suppression"
[string]$sauve_nettoyage_purge = "$($chemin_appli)\logs\utilisateurs\purge"
[string]$sauve_nettoyage_groupe = "$($sauve_nettoyage)\groupe_supprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_ou = "$($sauve_nettoyage)\OU_supprimees$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_user_eleves = "$($sauve_nettoyage)\user_eleves_supprimes.csv"
[string]$sauve_nettoyage_user_eleves_archive = "$($sauve_nettoyage_purge)\user_eleves_supprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_user_profs = "$($sauve_nettoyage)\user_profs_supprimes.csv"
[string]$sauve_nettoyage_user_profs_archive = "$($sauve_nettoyage_purge)\user_profs_supprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_user_admin_archive = "$($sauve_nettoyage_purge)\user_admin_supprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_user_invites_archive = "$($sauve_nettoyage_purge)\user_invites_supprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_user_examens_archive = "$($sauve_nettoyage_purge)\user_examens_upprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_user_agents_archive = "$($sauve_nettoyage_purge)\user_agents_upprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"
[string]$sauve_nettoyage_user_users_archive = "$($sauve_nettoyage_purge)\user_supprimes$(get-date -f dd_MM_yyyy_hh_mm).csv"

$quota_eleve = ($quota_eleve / 1GB) * 1GB
$quota_prof = ($quota_prof / 1GB) * 1GB
$quota_admin = ($quota_admin / 1GB) * 1GB
$quota_invite = ($quota_invite / 1GB) * 1GB
$quota_agent = ($quota_agent / 1GB) * 1GB

if ($nom_serveur -ne $null)
{
	$serveurencours = $env:computername
	$fqdnserveur1 = "$($nom_serveur).$domaine"
	if ($nom_serveur2 -ne $null)
	{
		$fqdnserveur2 = "$($nom_serveur2).$domaine"
		if ($serveurencours -eq $nom_serveur)
		{
			$s = New-PSSession -ComputerName $fqdnserveur2
		}
		elseif ($serveurencours -eq $nom_serveur2)
		{
			$s = New-PSSession -ComputerName $fqdnserveur1
		}
		
	}
	else
	{
		$s = "vide"
	}
}

$listeOS = @('(W7-32)', '(W7-64)', '(W10-64)', '(W11-64)')
$nomsOS = @('Windows 7', 'Windows 10', 'Windows 11')


$fileExpl = New-Object System.Windows.Forms.SaveFileDialog
$fileExpl.ValidateNames = $true
$fileExpl.CreatePrompt = $false
$fileExpl.OverwritePrompt = $true
$fileExpl.RestoreDirectory = $false
$fileExpl.InitialDirectory = "$env:userprofile"
